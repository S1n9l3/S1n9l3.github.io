<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>特殊数组的特征值</title>
    <link href="/2022/10/02/LeetCode-1608-%E7%89%B9%E6%AE%8A%E6%95%B0%E7%BB%84%E7%9A%84%E7%89%B9%E5%BE%81%E5%80%BC/"/>
    <url>/2022/10/02/LeetCode-1608-%E7%89%B9%E6%AE%8A%E6%95%B0%E7%BB%84%E7%9A%84%E7%89%B9%E5%BE%81%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="1608-特殊数组的特征值"><a href="#1608-特殊数组的特征值" class="headerlink" title="1608-特殊数组的特征值"></a>1608-特殊数组的特征值</h1><p>给你一个非负整数数组 <code>nums</code> 。如果存在一个数 <code>x</code> ，使得 <code>nums</code> 中恰好有 <code>x </code>个元素 <strong>大于或者等于</strong> <code>x</code> ，那么就称 <code>nums</code> 是一个 <strong>特殊数组</strong> ，而 <code>x</code> 是该数组的 <strong>特征值</strong> 。</p><p><strong>注意</strong>： <code>x</code> <strong>不必</strong> 是 <code>nums</code> 的中的元素。</p><p>如果数组 <code>nums</code> 是一个 <strong>特殊数组</strong> ，请返回它的特征值 <code>x</code> 。否则，返回 <code>-1 </code>。可以证明的是，如果 <code>nums</code> 是特殊数组，那么其特征值 <code>x</code> 是 唯一的 。</p><p>示例 1：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [3,5]<br>输出：2<br>解释：有<span class="hljs-number"> 2 </span>个元素（3 和 5）大于或等于<span class="hljs-number"> 2 </span>。<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs llvm">输入：nums <span class="hljs-operator">=</span> [<span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span>]<br>输出：<span class="hljs-number">-1</span><br>解释：没有满足题目要求的特殊数组，故而也不存在特征值 <span class="hljs-keyword">x</span> 。<br>如果 <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>，应该有 <span class="hljs-number">0</span> 个元素 &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">x</span>，但实际有 <span class="hljs-number">2</span> 个。<br>如果 <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>，应该有 <span class="hljs-number">1</span> 个元素 &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">x</span>，但实际有 <span class="hljs-number">0</span> 个。<br>如果 <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>，应该有 <span class="hljs-number">2</span> 个元素 &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">x</span>，但实际有 <span class="hljs-number">0</span> 个。<br><span class="hljs-keyword">x</span> 不能取更大的值，因为 nums 中只有两个元素。<br></code></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [0,4,3,0,4]<br>输出：3<br>解释：有<span class="hljs-number"> 3 </span>个元素大于或等于<span class="hljs-number"> 3 </span>。<br></code></pre></td></tr></table></figure><p>示例 4：</p><p><code>输入：nums = [3,6,7,7,0] 输出：-1</code> </p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>按照题目的意思，如果是特殊数组，那么特殊值一定在<code>[1, m]</code>之间，其中m是数组长度。那么就可以遍历其中的数，并统计数组中大于或等于该值的数的个数。python的实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">specialArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)+<span class="hljs-number">1</span>):<br><br>            c = <span class="hljs-number">0</span><br><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> nums:<br><br>                <span class="hljs-keyword">if</span> j &gt;= i:<br><br>                    c += <span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">if</span> c == i:<br><br>                <span class="hljs-keyword">return</span> i<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">48</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">14.98</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">14.8</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">89.60</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">98</span> / <span class="hljs-number">98</span><br></code></pre></td></tr></table></figure><p>或者也可以有另一种方法，首先将数组从大到小排列，同样是在<code>[1, m]</code>之间遍历，由于已经逆序排列了，如果存在了特征值<code>i</code>，那么<code>nums[i-1]</code>一定会大于或等于<code>i</code>，而其之后的元素，或者不存在（即已经到达了边界），或者<code>nums[i]&lt;i</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">specialArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        nums.sort(reverse=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)+<span class="hljs-number">1</span>):<br><br>            <span class="hljs-keyword">if</span> (nums[i-<span class="hljs-number">1</span>] &gt;= i) <span class="hljs-keyword">and</span> (i == <span class="hljs-built_in">len</span>(nums) <span class="hljs-keyword">or</span> nums[i] &lt; i):<br><br>                <span class="hljs-keyword">return</span> i<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">44</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">28.09</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">15</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">27.10</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">98</span> / <span class="hljs-number">98</span><br></code></pre></td></tr></table></figure><hr><hr><p>给出java的写法，方法一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">specialArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= nums.length; i++)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : nums)&#123;<br><br>                <span class="hljs-keyword">if</span> (j &gt;= i)&#123;<br><br>                    c++;<br><br>                &#125;<br><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (c == i)&#123;<br><br>                <span class="hljs-keyword">return</span> i;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">1</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">81.80</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">39.3</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">47.37</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">98</span> / <span class="hljs-number">98</span><br></code></pre></td></tr></table></figure><p>方法二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">specialArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br><br>        Arrays.sort(nums);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>, j=n-<span class="hljs-number">1</span>; i&lt;j; i++, j--)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> nums[i];<br><br>            nums[i] = nums[j];<br><br>            nums[j] = tmp;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;n+<span class="hljs-number">1</span>; i++)&#123;<br><br>            <span class="hljs-keyword">if</span> (nums[i-<span class="hljs-number">1</span>]&gt;=i &amp;&amp; (i==n || nums[i]&lt;i))&#123;<br><br>                <span class="hljs-keyword">return</span> i;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">1</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">81.80</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">39.3</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">44.21</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">98</span> / <span class="hljs-number">98</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>特殊数组的特征值</title>
    <link href="/2022/10/02/LeetCode-670-%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/"/>
    <url>/2022/10/02/LeetCode-670-%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="670-最大交换"><a href="#670-最大交换" class="headerlink" title="670-最大交换"></a>670-最大交换</h1><p>给定一个非负整数，你<strong>至多</strong>可以交换一次数字中的任意两位。返回你能得到的<strong>最大值</strong>。</p><p><strong>示例 1 :</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: 2736</span><br><span class="hljs-section">输出: 7236</span><br><span class="hljs-section">解释: 交换数字2和数字7。</span><br></code></pre></td></tr></table></figure><p><strong>示例 2 :</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: 9973</span><br><span class="hljs-section">输出: 9973</span><br><span class="hljs-section">解释: 不需要交换。</span><br></code></pre></td></tr></table></figure><p><strong>注意:</strong></p><ol><li>给定数字的范围是 <code>[0, 10^8]</code></li></ol><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>既然要得到最大值，那么就尽量把最大值放到前面。如何交换？需要将数字从大到小排列，然后依次将原来的数字与排列好的数字比较，如果相等就比较下一个；如果原来的数字小，那么就把这个数设置为相比较的那个大数，然后在原来的数字从后向前寻找替换的大数，找到后将其设置为小数。</p><p>为什么第二次要从后向前的查找？是为了尽量得到更大的数。如果前面或中间的大数被替换了，得到的不是最大的数。</p><p>python实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumSwap</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ts = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">str</span>(num))<br>        tmp = <span class="hljs-built_in">sorted</span>(ts, reverse=<span class="hljs-literal">True</span>)<br>        c = <span class="hljs-number">0</span><br>        k = -<span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ts)):<br>            <span class="hljs-keyword">if</span> ts[i] == tmp[c]:<br>                c += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">elif</span> ts[i] &lt; tmp[c]:<br>                k = ts[i]<br>                ts[i] = tmp[c]<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> k != -<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ts)-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> ts[i] == tmp[c]:<br>                    ts[i] = k<br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join(ts))<br><br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">36</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">68.71</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">14.9</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">42.18</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">111</span> / <span class="hljs-number">111</span><br></code></pre></td></tr></table></figure><hr><hr><p>Java的解法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maximumSwap</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">char</span>[] chars = String.valueOf(num).toCharArray();<br>        <span class="hljs-type">int</span>[] maxIndex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[chars.length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> chars.length-<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> chars.length-<span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-keyword">if</span> (chars[j] - <span class="hljs-string">&#x27;0&#x27;</span> &gt; chars[max] - <span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br>                max = j;<br>            &#125;<br>            maxIndex[j] = max;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chars.length; i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">iValue</span> <span class="hljs-operator">=</span> chars[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">maxValue</span> <span class="hljs-operator">=</span> chars[maxIndex[i]] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (maxValue != iValue)&#123;<br>                chars[i] = (<span class="hljs-type">char</span>) (maxValue + <span class="hljs-string">&#x27;0&#x27;</span>);<br>                chars[maxIndex[i]] = (<span class="hljs-type">char</span>) (iValue + <span class="hljs-string">&#x27;0&#x27;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Integer.parseInt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">0</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">100.00</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">38.1</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">86.13</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">111</span> / <span class="hljs-number">111</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>两个数组的交集</title>
    <link href="/2022/10/02/LeetCode-349-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/"/>
    <url>/2022/10/02/LeetCode-349-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349-两个数组的交集"></a>349-两个数组的交集</h1><p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p><p>示例 1：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[1,2,2,1]</span>, nums2 = <span class="hljs-comment">[2,2]</span><br>输出：<span class="hljs-comment">[2]</span><br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[4,9,5]</span>, nums2 = <span class="hljs-comment">[9,4,9,8,4]</span><br>输出：<span class="hljs-comment">[9,4]</span><br>解释：<span class="hljs-comment">[4,9]</span> 也是可通过的<br></code></pre></td></tr></table></figure><p> </p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>求两个数组的交集，在python中可以使用set进行去重，然后求合集，但是这种方法算是“作弊”吧😅</p><p>另一种方法是对其中一个数组进行遍历，判断其中元素是否在另一个数组中，但是想一想这种方法的复杂度有点高；时间复杂度来说，对于每个元素，都需要在另一个数组中判断是否存在，所以复杂度为<code>O(m*n)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">intersection</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        res = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums1:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> nums2:<br>                <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res:<br>                    res.append(i)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>最后运行结果为</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">52</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">16.16</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">15</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">75.52</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">55</span> / <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><p>怎么优化？🤔首先对第一个数组遍历时，同时保存元素及其出现次数，然后遍历第二个数组时，判断其是否已经保存，如果已经存在那么就是重复的元素；如何去重？🤔如果对最后的结果再次去重，这样会提高复杂度，如果在保存的时候就能判断是否需要保存就好了。</p><p>这样就想到了使用字典，去重时是这么处理的：在第二次循环时如果元素已经存在了，就将其保存并从字典中去除。这种方法的时间复杂度是<code>O(m+n)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">intersection</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        m = &#123;&#125;<br>        res = []<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums1:<br>            m[n] = m.get(n, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums2:<br>            <span class="hljs-keyword">if</span> m.get(n, <span class="hljs-number">0</span>) &gt; <span class="hljs-number">0</span>:<br>                m.pop(n)<br>                res.append(n)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>最后运行结果为</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">40</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">59.53</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">15.1</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">26.27</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">55</span> / <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><hr><hr><p>在学java，记录一个java的题解。方法还是暴力，依次判断一个数组的元素是否在另一个数组中，将结果保存在<code>HashSet</code>中可以去重，最后将<code>HashSet</code>转换为数组返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>        Set&lt;Integer&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (nums1 == <span class="hljs-literal">null</span> || nums2 == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len1</span> <span class="hljs-operator">=</span> nums1.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len2</span> <span class="hljs-operator">=</span> nums2.length;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len1; i++)&#123;<br>            <span class="hljs-keyword">if</span> (checkIsExist(nums2, nums1[i]))&#123;<br>                result.add(nums1[i]);<br>            &#125;<br>        &#125;<br>  <br>        <span class="hljs-type">int</span>[] finalResult = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[result.size()];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> item : result)&#123;<br>            finalResult[start] = item;<br>            start++;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> finalResult;<br>    &#125;<br><br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkIsExist</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums2, <span class="hljs-type">int</span> cur)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums2.length; i++)&#123;<br>            <span class="hljs-keyword">if</span> (nums2[i] == cur)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后运行结果为</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">2</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">95.30</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">41.6</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">44.51</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">55</span> / <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><p>复现一下python的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br><br>        HashMap&lt;Integer, Integer&gt; mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n : nums1)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> mp.getOrDefault(n, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>;<br><br>            mp.put(n, c);<br><br>        &#125;<br><br>  <br><br>        Set&lt;Integer&gt; ks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n : nums2)&#123;<br><br>            <span class="hljs-keyword">if</span> (mp.getOrDefault(n, <span class="hljs-number">0</span>) &gt; <span class="hljs-number">0</span>)&#123;<br><br>                ks.add(n);<br><br>            &#125;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[ks.size()];<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>  <br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k : ks)&#123;<br><br>            res[start] = k;<br><br>            start++;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">3</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">41.24</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">41.4</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">67.01</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">55</span> / <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/01/hello-world/"/>
    <url>/2022/10/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test-images</title>
    <link href="/2022/10/01/Test-images/"/>
    <url>/2022/10/01/Test-images/</url>
    
    <content type="html"><![CDATA[<h1 id="测试图片上传功能呢"><a href="#测试图片上传功能呢" class="headerlink" title="测试图片上传功能呢"></a>测试图片上传功能呢</h1><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/v2-b3d1d263cefc73359007765f40dac9a3_1440w.webp" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
