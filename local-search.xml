<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[杂项] 使用picGo和腾讯云COS搭建图床</title>
    <link href="/2022/10/03/%5B%E6%9D%82%E9%A1%B9%5D%20%E4%BD%BF%E7%94%A8picGo%E5%92%8C%E8%85%BE%E8%AE%AF%E4%BA%91COS%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <url>/2022/10/03/%5B%E6%9D%82%E9%A1%B9%5D%20%E4%BD%BF%E7%94%A8picGo%E5%92%8C%E8%85%BE%E8%AE%AF%E4%BA%91COS%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="使用picGo和腾讯云COS搭建图床"><a href="#使用picGo和腾讯云COS搭建图床" class="headerlink" title="使用picGo和腾讯云COS搭建图床"></a>使用picGo和腾讯云COS搭建图床</h1><p>以前都是本地写文章自己看，所以图片都是保存在本地的。自从搭建了网站，图片的保存成了问题，用网上的图床担心失联，所以就想搭建自己的图床。</p><p>开始使用的是<a href="https://gridea.dev/docs/">Gridea</a>，可以将图片同步到Github仓库，但是经过使用后发现不太好用，老是失败。然后选择了<code>picGo</code>，相较于<code>Gridea</code>，<code>picGo</code>提供了更多的选项，可以选择<code>Github</code>、<code>腾讯云COS</code>、<code>阿里云OSS</code>、<code>七牛图床</code>等，首先选择的是<code>Github图床</code>，实践后发现总是连接失败，挂的梯子也没有用，所以最后选择了<code>腾讯云COS</code>。</p><h2 id="腾讯云COS"><a href="#腾讯云COS" class="headerlink" title="腾讯云COS"></a>腾讯云COS</h2><p>腾讯云COS，即对象存储，首次使用有50G存储的六个月免费期限，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003165321277.png" alt="image-20221003165321277"></p><p>开通后<strong>创建存储桶</strong>，访问权限要设置<strong>公有读私有写</strong>，其他默认就行，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003165608660.png" alt="image-20221003165608660"></p><p>然后在<strong>存储桶列表</strong>选择新建的桶，进入后在<strong>文件列表</strong>中<strong>创建文件夹</strong>用于保存图片，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003170750753.png" alt="image-20221003170750753"></p><p>接着选择<strong>密钥管理</strong>，在<strong>API密钥管理</strong>生成密钥，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003165839573.png" alt="image-20221003165839573"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003170039435.png" alt="image-20221003170039435"></p><p>到这里腾讯云COS就配置好了，密钥要保密，不要泄露。</p><h2 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a>PicGo配置</h2><p>首先在<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo-Github</a>下载客户端。</p><p>下载安装后进行配置，主要配置的就是桶名称和API密钥，根据自己的配置就行了，存储路径设置为创建的文件夹，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003170852260.png" alt="image-20221003170852260"></p><p>配置好之 后，就可以上传图片了，上传后可以在相册看到，同时腾讯云COS文件夹中也可以看到，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003171110471.png" alt="image-20221003171110471"></p><h2 id="Typora配置"><a href="#Typora配置" class="headerlink" title="Typora配置"></a>Typora配置</h2><p>写文档用的最多的就是Typora，Typora提供了图床同步的功能，在设置中选择图像，上传服务选择<code>PicGo(app)</code>，路径是PicGo的安装路径，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003171716992.png" alt="image-20221003171716992"></p><p>设置好之后点击<strong>验证图片上传功能</strong>就可以测试上床是否正常，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003172137516.png" alt="image-20221003172137516"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里图床就搭建好了，国庆几天都在折腾这些，网上工具很多，教程也很多，找到一个合适的不容易。</p><p>国庆快乐:happy:</p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>typora</tag>
      
      <tag>picGo</tag>
      
      <tag>腾讯云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[算法] LeetCode-1608-特殊数组的特征值</title>
    <link href="/2022/10/03/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-1608-%E7%89%B9%E6%AE%8A%E6%95%B0%E7%BB%84%E7%9A%84%E7%89%B9%E5%BE%81%E5%80%BC/"/>
    <url>/2022/10/03/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-1608-%E7%89%B9%E6%AE%8A%E6%95%B0%E7%BB%84%E7%9A%84%E7%89%B9%E5%BE%81%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="1608-特殊数组的特征值"><a href="#1608-特殊数组的特征值" class="headerlink" title="1608-特殊数组的特征值"></a>1608-特殊数组的特征值</h1><p>给你一个非负整数数组 <code>nums</code> 。如果存在一个数 <code>x</code> ，使得 <code>nums</code> 中恰好有 <code>x </code>个元素 <strong>大于或者等于</strong> <code>x</code> ，那么就称 <code>nums</code> 是一个 <strong>特殊数组</strong> ，而 <code>x</code> 是该数组的 <strong>特征值</strong> 。</p><p><strong>注意</strong>： <code>x</code> <strong>不必</strong> 是 <code>nums</code> 的中的元素。</p><p>如果数组 <code>nums</code> 是一个 <strong>特殊数组</strong> ，请返回它的特征值 <code>x</code> 。否则，返回 <code>-1 </code>。可以证明的是，如果 <code>nums</code> 是特殊数组，那么其特征值 <code>x</code> 是 唯一的 。</p><p>示例 1：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [3,5]<br>输出：2<br>解释：有<span class="hljs-number"> 2 </span>个元素（3 和 5）大于或等于<span class="hljs-number"> 2 </span>。<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs llvm">输入：nums <span class="hljs-operator">=</span> [<span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span>]<br>输出：<span class="hljs-number">-1</span><br>解释：没有满足题目要求的特殊数组，故而也不存在特征值 <span class="hljs-keyword">x</span> 。<br>如果 <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>，应该有 <span class="hljs-number">0</span> 个元素 &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">x</span>，但实际有 <span class="hljs-number">2</span> 个。<br>如果 <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>，应该有 <span class="hljs-number">1</span> 个元素 &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">x</span>，但实际有 <span class="hljs-number">0</span> 个。<br>如果 <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>，应该有 <span class="hljs-number">2</span> 个元素 &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">x</span>，但实际有 <span class="hljs-number">0</span> 个。<br><span class="hljs-keyword">x</span> 不能取更大的值，因为 nums 中只有两个元素。<br></code></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [0,4,3,0,4]<br>输出：3<br>解释：有<span class="hljs-number"> 3 </span>个元素大于或等于<span class="hljs-number"> 3 </span>。<br></code></pre></td></tr></table></figure><p>示例 4：</p><p><code>输入：nums = [3,6,7,7,0] 输出：-1</code></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>按照题目的意思，如果是特殊数组，那么特殊值一定在<code>[1, m]</code>之间，其中m是数组长度。那么就可以遍历其中的数，并统计数组中大于或等于该值的数的个数。python的实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">specialArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)+<span class="hljs-number">1</span>):<br><br>            c = <span class="hljs-number">0</span><br><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> nums:<br><br>                <span class="hljs-keyword">if</span> j &gt;= i:<br><br>                    c += <span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">if</span> c == i:<br><br>                <span class="hljs-keyword">return</span> i<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">48</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">14.98</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">14.8</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">89.60</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">98</span> / <span class="hljs-number">98</span><br></code></pre></td></tr></table></figure><p>或者也可以有另一种方法，首先将数组从大到小排列，同样是在<code>[1, m]</code>之间遍历，由于已经逆序排列了，如果存在了特征值<code>i</code>，那么<code>nums[i-1]</code>一定会大于或等于<code>i</code>，而其之后的元素，或者不存在（即已经到达了边界），或者<code>nums[i]&lt;i</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">specialArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        nums.sort(reverse=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)+<span class="hljs-number">1</span>):<br><br>            <span class="hljs-keyword">if</span> (nums[i-<span class="hljs-number">1</span>] &gt;= i) <span class="hljs-keyword">and</span> (i == <span class="hljs-built_in">len</span>(nums) <span class="hljs-keyword">or</span> nums[i] &lt; i):<br><br>                <span class="hljs-keyword">return</span> i<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">44</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">28.09</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">15</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">27.10</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">98</span> / <span class="hljs-number">98</span><br></code></pre></td></tr></table></figure><hr><hr><p>给出java的写法，方法一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">specialArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= nums.length; i++)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : nums)&#123;<br><br>                <span class="hljs-keyword">if</span> (j &gt;= i)&#123;<br><br>                    c++;<br><br>                &#125;<br><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (c == i)&#123;<br><br>                <span class="hljs-keyword">return</span> i;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">1</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">81.80</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">39.3</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">47.37</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">98</span> / <span class="hljs-number">98</span><br></code></pre></td></tr></table></figure><p>方法二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">specialArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br><br>        Arrays.sort(nums);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>, j=n-<span class="hljs-number">1</span>; i&lt;j; i++, j--)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> nums[i];<br><br>            nums[i] = nums[j];<br><br>            nums[j] = tmp;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;n+<span class="hljs-number">1</span>; i++)&#123;<br><br>            <span class="hljs-keyword">if</span> (nums[i-<span class="hljs-number">1</span>]&gt;=i &amp;&amp; (i==n || nums[i]&lt;i))&#123;<br><br>                <span class="hljs-keyword">return</span> i;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">1</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">81.80</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">39.3</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">44.21</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">98</span> / <span class="hljs-number">98</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>python</tag>
      
      <tag>java</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[杂项] 使用hexo搭建Github Page</title>
    <link href="/2022/10/02/%5B%E6%9D%82%E9%A1%B9%5D%20%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BAGithub%20Page/"/>
    <url>/2022/10/02/%5B%E6%9D%82%E9%A1%B9%5D%20%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BAGithub%20Page/</url>
    
    <content type="html"><![CDATA[<h1 id="使用hexo搭建Github-Page个人主页"><a href="#使用hexo搭建Github-Page个人主页" class="headerlink" title="使用hexo搭建Github Page个人主页"></a>使用<code>hexo</code>搭建<code>Github Page</code>个人主页</h1><p>为什么要搭建个人主页？因为在平台上会有<strong>审核</strong>。</p><p>最开始想要搭建个人网站使用的是<code>wordpress</code>，当时的体验非常的不好，首先就是速度，当时并不会搭梯子，所以搭建或者更新会非常的慢；然后<code>wordpress</code>功能会非常的臃肿，如果只是要写作来说，很多都是没有的功能；最后就是安全问题，这是后话了。</p><p>某一天偶然学会了写<code>Markdown</code>文档，有种相见恨晚的感觉，之后写文档都是用的这种。所以想要再次搭建个人网站时，就想着能否将本地写的文档直接上传作为博客。于是就直到了<code>Github</code>的<code>Page</code>主页。</p><p><code>GitHub</code>的<code>Page</code>主页搭建方法有很多，经过测试，选择了一种最适合的，那就是<code>hexo</code>。这里会详细的介绍我是如何用<code>hexo</code>搭建<code>Github</code>个人主页的。</p><h2 id="Hexo本地搭建"><a href="#Hexo本地搭建" class="headerlink" title="Hexo本地搭建"></a><code>Hexo</code>本地搭建</h2><p><a href="https://hexo.io/zh-cn/">Hexo</a>是一个快速、简洁且高效的博客框架。<code>Hexo</code>使用<code>Markdown</code>解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>安装<code>Hexo</code>需要用到：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (<code>Node.js</code> 版本需不低于 <code>10.13</code>，建议使用 <code>Node.js 12.0</code> 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><p>安装好之后，就可以使用<code>npm</code>安装<code>Hexo</code>了。使用命令：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>安装成功之后可以使用命令检查：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">hexo <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>接着就可以搭建网站了。</p><p>首先初始化博客目录，在合适的文件夹下使用命令：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">hexo <span class="hljs-keyword">init</span> &lt;github name&gt;.github.io<br></code></pre></td></tr></table></figure><p>这里<code>&lt;github name&gt;</code>需要换成<code>GitHub用户名</code>。运行成功会创建名为<code>&lt;github name&gt;.github.io</code>的目录。进入该目录，使用命令进行自动配置博客，</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>执行完成之后，会出现类似下面的目录结构：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqf">.<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></td></tr></table></figure><p>其中各个文件或目录的作用为：</p><ul><li><code>_config.yaml</code>：网站主要配置信息。</li><li><code>package.json</code>：应用程序信息。安装后就没用了。</li><li><code>scaffolds</code>：模板文件夹。<code>Hexo</code>可根据模板创建文件。</li><li><code>source</code>：资源文件夹，用于存放用户资源。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。<code>Markdown</code> 和 <code>HTML</code> 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</li><li><code>themes</code>：主题文件夹。Hexo 会根据主题来生成静态页面。</li></ul><p>然后执行以下命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>其中每个命令的作用：</p><ul><li><code>hexo clean</code>：清除缓存文件和已生成的静态文件。</li><li><code>hexo g</code>：即<code>generate</code>，生成静态文件。</li><li><code>hexo s</code>：即<code>server</code>，启动服务器。默认情况下在<code>http://localhost:4000/</code>。</li></ul><p>打开浏览器，输入<code>http://localhost:4000/</code>，就可以看到个人网站了，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/caqbw2nc2g.png" alt="img"></p><h3 id="Hexo主题设置"><a href="#Hexo主题设置" class="headerlink" title="Hexo主题设置"></a><code>Hexo</code>主题设置</h3><p><code>Hexo</code>提供了很多的<a href="https://hexo.io/themes/">Themes</a>，可以很方便的进行配置。通用的方法是找到一款喜欢的主题，将主题<code>clone</code>到<code>theme</code>目录下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git clone https://github.com/iissnan/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><p>然后修改<code>_config.yml</code>文件中的<code>theme</code>为主题名字：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">theme:</span> <span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>然后重新生成和运行：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>这样就可以看到修改后的主题了，这样就好看多了。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/7kon5wcfli.png" alt="img"></p><p>还有另外的一种修改主题的方法，使用的主题是<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>，其他主题不知道是否提供这种方法，在<code>Hexo 5.0.0</code>版本以上，推荐通过<code>npm</code>直接安装，进入博客目录执行命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>这样会将主题下载到<code>node_modules</code>目录下的<code>hexo-theme-fluid</code>文件夹中，然后将该文件夹中的<code>_config.yml</code>复制到博客根目录的<code>_config.fluid.yml</code>文件中。接着修改根目录的<code>_config.yml</code>文件指定主题。最后重新生成和运行，就可以看到效果了：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003091327142.png" alt="image-20221003091327142"></p><h2 id="部署到Github-Page"><a href="#部署到Github-Page" class="headerlink" title="部署到Github Page"></a>部署到<code>Github Page</code></h2><p>前面已经设置好了个人<code>blog</code>，但是只能自己看，接下啦就部署到网上让更多人看到了。如果有自己的服务器可以部署到服务器上，如果没有，就可以部署到<code>Github Page</code>上。</p><p>首先创建<code>Github</code>账号，创建一个仓库<code>&lt;Github name&gt;.github.io</code>，属性为<code>public</code>。</p><p>然后在本地安装<code>hexo-deployer-git</code>插件，用于<code>push</code>到<code>GitHub</code>上：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>在<code>_config.yml</code>中配置Git：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">deploy:<br>    type: git<br>    repo: https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/&lt;Github name&gt;/</span>&lt;Github name&gt;.github.io<br></code></pre></td></tr></table></figure><p>接着就可以部署到Github了：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>这里<code>d</code>就是<code>deploy</code>，即部署。默认会推送到<code>master</code>分支。推送可以使用<code>hexo g -d</code>或者<code>hexo d -g</code>来完成自动生成和部署。</p><p>现在访问<code>&lt;Github name&gt;.github.io</code>就可以访问了。</p><h2 id="如何写作"><a href="#如何写作" class="headerlink" title="如何写作"></a>如何写作</h2><p>网站创建就完成了，接下来就是如何能创建和管理内容了，毕竟内容才是最主要的。</p><p>创建新文章有两种方法，可以使用命令创建，在根目录下使用命令：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo new <span class="hljs-selector-tag">article</span> &lt;<span class="hljs-selector-tag">Article</span> name&gt;<br></code></pre></td></tr></table></figure><p>就会在<code>source/_posts</code>下生成相应的MD文件了。或者可以直接在该目录下创建文件，个人更喜欢后者。</p><p>这里不得不说一下图片的处理，Markdown文档的图片是以URL形式设置的，所以需要一个稳定的地址来保存图片，通常需要用到图床，但是网上的免费图床可能会失效，这就很难受了。所以就自建了图床，用到了<code>picGo</code>、<code>Typora</code>和<code>腾讯云COS</code>，将会在另一篇文章细说。</p><h3 id="文章管理"><a href="#文章管理" class="headerlink" title="文章管理"></a>文章管理</h3><p>可以给文章打标签、分类或者设置其他属性，用于管理。</p><p>这里也可以使用命令，但是用起来有点麻烦，这里使用更直观的方法。每次创建文件时，都在文章开头设置属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章名称</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">layout</span><br><span class="hljs-attr">tags:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">tag1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">tag2</span><br><span class="hljs-attr">categories:</span> <br>    <span class="hljs-bullet">-</span> [<span class="hljs-string">categories1</span>]<br>    <span class="hljs-bullet">-</span> [<span class="hljs-string">categories2</span>]<br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-10-02</span><br><span class="hljs-attr">updated:</span> <span class="hljs-number">2022-10-03</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>其中关键字的表示：</p><ul><li><code>title</code>：文章标题。</li><li><code>layout</code>：布局。指定文章的布局。</li><li><code>tags</code>：标签。</li><li><code>categories</code>：分类。为什么需要加方括号参考<a href="https://hexo.io/zh-cn/docs/front-matter">这里</a>。</li><li><code>date</code>：创建日期。</li><li><code>updated</code>：更新日期。</li><li><code>comments</code>：是否开启评论功能，默认true。</li></ul><p>还有一些其他的关键字看：<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter | Hexo</a>。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>使用网站搭建好了，但是网站名有点长，不好记，所以可以买个合适的域名绑定。</p><p>购买域名推荐<a href="https://www.dynadot.com/">Dynadot</a>，国外的域名商，可以使用支付宝购买，而且不用<strong>备案</strong>。</p><p>申请账号后，就可以选域名了，注意要在这里选择<strong>人民币</strong>，否则不能用支付宝支付：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003100506139.png" alt="image-20221003100506139"></p><p>在博客的<code>sources</code>目录下新建<code>CNAME</code>文件，在文件中写申请的域名，然后推到<code>Github</code>上。</p><p>接着需要为域名添加<code>DNS</code>解析，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003101234645.png" alt="image-20221003101234645"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003101330991.png" alt="image-20221003101330991"></p><p>最后在<code>Github</code>仓库中点击<code>setting</code>，进行设置：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003101504745.png" alt="image-20221003101504745"></p><p>等一会，就可以使用自己的域名访问了！</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p><code>Github</code>不让百度爬取索引，所以百度是搜索不到网站的。如果想要被更多的搜索，就可以购买自己的服务器了。</p><p>腾讯或者阿里的都可以，第一次购买有优惠，还有学生优惠，偶尔还会打折，价格也不贵，但是需要备案。服务器搭建服务这里就不多说了，教程很多。搭建好网站后记得<code>DNS</code>解析到服务器。</p><h2 id="Hexo的一些命令"><a href="#Hexo的一些命令" class="headerlink" title="Hexo的一些命令"></a><code>Hexo</code>的一些命令</h2><p>这里介绍一些常用的命令，可以跳过。</p><h3 id="init"><a href="#init" class="headerlink" title="init"></a><code>init</code></h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hexo</span> init<span class="hljs-meta"> [folder]</span><br></code></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，<code>Hexo</code> 默认在目前的文件夹建立网站。</p><p>本命令相当于执行了以下几步：</p><ol><li><code>Git clone hexo-starter</code> 和 <code>hexo-theme-landscape</code> 主题到当前目录或指定目录。</li><li>使用 <code>Yarn 1</code>、<code>pnpm</code> 或 <code>npm</code> 包管理器下载依赖（如有已安装多个，则列在前面的优先）。<code>npm</code> 默认随 <code>Node.js</code> 安装。</li></ol><h3 id="new"><a href="#new" class="headerlink" title="new"></a><code>new</code></h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;post title with whitespace&quot;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，<code>Hexo</code> 会使用文章的标题来决定文章文件的路径。对于独立页面来说，<code>Hexo</code> 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> --path about/me <span class="hljs-string">&quot;About me&quot;</span><br></code></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 <code>Front Matter</code> 中的 <code>title</code> 为 <code>&quot;About me&quot;</code></p><p>注意！<code>title</code> 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hexo <span class="hljs-keyword">new</span> page <span class="hljs-comment">--path about/me</span><br></code></pre></td></tr></table></figure><p>此时 <code>Hexo</code> 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 <code>Front Matter</code> 中的 <code>title</code> 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，<code>hexo-cli</code> 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">$ hexo publish [layout] <span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发表草稿。</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo d<br></code></pre></td></tr></table></figure><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">$ hexo render &lt;file1&gt; [file2] ...<br></code></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-o</code>, <code>--output</code></td><td align="left">设置输出路径</td></tr></tbody></table><h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo migrate &lt;<span class="hljs-keyword">type</span>&gt;<br></code></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean<br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo list &lt;<span class="hljs-keyword">type</span>&gt;<br></code></pre></td></tr></table></figure><p>列出网站资料。</p><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ hexo <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>显示 <code>Hexo</code> 版本。</p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
      <tag>域名</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[算法] LeetCode-670-最大交换</title>
    <link href="/2022/10/02/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-670-%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/"/>
    <url>/2022/10/02/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-670-%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="670-最大交换"><a href="#670-最大交换" class="headerlink" title="670-最大交换"></a>670-最大交换</h1><p>给定一个非负整数，你<strong>至多</strong>可以交换一次数字中的任意两位。返回你能得到的<strong>最大值</strong>。</p><p><strong>示例 1 :</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: 2736</span><br><span class="hljs-section">输出: 7236</span><br><span class="hljs-section">解释: 交换数字2和数字7。</span><br></code></pre></td></tr></table></figure><p><strong>示例 2 :</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: 9973</span><br><span class="hljs-section">输出: 9973</span><br><span class="hljs-section">解释: 不需要交换。</span><br></code></pre></td></tr></table></figure><p><strong>注意:</strong></p><ol><li>给定数字的范围是 <code>[0, 10^8]</code></li></ol><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>既然要得到最大值，那么就尽量把最大值放到前面。如何交换？需要将数字从大到小排列，然后依次将原来的数字与排列好的数字比较，如果相等就比较下一个；如果原来的数字小，那么就把这个数设置为相比较的那个大数，然后在原来的数字从后向前寻找替换的大数，找到后将其设置为小数。</p><p>为什么第二次要从后向前的查找？是为了尽量得到更大的数。如果前面或中间的大数被替换了，得到的不是最大的数。</p><p>python实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumSwap</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ts = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">str</span>(num))<br>        tmp = <span class="hljs-built_in">sorted</span>(ts, reverse=<span class="hljs-literal">True</span>)<br>        c = <span class="hljs-number">0</span><br>        k = -<span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ts)):<br>            <span class="hljs-keyword">if</span> ts[i] == tmp[c]:<br>                c += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">elif</span> ts[i] &lt; tmp[c]:<br>                k = ts[i]<br>                ts[i] = tmp[c]<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> k != -<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ts)-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> ts[i] == tmp[c]:<br>                    ts[i] = k<br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join(ts))<br><br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">36</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">68.71</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">14.9</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">42.18</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">111</span> / <span class="hljs-number">111</span><br></code></pre></td></tr></table></figure><hr><hr><p>Java的解法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maximumSwap</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">char</span>[] chars = String.valueOf(num).toCharArray();<br>        <span class="hljs-type">int</span>[] maxIndex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[chars.length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> chars.length-<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> chars.length-<span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-keyword">if</span> (chars[j] - <span class="hljs-string">&#x27;0&#x27;</span> &gt; chars[max] - <span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br>                max = j;<br>            &#125;<br>            maxIndex[j] = max;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chars.length; i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">iValue</span> <span class="hljs-operator">=</span> chars[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">maxValue</span> <span class="hljs-operator">=</span> chars[maxIndex[i]] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (maxValue != iValue)&#123;<br>                chars[i] = (<span class="hljs-type">char</span>) (maxValue + <span class="hljs-string">&#x27;0&#x27;</span>);<br>                chars[maxIndex[i]] = (<span class="hljs-type">char</span>) (iValue + <span class="hljs-string">&#x27;0&#x27;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Integer.parseInt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">0</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">100.00</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">38.1</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">86.13</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">111</span> / <span class="hljs-number">111</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>python</tag>
      
      <tag>java</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[算法] LeetCode-349-两个数组的交集</title>
    <link href="/2022/10/01/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-349-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/"/>
    <url>/2022/10/01/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-349-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349-两个数组的交集"></a>349-两个数组的交集</h1><p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p><p>示例 1：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[1,2,2,1]</span>, nums2 = <span class="hljs-comment">[2,2]</span><br>输出：<span class="hljs-comment">[2]</span><br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[4,9,5]</span>, nums2 = <span class="hljs-comment">[9,4,9,8,4]</span><br>输出：<span class="hljs-comment">[9,4]</span><br>解释：<span class="hljs-comment">[4,9]</span> 也是可通过的<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>求两个数组的交集，在python中可以使用set进行去重，然后求合集，但是这种方法算是“作弊”吧😅</p><p>另一种方法是对其中一个数组进行遍历，判断其中元素是否在另一个数组中，但是想一想这种方法的复杂度有点高；时间复杂度来说，对于每个元素，都需要在另一个数组中判断是否存在，所以复杂度为<code>O(m*n)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">intersection</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        res = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums1:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> nums2:<br>                <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res:<br>                    res.append(i)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>最后运行结果为</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">52</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">16.16</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">15</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">75.52</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">55</span> / <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><p>怎么优化？🤔首先对第一个数组遍历时，同时保存元素及其出现次数，然后遍历第二个数组时，判断其是否已经保存，如果已经存在那么就是重复的元素；如何去重？🤔如果对最后的结果再次去重，这样会提高复杂度，如果在保存的时候就能判断是否需要保存就好了。</p><p>这样就想到了使用字典，去重时是这么处理的：在第二次循环时如果元素已经存在了，就将其保存并从字典中去除。这种方法的时间复杂度是<code>O(m+n)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">intersection</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        m = &#123;&#125;<br>        res = []<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums1:<br>            m[n] = m.get(n, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums2:<br>            <span class="hljs-keyword">if</span> m.get(n, <span class="hljs-number">0</span>) &gt; <span class="hljs-number">0</span>:<br>                m.pop(n)<br>                res.append(n)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>最后运行结果为</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">40</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">59.53</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">15.1</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">26.27</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">55</span> / <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><hr><hr><p>在学java，记录一个java的题解。方法还是暴力，依次判断一个数组的元素是否在另一个数组中，将结果保存在<code>HashSet</code>中可以去重，最后将<code>HashSet</code>转换为数组返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>        Set&lt;Integer&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (nums1 == <span class="hljs-literal">null</span> || nums2 == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len1</span> <span class="hljs-operator">=</span> nums1.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len2</span> <span class="hljs-operator">=</span> nums2.length;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len1; i++)&#123;<br>            <span class="hljs-keyword">if</span> (checkIsExist(nums2, nums1[i]))&#123;<br>                result.add(nums1[i]);<br>            &#125;<br>        &#125;<br>  <br>        <span class="hljs-type">int</span>[] finalResult = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[result.size()];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> item : result)&#123;<br>            finalResult[start] = item;<br>            start++;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> finalResult;<br>    &#125;<br><br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkIsExist</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums2, <span class="hljs-type">int</span> cur)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums2.length; i++)&#123;<br>            <span class="hljs-keyword">if</span> (nums2[i] == cur)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后运行结果为</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">2</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">95.30</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">41.6</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">44.51</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">55</span> / <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><p>复现一下python的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br><br>        HashMap&lt;Integer, Integer&gt; mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n : nums1)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> mp.getOrDefault(n, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>;<br><br>            mp.put(n, c);<br><br>        &#125;<br><br>  <br><br>        Set&lt;Integer&gt; ks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n : nums2)&#123;<br><br>            <span class="hljs-keyword">if</span> (mp.getOrDefault(n, <span class="hljs-number">0</span>) &gt; <span class="hljs-number">0</span>)&#123;<br><br>                ks.add(n);<br><br>            &#125;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[ks.size()];<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>  <br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k : ks)&#123;<br><br>            res[start] = k;<br><br>            start++;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">3</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">41.24</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">41.4</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">67.01</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">55</span> / <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>python</tag>
      
      <tag>java</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
