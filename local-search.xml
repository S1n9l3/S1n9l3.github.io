<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[java] java读写json文件</title>
    <link href="/2022/10/09/%5Bjava%5D%20java%E8%AF%BB%E5%86%99json%E6%96%87%E4%BB%B6/"/>
    <url>/2022/10/09/%5Bjava%5D%20java%E8%AF%BB%E5%86%99json%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="java读写json文件"><a href="#java读写json文件" class="headerlink" title="java读写json文件"></a><code>java</code>读写<code>json</code>文件</h1><p><code>java</code>读写<code>json</code>还真实麻烦，找了很多方法，最后发现还是<code>fastjson</code>最好用。</p><p>这里用到了两个包，<code>maven</code>导包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba.fastjson2/fastjson2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="写入到json文件"><a href="#写入到json文件" class="headerlink" title="写入到json文件"></a>写入到<code>json</code>文件</h2><p>定义这样的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeJson</span><span class="hljs-params">(String fileName, Object obj)</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(obj);<br>    <span class="hljs-keyword">try</span> &#123;<br>        FileUtils.write(file, jsonString, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先测试写入<code>HashMap</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;xx&quot;</span>, <span class="hljs-string">&quot;111&quot;</span>);<br>map.put(<span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-string">&quot;222&quot;</span>);<br>map.put(<span class="hljs-string">&quot;zz&quot;</span>, <span class="hljs-string">&quot;333&quot;</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/fastjson.json&quot;</span>;<br><br>writeJson(fileName, map);<br></code></pre></td></tr></table></figure><p>最后得到的文件内容为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;xx&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;111&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;yy&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;222&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;zz&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;333&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>如果是List：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;xx&quot;</span>, <span class="hljs-string">&quot;111&quot;</span>);<br>map.put(<span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-string">&quot;222&quot;</span>);<br>map.put(<span class="hljs-string">&quot;zz&quot;</span>, <span class="hljs-string">&quot;333&quot;</span>);<br><br><span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>list.add(map);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/fastjsonList.json&quot;</span>;<br><br>writeJson(fileName, list);<br></code></pre></td></tr></table></figure><p>文件内容为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;xx&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;111&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;yy&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;222&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;zz&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;333&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>如果是一个自定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写入到文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>student.setAge(<span class="hljs-number">18</span>);<br>student.setName(<span class="hljs-string">&quot;XY&quot;</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/fastjsonStudent.json&quot;</span>;<br><br>writeJson(fileName, student);<br></code></pre></td></tr></table></figure><p>最后得到文件内容为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">18</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;XY&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="读取json文件"><a href="#读取json文件" class="headerlink" title="读取json文件"></a>读取<code>json</code>文件</h2><p>定义写入的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title function_">readJson</span><span class="hljs-params">(String fileName)</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> FileUtils.readFileToString(file, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-comment">// 可以指定解析格式</span><br>        <span class="hljs-comment">// Map map = JSONObject.parseObject(jsonString, Map.class);</span><br>        jsonObject = JSONObject.parseObject(jsonString);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> jsonObject;<br>&#125;<br></code></pre></td></tr></table></figure><p>读取<code>json</code>内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/fastjson.json&quot;</span>;<br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> readJson(fileName);<br></code></pre></td></tr></table></figure><p>输出内容为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<span class="hljs-string">&quot;xx&quot;</span>:<span class="hljs-string">&quot;111&quot;</span>,<span class="hljs-string">&quot;yy&quot;</span>:<span class="hljs-string">&quot;222&quot;</span>,<span class="hljs-string">&quot;zz&quot;</span>:<span class="hljs-string">&quot;333&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>读取<code>List</code>内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/fastjsonList.json&quot;</span>;<br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> readJson(fileName);<br></code></pre></td></tr></table></figure><p>这样会出错，看来只是保存<code>List</code>格式是不太好的，</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Exception</span> <span class="hljs-keyword">in</span> thread &quot;main&quot; com.alibaba.fastjson2.JSONException: illegal <span class="hljs-keyword">input</span>， <span class="hljs-keyword">offset</span> <span class="hljs-number">1</span>, <span class="hljs-type">char</span> [<br></code></pre></td></tr></table></figure><p>读取自定义类<code>Student</code>内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/fastjsonStudent.json&quot;</span>;<br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> readJson(fileName);<br></code></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">18</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;XY&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>json</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[java] java读取文件</title>
    <link href="/2022/10/07/%5Bjava%5D%20java%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/"/>
    <url>/2022/10/07/%5Bjava%5D%20java%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="java读取文件"><a href="#java读取文件" class="headerlink" title="java读取文件"></a>java读取文件</h1><p>java读取文件有四种方式：</p><ol><li>按字节读取文件内容；</li><li>按字符读取文件内容；</li><li>按行读取文件内容；</li><li>随机读取文件内容；</li></ol><h2 id="按字节读取文件内容"><a href="#按字节读取文件内容" class="headerlink" title="按字节读取文件内容"></a>按字节读取文件内容</h2><p>以字节为单位读取文件，常用于读二进制文件，如图片、声音、影像等文件。</p><p>单字节读取文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFileByBytes</span><span class="hljs-params">(String fileName)</span><br>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        in = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-type">int</span> tmpByte;<br>        <span class="hljs-keyword">while</span> ((tmpByte = in.read()) != -<span class="hljs-number">1</span>)<br>        &#123;<br>            System.out.write(tmpByte);<br>        &#125;<br>        in.close();<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (in != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                in.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>多字节读取文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFileByMultiBytes</span><span class="hljs-params">(String fileName)</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">byte</span>[] tmpByte = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">100</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">byteRead</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        in = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-keyword">while</span> ((byteRead = in.read(tmpByte)) != -<span class="hljs-number">1</span>)<br>        &#123;<br>            System.out.write(tmpByte, <span class="hljs-number">0</span>, byteRead);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (in != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                in.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="按字符读取文件内容"><a href="#按字符读取文件内容" class="headerlink" title="按字符读取文件内容"></a>按字符读取文件内容</h2><p>以字符为单位读取文件，常用于读文本，数字等类型的文件。</p><p>单字符读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFileByChars</span><span class="hljs-params">(String fileName)</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>    <span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file));<br>        <span class="hljs-type">int</span> tmpChar;<br>        <span class="hljs-keyword">while</span> ((tmpChar = reader.read()) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.print((<span class="hljs-type">char</span>) tmpChar);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                reader.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>多字符读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFileByMultiChars</span><span class="hljs-params">(String fileName)</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>    <span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">char</span>[] tmpChars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">30</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">charRead</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file));<br>        <span class="hljs-keyword">while</span> ((charRead = reader.read(tmpChars)) != -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span> (charRead == tmpChars.length)&#123;<br>                System.out.print(tmpChars);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; charRead; i++) &#123;<br>                    System.out.print(tmpChars[i]);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                reader.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="按行读取文件内容"><a href="#按行读取文件内容" class="headerlink" title="按行读取文件内容"></a>按行读取文件内容</h2><p>以行为单位读取文件，常用于读面向行的格式化文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFileByLine</span><span class="hljs-params">(String fileName)</span>&#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tmpString</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> ((tmpString = reader.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;line &quot;</span> + line + <span class="hljs-string">&quot; : &quot;</span> + tmpString);<br>            line++;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                reader.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="随机读取文件内容"><a href="#随机读取文件内容" class="headerlink" title="随机读取文件内容"></a>随机读取文件内容</h2><p>随机读取文件内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFileByRandomAccess</span><span class="hljs-params">(String fileName)</span>&#123;<br>    <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">randomAccessFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        randomAccessFile = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(fileName, <span class="hljs-string">&quot;r&quot;</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">fileLength</span> <span class="hljs-operator">=</span> randomAccessFile.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">beginIndex</span> <span class="hljs-operator">=</span> (fileLength &gt; <span class="hljs-number">4</span>) ? <span class="hljs-number">4</span> : <span class="hljs-number">0</span>;<br>        randomAccessFile.seek(beginIndex);<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">byteRead</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((byteRead = randomAccessFile.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.write(bytes, <span class="hljs-number">0</span>, byteRead);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (randomAccessFile != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                randomAccessFile.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[java] java反射</title>
    <link href="/2022/10/05/%5Bjava%5D%20java%E5%8F%8D%E5%B0%84/"/>
    <url>/2022/10/05/%5Bjava%5D%20java%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h1><p>Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。</p><p>反射机制允许程序在运行时取得任何一个已知名称的class的内部信息，包括包括其modifiers(修饰符)，fields(属性)，methods(方法)等，并可于运行时改变fields内容或调用methods。那么便可以更灵活的编写代码，代码可以在运行时装配，无需在组件之间进行源代码链接，降低代码的耦合度；还有动态代理的实现等等；但是需要注意的是反射使用不当会造成很高的资源消耗！</p><hr><p>定义一个类<code>Person</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">// 私有属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;AA&quot;</span>;<br>    <span class="hljs-comment">// 公有属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br>    <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-comment">// 私有方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;private eat()&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 公有方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;public say()&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 有参数的公有方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">(String words)</span>&#123;<br>        <span class="hljs-keyword">return</span> words;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="得到Class有三种方法"><a href="#得到Class有三种方法" class="headerlink" title="得到Class有三种方法"></a>得到<code>Class</code>有三种方法</h2><p>首先可以通过实例化对象调用<code>getClass</code>方法获取，如果获取了一个对象，但是不知道具体类就用这种方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">person1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-type">Class</span> <span class="hljs-variable">class1</span> <span class="hljs-operator">=</span> person1.getClass();<br></code></pre></td></tr></table></figure><p>然后可以通过<code>类名.class</code>获取，这种方法更方便安全可靠，性能更高，而且说明任何一个类都有一个隐含的静态成员变量<code>class</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">class2</span> <span class="hljs-operator">=</span> Person.class;<br></code></pre></td></tr></table></figure><p>最后通过<code>Class</code>类的<code>forName</code>方法获取，这种用的最多，需要完整的类名，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">class3</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Person&quot;</span>);<br><span class="hljs-type">Class</span> <span class="hljs-variable">stringClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br></code></pre></td></tr></table></figure><p><code>Class</code>也是一个类，在JVM中，一个类只有一个<code>Class</code>实例化对象，即上面的<code>class1</code>、<code>class2</code>、<code>class3</code>都是相同的。</p><h2 id="通过反射实例化对象"><a href="#通过反射实例化对象" class="headerlink" title="通过反射实例化对象"></a>通过反射实例化对象</h2><p>上面已经得到了类的<code>Class</code>实例化对象，那么就可以通过这个对象创建类的对象，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">class3.newInstance();<br></code></pre></td></tr></table></figure><p><strong>注</strong>：<code>newInstance</code>方法内部实际上调用了<strong>无参数构造方法</strong>，必须保证无参构造存在才可以。否则会抛出<code>java.lang.InstantiationException</code>异常。</p><p>如果想要调用有参构造，可以通过<code>getConstructor</code>方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获得无参构造，由于没有参数，所以都是 null</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> class3.getConstructor(<span class="hljs-literal">null</span>).newInstance(<span class="hljs-literal">null</span>);<br><span class="hljs-comment">// Person@167cf4d</span><br>System.out.println(o);<br><span class="hljs-comment">// 获得有参构造，传入参数是Class数组，指定有参构造的参数类型，相应的，在 newInstance 实例化时需要传入参数</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o2</span> <span class="hljs-operator">=</span> class3.getConstructor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;).newInstance(<span class="hljs-string">&quot;BB&quot;</span>);<br><span class="hljs-comment">// Person@a987ac</span><br>System.out.println(o2);<br><span class="hljs-comment">// 获得有参构造，这里指定了两个参数，所以获取类中寻找有两个参数的构造器</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o3</span> <span class="hljs-operator">=</span> class3.getConstructor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, <span class="hljs-type">int</span>.class&#125;).newInstance(<span class="hljs-string">&quot;CC&quot;</span>, <span class="hljs-number">19</span>);<br><span class="hljs-comment">// Person@a3a380</span><br>System.out.println(o3);<br></code></pre></td></tr></table></figure><h2 id="获得属性"><a href="#获得属性" class="headerlink" title="获得属性"></a>获得属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获得 public 属性</span><br>Field[] fields = class3.getFields();<br>System.out.println(<span class="hljs-string">&quot;获得 public 属性&quot;</span>);<br><span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>    System.out.println(field.getName());<br>&#125;<br><span class="hljs-comment">// 获得类的所有属性</span><br>Field[] declaredFields = class3.getDeclaredFields();<br>System.out.println(<span class="hljs-string">&quot;获得所有属性&quot;</span>);<br><span class="hljs-keyword">for</span> (Field declaredField : declaredFields) &#123;<br>    System.out.println(declaredField.getName());<br>&#125;<br></code></pre></td></tr></table></figure><p>获得指定属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获得属性</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> class3.getField(<span class="hljs-string">&quot;age&quot;</span>);<br><span class="hljs-comment">// public int Person.age</span><br>System.out.println(age);<br><span class="hljs-comment">// 获得私有属性</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> class3.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">// private java.lang.String Person.name</span><br>System.out.println(name);<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">newPerson</span> <span class="hljs-operator">=</span> class3.newInstance();<br>age.set(newPerson, <span class="hljs-number">20</span>);<br><span class="hljs-comment">// 启用和禁用访问安全检查的开关，值为 true，则表示反射的对象在使用时应该取消 java 语言的访问检查；反之不取消</span><br><span class="hljs-comment">// 如果不设置这个，将无法修改 私有属性</span><br>name.setAccessible(<span class="hljs-literal">true</span>);<br>name.set(newPerson, <span class="hljs-string">&quot;YY&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;name=&quot;</span> + name.get(newPerson) + <span class="hljs-string">&quot; - age=&quot;</span> + age.get(newPerson));<br></code></pre></td></tr></table></figure><h2 id="获得方法"><a href="#获得方法" class="headerlink" title="获得方法"></a>获得方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获得类的 public 方法，会包括Object类的一些方法</span><br>Method[] methods = class3.getMethods();<br>System.out.println(<span class="hljs-string">&quot;获得 public 方法&quot;</span>);<br><span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>    System.out.println(method.getName());<br>&#125;<br><span class="hljs-comment">// 获得类的所有方法</span><br>Method[] declaredMethods = class3.getDeclaredMethods();<br>System.out.println(<span class="hljs-string">&quot;获得所有方法&quot;</span>);<br><span class="hljs-keyword">for</span> (Method declaredMethod : declaredMethods) &#123;<br>    System.out.println(declaredMethod.getName());<br>&#125;<br></code></pre></td></tr></table></figure><p>获得指定方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获得公有方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">say</span> <span class="hljs-operator">=</span> class3.getMethod(<span class="hljs-string">&quot;say&quot;</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-comment">// 调用方法</span><br>say.invoke(newPerson);<br><span class="hljs-comment">// 获得有参数的方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">say1</span> <span class="hljs-operator">=</span> class3.getMethod(<span class="hljs-string">&quot;say&quot;</span>, String.class);<br><span class="hljs-type">String</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> (String) say1.invoke(newPerson, <span class="hljs-string">&quot;Hello&quot;</span>);<br>System.out.println(hello);<br><span class="hljs-comment">// 获得私有方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">eat</span> <span class="hljs-operator">=</span> class3.getDeclaredMethod(<span class="hljs-string">&quot;eat&quot;</span>, <span class="hljs-literal">null</span>);<br>eat.setAccessible(<span class="hljs-literal">true</span>);<br>eat.invoke(newPerson);<br></code></pre></td></tr></table></figure><h2 id="获得构造器"><a href="#获得构造器" class="headerlink" title="获得构造器"></a>获得构造器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取构造方法</span><br>Constructor[] constructors = class3.getConstructors();<br><span class="hljs-keyword">for</span> (Constructor constructor : constructors) &#123;<br>    System.out.println(constructor);<br>&#125;<br><span class="hljs-comment">// s</span><br><span class="hljs-comment">// public Person()</span><br><span class="hljs-comment">// public Person(java.lang.String,int)</span><br><span class="hljs-comment">// public Person(java.lang.String)</span><br></code></pre></td></tr></table></figure><h2 id="获取类的父类及其实现的接口"><a href="#获取类的父类及其实现的接口" class="headerlink" title="获取类的父类及其实现的接口"></a>获取类的父类及其实现的接口</h2><p>直接通过反射获取子类的对象是不能得到父类的属性值的，必须根据反射获得的子类 Class 对象在调用 <code>getSuperclass</code> 方法获取父类对象，然后在通过父类对象去获取父类的属性值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">Class</span> <span class="hljs-variable">subClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br><span class="hljs-comment">// 获取父类</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> subClass.getSuperclass();<br><span class="hljs-comment">// 获取实现的接口</span><br>Class[] interfaces = subClass.getInterfaces();<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>灵活使用反射能让代码更加灵活，这里比如JDBC原生代码注册驱动，hibernate 的实体类，Spring 的 AOP等等都有反射的实现。但是凡事都有两面性，反射也会消耗系统的性能，增加复杂性等，合理使用才是真！</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>java反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[javafx] 组件位移、缩放、旋转、变形</title>
    <link href="/2022/10/05/%5Bjavafx%5D%20%E7%BB%84%E4%BB%B6%E4%BD%8D%E7%A7%BB%E3%80%81%E7%BC%A9%E6%94%BE%E3%80%81%E6%97%8B%E8%BD%AC%E3%80%81%E5%8F%98%E5%BD%A2/"/>
    <url>/2022/10/05/%5Bjavafx%5D%20%E7%BB%84%E4%BB%B6%E4%BD%8D%E7%A7%BB%E3%80%81%E7%BC%A9%E6%94%BE%E3%80%81%E6%97%8B%E8%BD%AC%E3%80%81%E5%8F%98%E5%BD%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="组件位移、缩放、旋转、变形"><a href="#组件位移、缩放、旋转、变形" class="headerlink" title="组件位移、缩放、旋转、变形"></a>组件位移、缩放、旋转、变形</h1><h2 id="组件位移"><a href="#组件位移" class="headerlink" title="组件位移"></a>组件位移</h2><p>在组件创建的时候，可以通过很多方法来设置其位置，比如在<code>AnchorPane</code>中可以设置与边框的距离，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">AnchorPane.setTopAnchor(node, value);<br>AnchorPane.setLeftAnchor(node, value);<br>AnchorPane.setBottomAnchor(node, value);<br>AnchorPane.setRightAnchor(node, value);<br></code></pre></td></tr></table></figure><p>或者也可以指定一个坐标，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">node.setLayoutX(x);<br>node.setLayoutY(y);<br></code></pre></td></tr></table></figure><p>注意设置坐标时的基准是父节点位置。</p><p>如果想要组件发生位移，即根据当前的位置移动到另一个位置，可以使用<code>Translate</code>。注意这里使用的是<strong>位移</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Translate</span> <span class="hljs-variable">translate1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Translate</span>(x, y);<br>node.setTransforms().add(translate1);<br><span class="hljs-comment">// 或者下面是等效的</span><br>node.setTranslateX(x);<br>node.setTranslateY(y);<br></code></pre></td></tr></table></figure><p>这样就可以让节点在当前位置的基础上位移<code>(x,y)</code>的距离。</p><p>如何得到当前节点的各种位置？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">Translate</span> <span class="hljs-variable">translate1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Translate</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>    <span class="hljs-type">Translate</span> <span class="hljs-variable">translate2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Translate</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button2&quot;</span>);<br>    b2.setPrefWidth(<span class="hljs-number">100</span>);<br>    b2.setPrefHeight(<span class="hljs-number">100</span>);<br>    <span class="hljs-comment">// 设置坐标</span><br>    b2.setLayoutX(<span class="hljs-number">100</span>);<br>    b2.setLayoutY(<span class="hljs-number">100</span>);<br>    <span class="hljs-comment">// 进行位移</span><br>    b2.getTransforms().addAll(translate1, translate2);<br>    <span class="hljs-comment">// b2.setTranslateX(100);</span><br>    <span class="hljs-comment">// b2.setTranslateY(100);</span><br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button1&quot;</span>);<br>    b1.setPrefWidth(<span class="hljs-number">100</span>);<br>    b1.setPrefHeight(<span class="hljs-number">100</span>);<br>    b1.setLayoutX(<span class="hljs-number">100</span>);<br>    b1.setLayoutY(<span class="hljs-number">100</span>);<br><br>    <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>    anchorPane.setLayoutX(<span class="hljs-number">100</span>);<br>    anchorPane.setLayoutY(<span class="hljs-number">100</span>);<br>    anchorPane.setPrefWidth(<span class="hljs-number">400</span>);<br>    anchorPane.setPrefHeight(<span class="hljs-number">400</span>);<br>    anchorPane.setStyle(<span class="hljs-string">&quot;-fx-background-color: #198f91;&quot;</span>);<br><br>    anchorPane.getChildren().addAll(b1, b2);<br><br>    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>    primaryStage.setScene(scene);<br>    primaryStage.setHeight(<span class="hljs-number">800</span>);<br>    primaryStage.setWidth(<span class="hljs-number">800</span>);<br>    primaryStage.show();<br>    <span class="hljs-comment">// 100.0 - 100.0  创建节点值设置的坐标</span><br>    System.out.println(b2.getLayoutX() + <span class="hljs-string">&quot; - &quot;</span> + b2.getLayoutY());<br>    <span class="hljs-comment">// 300.0 - 300.0  相较于父节点且位移后的坐标</span><br>    System.out.println(b2.getLocalToParentTransform().getTx() + <span class="hljs-string">&quot; - &quot;</span> + b2.getLocalToParentTransform().getTy());<br>    <span class="hljs-comment">// 400.0 - 400.0  相较于Scene的坐标</span><br>    System.out.println(b2.getLocalToSceneTransform().getTx() + <span class="hljs-string">&quot; - &quot;</span> + b2.getLocalToSceneTransform().getTy());<br><br>    <span class="hljs-type">Bounds</span> <span class="hljs-variable">bd2</span> <span class="hljs-operator">=</span> b2.getLayoutBounds();<br>    <span class="hljs-type">Bounds</span> <span class="hljs-variable">bd3</span> <span class="hljs-operator">=</span> b2.localToParent(bd2);<br>    <span class="hljs-comment">// 300.0 - 300.0  组件左上角相较于父节点左上角的坐标</span><br>    System.out.println(bd3.getMinX() + <span class="hljs-string">&quot; - &quot;</span> + bd3.getMinY());<br>    <span class="hljs-comment">// 400.0 - 400.0  组件右下角相较于父节点左上角的坐标</span><br>    System.out.println(bd3.getMaxX() + <span class="hljs-string">&quot; - &quot;</span> + bd3.getMaxY());<br><br>    <span class="hljs-type">Bounds</span> <span class="hljs-variable">bd4</span> <span class="hljs-operator">=</span> b2.localToScreen(bd2);<br>    <span class="hljs-comment">// 860.6666771185998 - 503.3333363942886  组件左上角相较于屏幕左上角的坐标</span><br>    System.out.println(bd4.getMinX() + <span class="hljs-string">&quot; - &quot;</span> + bd4.getMinY());<br>    <span class="hljs-comment">// 960.6666811714076 - 603.3333400751881  组件右下角相较于屏幕左上角的坐标</span><br>    System.out.println(bd4.getMaxX() + <span class="hljs-string">&quot; - &quot;</span> + bd4.getMaxY());<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221005174356521.png" alt="image-20221005174356521"></p><h2 id="组件缩放"><a href="#组件缩放" class="headerlink" title="组件缩放"></a>组件缩放</h2><p>组件缩放使用<code>Scale</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button1&quot;</span>);<br>    b1.setPrefHeight(<span class="hljs-number">200</span>);<br>    b1.setPrefWidth(<span class="hljs-number">200</span>);<br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button2&quot;</span>);<br>    b2.setStyle(<span class="hljs-string">&quot;-fx-background-color: #0cda0c;&quot;</span>);<br>    b2.setPrefHeight(<span class="hljs-number">200</span>);<br>    b2.setPrefWidth(<span class="hljs-number">200</span>);<br>    <span class="hljs-comment">// 四个参数分别为：x轴缩放比例 y轴缩放比例 x轴缩放原点 y轴缩放原点</span><br>    <span class="hljs-type">Scale</span> <span class="hljs-variable">scale</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scale</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>    b2.getTransforms().add(scale);<br>    <span class="hljs-comment">// 这种方法只能以中心点为原点</span><br>      b2.setScaleX(<span class="hljs-number">0.5</span>);<br>      b2.setScaleY(<span class="hljs-number">0.5</span>);<br><br>    <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>    root.getChildren().addAll(b1, b2);<br><br>    AnchorPane.setTopAnchor(b1, <span class="hljs-number">100.0</span>);<br>    AnchorPane.setLeftAnchor(b1, <span class="hljs-number">100.0</span>);<br><br>    AnchorPane.setTopAnchor(b2, <span class="hljs-number">100.0</span>);<br>    AnchorPane.setLeftAnchor(b2, <span class="hljs-number">100.0</span>);<br><br>    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(root);<br>    primaryStage.setScene(scene);<br>    primaryStage.setHeight(<span class="hljs-number">800</span>);<br>    primaryStage.setWidth(<span class="hljs-number">800</span>);<br>    primaryStage.show();<br><br>    <span class="hljs-comment">// 200.0 - 200.0  获得预设大小</span><br>    System.out.println(b2.getPrefHeight() + <span class="hljs-string">&quot; - &quot;</span> + b2.getPrefWidth());<br>    <span class="hljs-comment">//</span><br>    <span class="hljs-type">Bounds</span> <span class="hljs-variable">bd2</span> <span class="hljs-operator">=</span> b2.getLayoutBounds();<br>    <span class="hljs-type">Bounds</span> <span class="hljs-variable">bd3</span> <span class="hljs-operator">=</span> b2.localToParent(bd2);<br>    <span class="hljs-comment">// 100.0 - 100.0  缩放后的大小</span><br>    System.out.println(bd3.getWidth() + <span class="hljs-string">&quot; - &quot;</span> + bd3.getHeight());<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221005180956969.png" alt="image-20221005180956969"></p><h2 id="组件旋转"><a href="#组件旋转" class="headerlink" title="组件旋转"></a>组件旋转</h2><p>组件旋转使用<code>Rotate</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button1&quot;</span>);<br>    b1.setPrefHeight(<span class="hljs-number">200</span>);<br>    b1.setPrefWidth(<span class="hljs-number">200</span>);<br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button2&quot;</span>);<br>    b2.setStyle(<span class="hljs-string">&quot;-fx-background-color: #0cda0c;&quot;</span>);<br>    b2.setPrefHeight(<span class="hljs-number">200</span>);<br>    b2.setPrefWidth(<span class="hljs-number">200</span>);<br>    <span class="hljs-comment">// 参数分别是：旋转角度  原点X坐标  原点Y坐标</span><br>    <span class="hljs-type">Rotate</span> <span class="hljs-variable">rotate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rotate</span>(<span class="hljs-number">45</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>    b2.getTransforms().add(rotate);<br><br>    <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>    root.getChildren().addAll(b1, b2);<br><br>    AnchorPane.setTopAnchor(b1, <span class="hljs-number">100.0</span>);<br>    AnchorPane.setLeftAnchor(b1, <span class="hljs-number">100.0</span>);<br><br>    AnchorPane.setTopAnchor(b2, <span class="hljs-number">100.0</span>);<br>    AnchorPane.setLeftAnchor(b2, <span class="hljs-number">100.0</span>);<br><br>    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(root);<br>    primaryStage.setScene(scene);<br>    primaryStage.setHeight(<span class="hljs-number">800</span>);<br>    primaryStage.setWidth(<span class="hljs-number">800</span>);<br>    primaryStage.show();<br>    <span class="hljs-comment">// 200.0 - 58.57864376269049  旋转后的左上角坐标</span><br>    System.out.println(b2.getLocalToParentTransform().getTx() + <span class="hljs-string">&quot; - &quot;</span> + b2.getLocalToParentTransform().getTy());<br><br>    <span class="hljs-type">Bounds</span> <span class="hljs-variable">bd2</span> <span class="hljs-operator">=</span> b2.getLayoutBounds();<br>    <span class="hljs-type">Bounds</span> <span class="hljs-variable">bd3</span> <span class="hljs-operator">=</span> b2.localToParent(bd2);<br>    <span class="hljs-comment">// 58.578643798828125 - 58.578643798828125  这是转换后形成的外边框（虽然看不到）的坐标</span><br>    System.out.println(bd3.getMinX() + <span class="hljs-string">&quot; - &quot;</span> + bd3.getMinY());<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221005182347573.png" alt="image-20221005182347573"></p><h2 id="组件变形"><a href="#组件变形" class="headerlink" title="组件变形"></a>组件变形</h2><p><code>Shear</code>类表示按指定乘数剪切坐标的仿射对象。</p><p><del>感觉没什么用 :sob:</del></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button1&quot;</span>);<br>    b1.setPrefHeight(<span class="hljs-number">100</span>);<br>    b1.setPrefWidth(<span class="hljs-number">200</span>);<br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button2&quot;</span>);<br>    b2.setStyle(<span class="hljs-string">&quot;-fx-background-color: #0cda0c;&quot;</span>);<br>    b2.setOpacity(<span class="hljs-number">0.5</span>);<br>    b2.setPrefHeight(<span class="hljs-number">100</span>);<br>    b2.setPrefWidth(<span class="hljs-number">200</span>);<br><br>    <span class="hljs-type">Shear</span> <span class="hljs-variable">shear</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shear</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    b2.getTransforms().add(shear);<br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;Button3&quot;</span>);<br>    b3.setPrefWidth(<span class="hljs-number">200</span>);<br>    b3.setPrefHeight(<span class="hljs-number">100</span>);<br><br>    <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>    root.getChildren().addAll(b1, b2, b3);<br><br>    AnchorPane.setTopAnchor(b1, <span class="hljs-number">100.0</span>);<br>    AnchorPane.setLeftAnchor(b1, <span class="hljs-number">100.0</span>);<br><br>    AnchorPane.setTopAnchor(b2, <span class="hljs-number">100.0</span>);<br>    AnchorPane.setLeftAnchor(b2, <span class="hljs-number">100.0</span>);<br><br>    AnchorPane.setTopAnchor(b3, <span class="hljs-number">300.0</span>);<br>    AnchorPane.setLeftAnchor(b3, <span class="hljs-number">300.0</span>);<br><br>    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(root);<br>    primaryStage.setScene(scene);<br>    primaryStage.setHeight(<span class="hljs-number">800</span>);<br>    primaryStage.setWidth(<span class="hljs-number">800</span>);<br>    primaryStage.show();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221005201644656.png" alt="image-20221005201644656"></p>]]></content>
    
    
    <categories>
      
      <category>javafx</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>javafx</tag>
      
      <tag>gui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[javafx] 复制组件及通过反射创建组件</title>
    <link href="/2022/10/04/%5Bjavafx%5D%20%E5%A4%8D%E5%88%B6%E7%BB%84%E4%BB%B6%E5%8F%8A%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6/"/>
    <url>/2022/10/04/%5Bjavafx%5D%20%E5%A4%8D%E5%88%B6%E7%BB%84%E4%BB%B6%E5%8F%8A%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="复制组件及通过反射创建组件"><a href="#复制组件及通过反射创建组件" class="headerlink" title="复制组件及通过反射创建组件"></a>复制组件及通过反射创建组件</h1><h2 id="通过clone方法复制组件"><a href="#通过clone方法复制组件" class="headerlink" title="通过clone方法复制组件"></a>通过<code>clone</code>方法复制组件</h2><p>java中有<code>clone</code>方法，可以进行<strong>浅拷贝</strong>。</p><p>定义一个<code>MyButton</code>类，继承<code>Button</code>并实现<code>Cloneable</code>接口，构造方法与<code>Button</code>一样，可以查看源码，然后重写<code>clone</code>方法，返回类型修改为<code>Node</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyButton</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyButton</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyButton</span><span class="hljs-params">(String text)</span>&#123;<br>        <span class="hljs-built_in">super</span>(text);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyButton</span><span class="hljs-params">(String text, Node node)</span>&#123;<br>        <span class="hljs-built_in">super</span>(text, node);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Node <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> (Node) <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后实例化<code>MyButton</code>按钮，设置属性，并绑定点击事件，并进行<code>clone</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">MyButton</span> <span class="hljs-variable">myButton</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyButton</span>(<span class="hljs-string">&quot;按钮1&quot;</span>);<br>    myButton.setPrefHeight(<span class="hljs-number">200</span>);<br>    myButton.setPrefWidth(<span class="hljs-number">200</span>);<br>    myButton.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;button&quot;</span>);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-type">MyButton</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> (MyButton) myButton.clone();<br><br>    System.out.println(<span class="hljs-string">&quot;mybutton  &quot;</span> + myButton);<br>    System.out.println(<span class="hljs-string">&quot;node      &quot;</span> + node);<br><br>    <span class="hljs-type">HBox</span> <span class="hljs-variable">hBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HBox</span>(<span class="hljs-number">20</span>);<br>    hBox.getChildren().addAll(myButton, node);<br><br>    <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>    anchorPane.getChildren().add(hBox);<br><br>    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>    primaryStage.setScene(scene);<br>    primaryStage.setHeight(<span class="hljs-number">500</span>);<br>    primaryStage.setWidth(<span class="hljs-number">500</span>);<br>    primaryStage.show();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行后发现<code>node</code>与<code>myButton</code>是完全相同的按钮，包括属性以及点击事件，即使两者是两个不同的实例。上面的打印结果为：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">mybutton  MyButton@dc558b[styleClass=<span class="hljs-keyword">button</span>]<span class="hljs-string">&#x27;按钮1&#x27;</span><br>node      MyButton@6be1b7[styleClass=<span class="hljs-keyword">button</span>]<span class="hljs-string">&#x27;按钮1&#x27;</span><br></code></pre></td></tr></table></figure><p>现在设置<code>node</code>的名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">node.setText(<span class="hljs-string">&quot;按钮2&quot;</span>);<br></code></pre></td></tr></table></figure><p>运行后发现<code>myButton</code>的名称也改变了。</p><p>所以通过这种方法复制组件是很危险的，很可能造成牵一发而动全身的后果。慎用。</p><hr><hr><p>另外举一个例子，想要通过点击复制一个布局，实现这样的一个类，继承了<code>HBox</code>，其中包括了两个组件，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPane</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HBox</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">TextArea</span> <span class="hljs-variable">textArea</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextArea</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Button</span> <span class="hljs-variable">button</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;按钮&quot;</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyPane</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>(textArea, button);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> MyPane <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> (MyPane) <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在主函数中这样写，主要是通过点击来复制节点，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">MyPane</span> <span class="hljs-variable">myPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPane</span>();<br>    System.out.println(myPane);<br>    System.out.println(myPane.getChildren().get(<span class="hljs-number">0</span>));<br>    System.out.println(myPane.getChildren().get(<span class="hljs-number">1</span>));<br>    <span class="hljs-type">VBox</span> <span class="hljs-variable">vBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VBox</span>();<br>    vBox.getChildren().add(myPane);<br>    System.out.println(vBox.getChildren().size());<br><br>    <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>    anchorPane.getChildren().add(vBox);<br><br>    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>    primaryStage.setScene(scene);<br>    primaryStage.setHeight(<span class="hljs-number">500</span>);<br>    primaryStage.setWidth(<span class="hljs-number">500</span>);<br>    primaryStage.show();<br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">button</span> <span class="hljs-operator">=</span> (Button) myPane.getChildren().get(<span class="hljs-number">1</span>);<br>    button.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">MyPane</span> <span class="hljs-variable">clone</span> <span class="hljs-operator">=</span> myPane.clone();<br>                System.out.println(clone);<br>                vBox.getChildren().add(clone);<br>                System.out.println(myPane.getChildren().get(<span class="hljs-number">0</span>));<br>                System.out.println(myPane.getChildren().get(<span class="hljs-number">1</span>));<br>                System.out.println(vBox.getChildren().size());<br>            &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后实现效果为：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004231804489.png" alt="image-20221004231804489"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004231813362.png" alt="image-20221004231813362"></p><p>打印结果为：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mel">MyPane@1e38b09<br>TextArea@d95460[styleClass=<span class="hljs-keyword">text</span>-input <span class="hljs-keyword">text</span>-area]<br>Button@b07401[styleClass=<span class="hljs-keyword">button</span>]<span class="hljs-string">&#x27;按钮&#x27;</span><br><span class="hljs-number">1</span><br>MyPane@d5192<br>TextArea@d95460[styleClass=<span class="hljs-keyword">text</span>-input <span class="hljs-keyword">text</span>-area]<br>Button@b07401[styleClass=<span class="hljs-keyword">button</span>]<span class="hljs-string">&#x27;按钮&#x27;</span><br><span class="hljs-number">2</span><br>MyPane@74617d<br>TextArea@d95460[styleClass=<span class="hljs-keyword">text</span>-input <span class="hljs-keyword">text</span>-area]<br>Button@b07401[styleClass=<span class="hljs-keyword">button</span>]<span class="hljs-string">&#x27;按钮&#x27;</span><br><span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><p>可以看到确实增<code>MyPane</code>布局，但是<code>TextArea</code>和<code>Button</code>并没有复制，每次都被“拿到“了下一个布局中。</p><h2 id="通过java反射创建节点组件"><a href="#通过java反射创建节点组件" class="headerlink" title="通过java反射创建节点组件"></a>通过<code>java</code>反射创建节点组件</h2><p>通过反射得到类名，然后利用类名创建对象，并进行实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;按钮&quot;</span>);<br>    <span class="hljs-comment">// 得到节点类完整名称，javafx.scene.control.Button</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> node.getClass().getName();<br>    System.out.println(name);<br>    <span class="hljs-comment">// 根据类名创建对象</span><br>    Class&lt;?&gt; classtype = Class.forName(name);<br>    <span class="hljs-comment">// 通过构造方法实例化</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> (Node) classtype.getConstructor(<span class="hljs-literal">null</span>).newInstance(<span class="hljs-literal">null</span>);<br>    <br>    <span class="hljs-type">HBox</span> <span class="hljs-variable">hBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HBox</span>(<span class="hljs-number">20</span>);<br>    hBox.getChildren().addAll(node, node2);<br><br>    <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>    anchorPane.getChildren().add(hBox);<br><br>    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>    primaryStage.setScene(scene);<br>    primaryStage.setHeight(<span class="hljs-number">500</span>);<br>    primaryStage.setWidth(<span class="hljs-number">500</span>);<br>    primaryStage.show();<br>&#125;<br></code></pre></td></tr></table></figure><p>这样会创建和<code>node</code>完全相同的对象。<code>node2</code>是根据<code>node</code>的类名创建的。</p><p>如果想要修改组件，比如将<code>Button</code>修改为<code>Label</code>，只需要修改<code>node</code>的组件就行了。</p><p>这里并没有指定参数，即<code>Button</code>的名称，如果想要指定参数，可以通过构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Node</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> (Node) classtype.getConstructor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;).newInstance(<span class="hljs-string">&quot;按钮2&quot;</span>);<br></code></pre></td></tr></table></figure><p>这句话的意思是找到一个构造方法，这个构造方法需要一个<code>String</code>类型的参数，然后在实例化时设置参数为<code>按钮2</code>。</p><p>或者可以通过方法来修改，<code>Button</code>设置名称的方法是<code>setText</code>，既然已经得到对象并实例化了，那么就可以找到这个方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 找到一个方法setText，参数为String类型</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> classtype.getMethod(<span class="hljs-string">&quot;setText&quot;</span>, String.class);<br><span class="hljs-comment">// 调用node2的setText方法，并设置参数为 按钮2</span><br>method.invoke(node2, <span class="hljs-string">&quot;按钮2&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javafx</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>javafx</tag>
      
      <tag>gui</tag>
      
      <tag>java反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[javafx] 利用Builder和BuilderFactory接口读取自定义FXML标签</title>
    <link href="/2022/10/04/%5Bjavafx%5D%20%E5%88%A9%E7%94%A8Builder%E5%92%8CBuilderFactory%E6%8E%A5%E5%8F%A3%E8%AF%BB%E5%8F%96%E8%87%AA%E5%AE%9A%E4%B9%89FXML%E6%A0%87%E7%AD%BE/"/>
    <url>/2022/10/04/%5Bjavafx%5D%20%E5%88%A9%E7%94%A8Builder%E5%92%8CBuilderFactory%E6%8E%A5%E5%8F%A3%E8%AF%BB%E5%8F%96%E8%87%AA%E5%AE%9A%E4%B9%89FXML%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="利用Builder和BuilderFactory接口读取自定义FXML标签"><a href="#利用Builder和BuilderFactory接口读取自定义FXML标签" class="headerlink" title="利用Builder和BuilderFactory接口读取自定义FXML标签"></a>利用Builder和BuilderFactory接口读取自定义FXML标签</h1><p>FXML是可以自定义标签的。</p><h2 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h2><p>定义了这样的一个类<code>Person</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample.datatype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;实例化Person&quot;</span>);    <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后FXML文件<code>customTag.fxml</code>这样写，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-meta">&lt;?import sample.datatype.Person?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Person</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">Person</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后在<code>customMain</code>加载FXML文件，并设置和输出属性，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.fxml.FXMLLoader;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><span class="hljs-keyword">import</span> sample.datatype.Person;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">customMain</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> FXMLLoader.load(getClass().getResource(<span class="hljs-string">&quot;Gui/customTag.fxml&quot;</span>));<br><br>        person.setName(<span class="hljs-string">&quot;YY&quot;</span>);<br>        System.out.println(person.getName());<br><br>        primaryStage.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就会首先会实例化<code>Person</code>，然后打印<code>实例化Person</code>，以及设置的<code>name</code>，即<code>YY</code>。</p><hr><hr><p>如果使用的是<code>HashMap</code>，可以这样写FXML：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-meta">&lt;?import java.util.HashMap?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">HashMap</span> <span class="hljs-attr">a</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">b</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">HashMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>加载时这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">FXMLLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FXMLLoader</span>();<br>        loader.setLocation(getClass().getResource(<span class="hljs-string">&quot;Gui/customTag.fxml&quot;</span>));<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> loader.load();<br>        System.out.println(map);<br>        primaryStage.show();<br>    &#125;<br></code></pre></td></tr></table></figure><p>不过这里如何设置<code>ArrayList</code>倒不会了:confused:</p><h2 id="有参构造"><a href="#有参构造" class="headerlink" title="有参构造"></a>有参构造</h2><p>上面实现的是无参构造，但是如果是一个有参构造，那么就会出错。这就需要用到<code>Builder</code>和<code>BuilderFactory</code>了。</p><p>假设<code>Person</code>定义为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample.datatype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个类<code>PersonBuilder</code>实现<code>Builder</code>接口，除了需要重写的<code>build</code>方法，其他都是和<code>Person</code>相同的，<code>build</code>返回的是<code>Person</code>，由于<code>Person</code>是有参构造，所以要设置参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample.datatype;<br><br><span class="hljs-keyword">import</span> javafx.util.Builder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Builder</span>&lt;Person&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(name, age);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后定义类<code>PersonBuilderFactory</code>实现<code>BuilderFactory</code>接口，需要重写<code>getBuilder</code>方法，这里需要判断<code>type</code>的类型，如果是<code>Person</code>就返回<code>PersonBuilder</code>，如果不是的话，就返回默认的<code>Builder</code>，默认的<code>BuilderFactory</code>是<code>JavaFXBuilderFactory</code>，<code>JavaFXBuilderFactory</code>有一个方法<code>getBuilder</code>，会根据参数<code>type</code>返回对应实例的<code>Builder</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample.datatype;<br><br><span class="hljs-keyword">import</span> javafx.fxml.JavaFXBuilderFactory;<br><span class="hljs-keyword">import</span> javafx.util.Builder;<br><span class="hljs-keyword">import</span> javafx.util.BuilderFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonBuilderFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BuilderFactory</span> &#123;<br><br>    <span class="hljs-comment">// 默认的BuilderFactory</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">JavaFXBuilderFactory</span> <span class="hljs-variable">jff</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaFXBuilderFactory</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Builder&lt;?&gt; getBuilder(Class&lt;?&gt; type) &#123;<br><br>        <span class="hljs-keyword">if</span> (type == Person.class)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonBuilder</span>();<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> jff.getBuilder(type);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接着在FXML文件中就可以设置参数了，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-meta">&lt;?import sample.datatype.Person?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;YY&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&quot;18&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">Person</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>最后在<code>customMain</code>加载FXML文件，这里需要设置<code>BuilderFactory</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.fxml.FXMLLoader;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><span class="hljs-keyword">import</span> sample.datatype.Person;<br><span class="hljs-keyword">import</span> sample.datatype.PersonBuilderFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">customMain</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">FXMLLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FXMLLoader</span>();<br>        loader.setLocation(getClass().getResource(<span class="hljs-string">&quot;Gui/customTag.fxml&quot;</span>));<br>        loader.setBuilderFactory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonBuilderFactory</span>());<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> loader.load();<br>        System.out.println(person.getName() + <span class="hljs-string">&quot; - &quot;</span> + person.getAge());<br><br>        primaryStage.show();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样就会输出FXML中设置的值了。</p><p>这里的流程是这样的：加载FXML文件时，发现了<code>Person</code>，然后在<code>BuilderFactory</code>中寻找<code>Builder</code>，由于指定了<code>Builder</code>，所以会去指定的<code>Builder</code>中构造，最后返回构造后的类。</p><h2 id="有参构造–Map方法"><a href="#有参构造–Map方法" class="headerlink" title="有参构造–Map方法"></a>有参构造–Map方法</h2><p>还有另一种方法实现有参构造。<code>Person</code>类不变。FXML文件不变。</p><p>设置<code>PersonBuilderMap</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample.datatype;<br><br><span class="hljs-keyword">import</span> javafx.util.Builder;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonBuilderMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Builder</span>&lt;Person&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">put</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;name&quot;</span>.equals(key))&#123;<br>            <span class="hljs-built_in">this</span>.name = String.valueOf(value);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;age&quot;</span>.equals(key))&#123;<br>            <span class="hljs-built_in">this</span>.age = Integer.parseInt(String.valueOf(value));<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(name, age);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>设置<code>PersonBuilderFactoryMap</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample.datatype;<br><br><span class="hljs-keyword">import</span> javafx.fxml.JavaFXBuilderFactory;<br><span class="hljs-keyword">import</span> javafx.util.Builder;<br><span class="hljs-keyword">import</span> javafx.util.BuilderFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonBuilderFactoryMap</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BuilderFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">JavaFXBuilderFactory</span> <span class="hljs-variable">jff</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaFXBuilderFactory</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Builder&lt;?&gt; getBuilder(Class&lt;?&gt; type) &#123;<br>        <span class="hljs-keyword">if</span> (type == Person.class)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonBuilderMap</span>();<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> jff.getBuilder(type);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>customMain</code>中使用上面的<code>BuilderFactory</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sample;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.fxml.FXMLLoader;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><span class="hljs-keyword">import</span> sample.datatype.Person;<br><span class="hljs-keyword">import</span> sample.datatype.PersonBuilderFactoryMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">customMain</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">FXMLLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FXMLLoader</span>();<br>        loader.setLocation(getClass().getResource(<span class="hljs-string">&quot;Gui/customTag.fxml&quot;</span>));<br>        loader.setBuilderFactory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonBuilderFactoryMap</span>());<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> loader.load();<br>        System.out.println(person.getName() + <span class="hljs-string">&quot; - &quot;</span> + person.getAge());<br><br>        primaryStage.show();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>实现结果一样的。</p>]]></content>
    
    
    <categories>
      
      <category>javafx</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>javafx</tag>
      
      <tag>gui</tag>
      
      <tag>fxml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[javafx] JavaFx多线程任务</title>
    <link href="/2022/10/04/%5Bjavafx%5D%20JavaFx%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BB%BB%E5%8A%A1/"/>
    <url>/2022/10/04/%5Bjavafx%5D%20JavaFx%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaFx多线程任务"><a href="#JavaFx多线程任务" class="headerlink" title="JavaFx多线程任务"></a>JavaFx多线程任务</h1><p><code>javafx</code>运行时界面运行在主线程<code>javafx application</code>中，用于更新UI，但是如果执行了耗时的任务，比如网络请求，文件读写等操作，会导致线程阻塞，出现<strong>界面无响应</strong>的问题。</p><p><code>javafx</code>提供了接口<code>Worker</code>，包括了三个类</p><ul><li><code>ScheduledService</code></li><li><code>Service</code></li><li><code>Task</code></li></ul><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>假设需要一个应用：通过点击<code>开始</code>按钮执行任务，并有进度条来显示任务进度，并显示任务的相关信息，可以使用<code>取消</code>按钮来取消任务；</p><p>首先写一个简单的布局</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fxTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Button</span> <span class="hljs-variable">startBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;开始&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">cancelBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;取消&quot;</span>);<br><br>        <span class="hljs-type">ProgressBar</span> <span class="hljs-variable">progressBar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProgressBar</span>(<span class="hljs-number">0</span>);<br>        progressBar.setPrefWidth(<span class="hljs-number">200</span>);<br><br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;state&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;value&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;title&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;message&quot;</span>);<br><br>        <span class="hljs-type">HBox</span> <span class="hljs-variable">hBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HBox</span>();<br>        hBox.setAlignment(Pos.CENTER);<br>        hBox.setSpacing(<span class="hljs-number">10.0</span>);<br><br>        hBox.getChildren().addAll(startBt, cancelBt, progressBar, l1, l2, l3, l4);<br><br>        <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>        anchorPane.setStyle(<span class="hljs-string">&quot;-fx-background-color: #7bb9b0;&quot;</span>);<br>        anchorPane.getChildren().add(hBox);<br><br>        AnchorPane.setLeftAnchor(hBox, <span class="hljs-number">100.0</span>);<br>        AnchorPane.setTopAnchor(hBox, <span class="hljs-number">100.0</span>);<br><br>        <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>        primaryStage.setScene(scene);<br>        primaryStage.setTitle(<span class="hljs-string">&quot;javaFX&quot;</span>);<br>        primaryStage.setWidth(<span class="hljs-number">700</span>);<br>        primaryStage.setHeight(<span class="hljs-number">500</span>);<br>        primaryStage.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004143629437.png" alt="image-20221004143629437"></p><p>定义一个任务类，继承<code>Task</code>，需要指定泛型来设置返回类型，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Task</span>&lt;Number&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateProgress</span><span class="hljs-params">(<span class="hljs-type">long</span> workDone, <span class="hljs-type">long</span> max)</span> &#123;<br>        <span class="hljs-built_in">super</span>.updateProgress(workDone, max);<br>        <span class="hljs-comment">// 这里设置任务进度</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateProgress</span><span class="hljs-params">(<span class="hljs-type">double</span> workDone, <span class="hljs-type">double</span> max)</span> &#123;<br>        <span class="hljs-built_in">super</span>.updateProgress(workDone, max);<br>        <span class="hljs-comment">// 这里设置任务进度</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>.updateMessage(message);<br>        <span class="hljs-comment">// 这里设置任务中的信息</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateTitle</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-built_in">super</span>.updateTitle(title);<br>        <span class="hljs-comment">// 这里更新任务名</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateValue</span><span class="hljs-params">(Number value)</span> &#123;<br>        <span class="hljs-built_in">super</span>.updateValue(value);<br>        <span class="hljs-comment">// 在这里返回结果</span><br>        <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Number <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 这里是任务主体</span><br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在主程序中设置任务，绑定按钮点击事件，这样点击<code>开始</code>按钮后任务就开始了，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MyTask</span> <span class="hljs-variable">myTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>();<br><br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myTask);<br><br>startBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        thread.start();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>需要注意的是这里执行的时候是新开的一个线程，与UI相关的都是<code>FXApplication</code>线程完成的，即主线程；所以点击按钮后，一个新的线程执行任务，返回结果会到主线程中；在任务中和返回结果出打印线程，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateValue</span><span class="hljs-params">(Number value)</span> &#123;<br>    <span class="hljs-built_in">super</span>.updateValue(value);<br>    <span class="hljs-comment">// 在这里返回结果</span><br>    <span class="hljs-comment">// 这里执行是在fx线程，返回true</span><br>    System.out.println(Platform.isFxApplicationThread());<br>    System.out.println(value);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Number <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 这里是任务主体</span><br>    <span class="hljs-comment">// 判断是否是fx线程，这里返回的是false</span><br>    System.out.println(Platform.isFxApplicationThread());<br>&#125;<br></code></pre></td></tr></table></figure><p>设置这样的一个任务，模拟进度条，每次随机增长，直到达到设定值，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Number <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 这里是任务主体</span><br><br>    <span class="hljs-comment">// 设置任务名称</span><br>    <span class="hljs-built_in">this</span>.updateTitle(<span class="hljs-string">&quot;任务名称&quot;</span>);<br><br>    <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    <span class="hljs-type">double</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">progress</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (cur &lt; sum)&#123;<br>        cur = cur + rand.nextInt(<span class="hljs-number">100</span>);<br>        <span class="hljs-keyword">if</span> (cur &gt; sum)&#123;<br>            cur = sum;<br>        &#125;<br>        progress = cur / sum;<br><br>        <span class="hljs-comment">// 更新进度</span><br>        <span class="hljs-built_in">this</span>.updateProgress(cur, sum);<br><span class="hljs-comment">// 更新任务信息</span><br>        <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">0.5</span>)&#123;<br>            <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;请耐性等待&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">0.8</span>)&#123;<br>            <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;马上就好&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;即将完成&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &gt;= <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;完成了!&quot;</span>);<br>        &#125;<br><br>        Thread.sleep(<span class="hljs-number">200</span>);<br><br>    &#125;<br><span class="hljs-comment">// 这里返回了任务进度</span><br>    <span class="hljs-keyword">return</span> progress;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>对于任务设置监听事件，监听任务中的状态变化或者信息输出等；需要注意在任务类中重写方法与设置监听事件两者是相同的，但更推荐设置监听事件；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 任务进度监听，在任务中调用的 this.updateProgress(cur, sum) 会在这里处理</span><br><span class="hljs-comment">// this.updateProgress(cur, sum) 有两个参数：当前数和总数</span><br><span class="hljs-comment">// 而监听事件的值是两者的比值，表示进度</span><br>myTask.progressProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>        progressBar.setProgress(newValue.doubleValue());<br><br>    &#125;<br><br>&#125;);<br><br><br><span class="hljs-comment">// 当任务名称改变时会触发事件</span><br><span class="hljs-comment">// 在任务中调用了 this.updateTitle(&quot;任务名称&quot;) 会触发该事件</span><br>myTask.titleProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends String&gt; observable, String oldValue, String newValue)</span> &#123;<br>        l3.setText(newValue);<br>    &#125;<br>&#125;);<br><br><br><span class="hljs-comment">// 任务结束后得到返回值</span><br><span class="hljs-comment">// 由于任务中返回的是进度，所以这里判断进度为1时输出&quot;完成&quot;</span><br>myTask.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>        <span class="hljs-keyword">if</span> (newValue.doubleValue() == <span class="hljs-number">1</span>)&#123;<br>            l2.setText(<span class="hljs-string">&quot;完成&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;);<br><br><br><span class="hljs-comment">// 设置任务执行中的信息会触发该事件</span><br><span class="hljs-comment">// 在任务中调用了 this.updateMessage(&quot;请耐性等待&quot;) 触发该事件</span><br>myTask.messageProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends String&gt; observable, String oldValue, String newValue)</span> &#123;<br>        l4.setText(newValue);<br>    &#125;<br>&#125;);<br><br><br><span class="hljs-comment">// 任务状态监听事件</span><br><span class="hljs-comment">// 当状态改变时会触发该事件，任务状态包括</span><br><span class="hljs-comment">// * READY</span><br><span class="hljs-comment">// * SCHEDULED</span><br><span class="hljs-comment">// * RUNNING</span><br><span class="hljs-comment">// * SUCCEEDED</span><br><span class="hljs-comment">// * CANCELLED</span><br><span class="hljs-comment">// * FAILED</span><br>myTask.stateProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Worker.State&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Worker.State&gt; observable, Worker.State oldValue, Worker.State newValue)</span> &#123;<br>        System.out.println(newValue.toString());<br>        l1.setText(newValue.toString());<br>    &#125;<br>&#125;);<br><br><br><span class="hljs-comment">// 任务异常监听事件</span><br><span class="hljs-comment">// 当任务未能正常完成时会触发该事件，取消事件也会调用该事件</span><br>myTask.exceptionProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Throwable&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Throwable&gt; observable, Throwable oldValue, Throwable newValue)</span> &#123;<br>        <span class="hljs-comment">// 异常监听</span><br>        System.out.println(<span class="hljs-string">&quot;异常事件监听 &quot;</span> + newValue.getMessage());<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>另外需要设置任务的取消，添加按钮绑定事件，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">cancelBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        <span class="hljs-comment">// 取消任务</span><br>        myTask.cancel();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>为了保证任务能够正常的取消，在任务中需要另外进行任务取消的判断，在任务循环中添加判断，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (isCancelled())&#123;<br>    <span class="hljs-comment">// 任务取消需要在这里另外判断一下</span><br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行任务可以得到结果，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004143828479.png" alt="image-20221004143828479"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004143838231.png" alt="image-20221004143838231"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004143843681.png" alt="image-20221004143843681"></p><p><strong>特别注意</strong>：<code>Task</code>设置的任务只能执行一次，如果再次点击<code>开始</code>会出错；如果执行任务时界面关闭了，那么任务仍然会执行；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javafxTask;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.beans.value.ChangeListener;<br><span class="hljs-keyword">import</span> javafx.beans.value.ObservableValue;<br><span class="hljs-keyword">import</span> javafx.concurrent.Task;<br><span class="hljs-keyword">import</span> javafx.concurrent.Worker;<br><span class="hljs-keyword">import</span> javafx.event.ActionEvent;<br><span class="hljs-keyword">import</span> javafx.event.EventHandler;<br><span class="hljs-keyword">import</span> javafx.geometry.Pos;<br><span class="hljs-keyword">import</span> javafx.scene.Scene;<br><span class="hljs-keyword">import</span> javafx.scene.control.Button;<br><span class="hljs-keyword">import</span> javafx.scene.control.Label;<br><span class="hljs-keyword">import</span> javafx.scene.control.ProgressBar;<br><span class="hljs-keyword">import</span> javafx.scene.layout.AnchorPane;<br><span class="hljs-keyword">import</span> javafx.scene.layout.HBox;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fxTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Button</span> <span class="hljs-variable">startBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;开始&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">cancelBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;取消&quot;</span>);<br><br>        <span class="hljs-type">ProgressBar</span> <span class="hljs-variable">progressBar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProgressBar</span>(<span class="hljs-number">0</span>);<br>        progressBar.setPrefWidth(<span class="hljs-number">200</span>);<br><br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;state&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;value&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;title&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;message&quot;</span>);<br><br>        <span class="hljs-type">HBox</span> <span class="hljs-variable">hBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HBox</span>();<br>        hBox.setAlignment(Pos.CENTER);<br>        hBox.setSpacing(<span class="hljs-number">10.0</span>);<br><br>        hBox.getChildren().addAll(startBt, cancelBt, progressBar, l1, l2, l3, l4);<br><br>        <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>        anchorPane.setStyle(<span class="hljs-string">&quot;-fx-background-color: #7bb9b0;&quot;</span>);<br>        anchorPane.getChildren().add(hBox);<br><br>        AnchorPane.setLeftAnchor(hBox, <span class="hljs-number">100.0</span>);<br>        AnchorPane.setTopAnchor(hBox, <span class="hljs-number">100.0</span>);<br><br>        <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>        primaryStage.setScene(scene);<br>        primaryStage.setTitle(<span class="hljs-string">&quot;javaFX&quot;</span>);<br>        primaryStage.setWidth(<span class="hljs-number">700</span>);<br>        primaryStage.setHeight(<span class="hljs-number">500</span>);<br>        primaryStage.show();<br><br>        <span class="hljs-type">MyTask</span> <span class="hljs-variable">myTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myTask);<br><br>        startBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                thread.start();<br>            &#125;<br>        &#125;);<br><br><br>        cancelBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                <span class="hljs-comment">// 取消任务</span><br>                myTask.cancel();<br>            &#125;<br>        &#125;);<br><br>        myTask.progressProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>                <span class="hljs-comment">// 进度</span><br>                System.out.println(<span class="hljs-string">&quot;任务进度监听 &quot;</span> + newValue.doubleValue());<br>                progressBar.setProgress(newValue.doubleValue());<br>            &#125;<br>        &#125;);<br><br>        myTask.titleProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends String&gt; observable, String oldValue, String newValue)</span> &#123;<br>                <span class="hljs-comment">// 标题</span><br>                l3.setText(newValue);<br>            &#125;<br>        &#125;);<br><br>        myTask.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;返回值监听 &quot;</span> + newValue.doubleValue());<br>                <span class="hljs-keyword">if</span> (newValue.doubleValue() == <span class="hljs-number">1</span>)&#123;<br>                    l2.setText(<span class="hljs-string">&quot;完成&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>        myTask.messageProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends String&gt; observable, String oldValue, String newValue)</span> &#123;<br>                l4.setText(newValue);<br>            &#125;<br>        &#125;);<br><br>        myTask.stateProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Worker.State&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Worker.State&gt; observable, Worker.State oldValue, Worker.State newValue)</span> &#123;<br>                System.out.println(newValue.toString());<br>                l1.setText(newValue.toString());<br>            &#125;<br>        &#125;);<br><br>        myTask.exceptionProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Throwable&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Throwable&gt; observable, Throwable oldValue, Throwable newValue)</span> &#123;<br>                <span class="hljs-comment">// 异常监听</span><br>                System.out.println(<span class="hljs-string">&quot;异常事件监听 &quot;</span> + newValue.getMessage());<br>            &#125;<br>        &#125;);<br><br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Task</span>&lt;Number&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Number <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 这里是任务主体</span><br>        <span class="hljs-comment">// 判断是否是fx线程，这里返回的是false</span><br>        <span class="hljs-comment">// System.out.println(Platform.isFxApplicationThread());</span><br><br>        <span class="hljs-comment">// 任务名称</span><br>        <span class="hljs-built_in">this</span>.updateTitle(<span class="hljs-string">&quot;任务名称&quot;</span>);<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">progress</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (cur &lt; sum)&#123;<br>            cur = cur + rand.nextInt(<span class="hljs-number">100</span>);<br>            <span class="hljs-keyword">if</span> (cur &gt; sum)&#123;<br>                cur = sum;<br>            &#125;<br>            progress = cur / sum;<br><br>            <span class="hljs-built_in">this</span>.updateProgress(cur, sum);<br><br>            <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">0.5</span>)&#123;<br>                <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;请耐性等待&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">0.8</span>)&#123;<br>                <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;马上就好&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;即将完成&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &gt;= <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;完成了!&quot;</span>);<br>            &#125;<br><br><br>            Thread.sleep(<span class="hljs-number">200</span>);<br><br>            <span class="hljs-keyword">if</span> (isCancelled())&#123;<br>                <span class="hljs-comment">// 任务取消需要在这里另外判断一下</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> progress;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p><code>Service</code>类比<code>Task</code>类会更加的灵活，可以对任务进行重置、重启等操作。</p><p>在<code>Task</code>中的布局总新增一些内容，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">startBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;开始&quot;</span>);<br>    <span class="hljs-type">Button</span> <span class="hljs-variable">cancelBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;取消&quot;</span>);<br>    <span class="hljs-type">Button</span> <span class="hljs-variable">restartBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;重启&quot;</span>);<br>    <span class="hljs-type">Button</span> <span class="hljs-variable">resetBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;重置&quot;</span>);<br><br>    <span class="hljs-type">ProgressBar</span> <span class="hljs-variable">progressBar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProgressBar</span>(<span class="hljs-number">0</span>);<br>    progressBar.setPrefWidth(<span class="hljs-number">200</span>);<br><br>    <span class="hljs-type">Label</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;state&quot;</span>);<br>    <span class="hljs-type">Label</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;value&quot;</span>);<br>    <span class="hljs-type">Label</span> <span class="hljs-variable">l3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;title&quot;</span>);<br>    <span class="hljs-type">Label</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;message&quot;</span>);<br><br>    <span class="hljs-type">HBox</span> <span class="hljs-variable">hBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HBox</span>();<br>    hBox.setAlignment(Pos.CENTER);<br>    hBox.setSpacing(<span class="hljs-number">10.0</span>);<br><br>    hBox.getChildren().addAll(startBt, cancelBt, restartBt, resetBt, progressBar, l1, l2, l3, l4);<br><br>    <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>    anchorPane.setStyle(<span class="hljs-string">&quot;-fx-background-color: #7bb9b0;&quot;</span>);<br>    anchorPane.getChildren().add(hBox);<br><br>    AnchorPane.setLeftAnchor(hBox, <span class="hljs-number">100.0</span>);<br>    AnchorPane.setTopAnchor(hBox, <span class="hljs-number">100.0</span>);<br><br>    <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>    primaryStage.setScene(scene);<br>    primaryStage.setTitle(<span class="hljs-string">&quot;javaFX&quot;</span>);<br>    primaryStage.setWidth(<span class="hljs-number">700</span>);<br>    primaryStage.setHeight(<span class="hljs-number">500</span>);<br>    primaryStage.show();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004144041677.png" alt="image-20221004144041677"></p><p>新建一个任务类，继承于<code>Service</code>，需要实现<code>createTask</code>方法，返回的是<code>Task</code>，所以需要实例化一个<code>Task</code>作为返回值，<code>Task</code>的内容与上一节相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span>&lt;Number&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Task&lt;Number&gt; <span class="hljs-title function_">createTask</span><span class="hljs-params">()</span> &#123;<br>        Task&lt;Number&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> Number <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                <span class="hljs-comment">// 任务名称</span><br>                <span class="hljs-built_in">this</span>.updateTitle(<span class="hljs-string">&quot;任务名称&quot;</span>);<br><br>                <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>                <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>                <span class="hljs-type">double</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">progress</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> (cur &lt; sum) &#123;<br>                    cur = cur + rand.nextInt(<span class="hljs-number">100</span>);<br>                    <span class="hljs-keyword">if</span> (cur &gt; sum) &#123;<br>                        cur = sum;<br>                    &#125;<br>                    progress = cur / sum;<br>                    <span class="hljs-comment">// System.out.println(progress);</span><br><br>                    <span class="hljs-built_in">this</span>.updateProgress(cur, sum);<br><br>                    <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">0.5</span>) &#123;<br>                        <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;请耐性等待&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">0.8</span>) &#123;<br>                        <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;马上就好&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">1</span>) &#123;<br>                        <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;即将完成&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &gt;= <span class="hljs-number">1</span>) &#123;<br>                        <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;完成了!&quot;</span>);<br>                    &#125;<br><br><br>                    Thread.sleep(<span class="hljs-number">200</span>);<br><br>                    <span class="hljs-keyword">if</span> (isCancelled())&#123;<br>                        <span class="hljs-comment">// 任务取消需要在这里另外判断一下</span><br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> progress;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">return</span> task;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后就可以实例化任务类，并绑定按钮事件了，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MyService</span> <span class="hljs-variable">myService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyService</span>();<br><br><span class="hljs-comment">// 开始事件</span><br>startBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        myService.start();<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// 取消事件</span><br>cancelBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        myService.cancel();<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// 重启事件</span><br>restartBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        myService.restart();<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// 重置事件</span><br>resetBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        myService.reset();<br>        <span class="hljs-comment">// 进度条归零</span><br>        progressBar.setProgress(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>对任务设置一些监听事件，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 任务进度监听</span><br>myService.progressProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>        progressBar.setProgress(newValue.doubleValue());<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// 消息监听</span><br>myService.messageProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends String&gt; observable, String oldValue, String newValue)</span> &#123;<br>        <span class="hljs-keyword">if</span> (newValue != <span class="hljs-literal">null</span>)&#123;<br>            l4.setText(newValue);<br>        &#125;<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// 返回值监听</span><br>myService.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>        <span class="hljs-keyword">if</span> (newValue != <span class="hljs-literal">null</span> &amp;&amp; newValue.doubleValue() == <span class="hljs-number">1</span>)&#123;<br>            l2.setText(<span class="hljs-string">&quot;完成&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>最终效果，可以通过<code>开始</code>按钮开始任务，<code>取消</code>按钮取消任务，<code>重启</code>按钮重启任务，<code>重置</code>按钮重置任务，取消的任务不能通过<code>开始</code>再次启动，需要通过<code>重启</code>，或者<code>重置</code>后<code>开始</code>。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004144119224.png" alt="image-20221004144119224"></p><p><code>Service</code>还可以添加任务某个状态的监听事件（<code>Task</code>类也可以的），比如<code>Running</code>状态的监听事件，当任务进入<code>Running</code>状态或离开<code>Running</code>状态时会触发该事件，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">myService.runningProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Boolean&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Boolean&gt; observable, Boolean oldValue, Boolean newValue)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Running &quot;</span> + newValue);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>最后的代码，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javafxTask;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.beans.value.ChangeListener;<br><span class="hljs-keyword">import</span> javafx.beans.value.ObservableValue;<br><span class="hljs-keyword">import</span> javafx.concurrent.Service;<br><span class="hljs-keyword">import</span> javafx.concurrent.Task;<br><span class="hljs-keyword">import</span> javafx.event.ActionEvent;<br><span class="hljs-keyword">import</span> javafx.event.EventHandler;<br><span class="hljs-keyword">import</span> javafx.geometry.Pos;<br><span class="hljs-keyword">import</span> javafx.scene.Scene;<br><span class="hljs-keyword">import</span> javafx.scene.control.Button;<br><span class="hljs-keyword">import</span> javafx.scene.control.Label;<br><span class="hljs-keyword">import</span> javafx.scene.control.ProgressBar;<br><span class="hljs-keyword">import</span> javafx.scene.layout.AnchorPane;<br><span class="hljs-keyword">import</span> javafx.scene.layout.HBox;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fxService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Button</span> <span class="hljs-variable">startBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;开始&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">cancelBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;取消&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">restartBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;重启&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">resetBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;重置&quot;</span>);<br><br>        <span class="hljs-type">ProgressBar</span> <span class="hljs-variable">progressBar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProgressBar</span>(<span class="hljs-number">0</span>);<br>        progressBar.setPrefWidth(<span class="hljs-number">200</span>);<br><br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;state&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;value&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;title&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;message&quot;</span>);<br><br>        <span class="hljs-type">HBox</span> <span class="hljs-variable">hBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HBox</span>();<br>        hBox.setAlignment(Pos.CENTER);<br>        hBox.setSpacing(<span class="hljs-number">10.0</span>);<br><br>        hBox.getChildren().addAll(startBt, cancelBt, restartBt, resetBt, progressBar, l1, l2, l3, l4);<br><br>        <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>        anchorPane.setStyle(<span class="hljs-string">&quot;-fx-background-color: #7bb9b0;&quot;</span>);<br>        anchorPane.getChildren().add(hBox);<br><br>        AnchorPane.setLeftAnchor(hBox, <span class="hljs-number">100.0</span>);<br>        AnchorPane.setTopAnchor(hBox, <span class="hljs-number">100.0</span>);<br><br>        <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>        primaryStage.setScene(scene);<br>        primaryStage.setTitle(<span class="hljs-string">&quot;javaFX&quot;</span>);<br>        primaryStage.setWidth(<span class="hljs-number">700</span>);<br>        primaryStage.setHeight(<span class="hljs-number">500</span>);<br>        primaryStage.show();<br><br>        <span class="hljs-type">MyService</span> <span class="hljs-variable">myService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyService</span>();<br><br>        <span class="hljs-comment">// 开始事件</span><br>        startBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                myService.start();<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 取消事件</span><br>        cancelBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                myService.cancel();<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 重启事件</span><br>        restartBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                myService.restart();<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 重置事件</span><br>        resetBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                myService.reset();<br>                progressBar.setProgress(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 任务进度监听</span><br>        myService.progressProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>                progressBar.setProgress(newValue.doubleValue());<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 消息监听</span><br>        myService.messageProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends String&gt; observable, String oldValue, String newValue)</span> &#123;<br>                <span class="hljs-keyword">if</span> (newValue != <span class="hljs-literal">null</span>)&#123;<br>                    l4.setText(newValue);<br>                &#125;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 返回值监听</span><br>        myService.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>                <span class="hljs-keyword">if</span> (newValue != <span class="hljs-literal">null</span> &amp;&amp; newValue.doubleValue() == <span class="hljs-number">1</span>)&#123;<br>                    l2.setText(<span class="hljs-string">&quot;完成&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>        myService.runningProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Boolean&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Boolean&gt; observable, Boolean oldValue, Boolean newValue)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Running &quot;</span> + newValue);<br>            &#125;<br>        &#125;);<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span>&lt;Number&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Task&lt;Number&gt; <span class="hljs-title function_">createTask</span><span class="hljs-params">()</span> &#123;<br>        Task&lt;Number&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> Number <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                <span class="hljs-comment">// 任务名称</span><br>                <span class="hljs-built_in">this</span>.updateTitle(<span class="hljs-string">&quot;任务名称&quot;</span>);<br><br>                <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>                <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>                <span class="hljs-type">double</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">progress</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> (cur &lt; sum) &#123;<br>                    cur = cur + rand.nextInt(<span class="hljs-number">100</span>);<br>                    <span class="hljs-keyword">if</span> (cur &gt; sum) &#123;<br>                        cur = sum;<br>                    &#125;<br>                    progress = cur / sum;<br>                    <span class="hljs-comment">// System.out.println(progress);</span><br><br>                    <span class="hljs-built_in">this</span>.updateProgress(cur, sum);<br><br>                    <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">0.5</span>) &#123;<br>                        <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;请耐性等待&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">0.8</span>) &#123;<br>                        <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;马上就好&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">1</span>) &#123;<br>                        <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;即将完成&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (progress &gt;= <span class="hljs-number">1</span>) &#123;<br>                        <span class="hljs-built_in">this</span>.updateMessage(<span class="hljs-string">&quot;完成了!&quot;</span>);<br>                    &#125;<br><br><br>                    Thread.sleep(<span class="hljs-number">200</span>);<br><br>                    <span class="hljs-keyword">if</span> (isCancelled())&#123;<br>                        <span class="hljs-comment">// 任务取消需要在这里另外判断一下</span><br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> progress;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">return</span> task;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ScheduledService"><a href="#ScheduledService" class="headerlink" title="ScheduledService"></a>ScheduledService</h2><p><code>ScheduledService</code>是继承于<code>Service</code>的类，<code>Service</code>和<code>Task</code>都是实现<code>Worker</code>接口的类，<code>Task</code>继承了<code>FutureTask</code>。<code>ScheduledService</code>在<code>Service</code>的基础上，增加了计划任务，可以管理任务延时执行、周期执行等操作。</p><p>界面仍然使用<code>Service</code>的，这里同样需要重写<code>createTask</code>方法，，设置任务当点击<code>开始</code>后，等<code>3秒</code>后计数加<code>1</code>，每隔<code>1秒</code>执行一次任务，当计数为<code>5</code>的倍数时，停止任务，点击<code>取消</code>暂停计数，点击<code>重启</code>重新开始计数；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyScheduledService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ScheduledService</span>&lt;Number&gt;&#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Task&lt;Number&gt; <span class="hljs-title function_">createTask</span><span class="hljs-params">()</span> &#123;<br>        Task&lt;Number&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> Number <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                sum = sum + <span class="hljs-number">1</span>;<br>                System.out.println(sum);<br><br>                <span class="hljs-keyword">return</span> sum;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">return</span> task;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后实例化任务，并进行一些设置，可以查看手册有更多的设置，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MyScheduledService</span> <span class="hljs-variable">myScheduledService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyScheduledService</span>();<br><span class="hljs-comment">// 任务开始后延迟执行</span><br>myScheduledService.setDelay(Duration.seconds(<span class="hljs-number">3</span>));<br><span class="hljs-comment">// 周期执行</span><br>myScheduledService.setPeriod(Duration.seconds(<span class="hljs-number">1</span>));<br><span class="hljs-comment">// 任务失败是否重试</span><br>myScheduledService.setRestartOnFailure(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 最大失败重试次数</span><br>myScheduledService.setMaximumFailureCount(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>其他按钮绑定事件和监听事件类似，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">startBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        myScheduledService.start();<br>    &#125;<br>&#125;);<br><br>cancelBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        myScheduledService.cancel();<br>    &#125;<br>&#125;);<br><br>restartBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        myScheduledService.restart();<br>    &#125;<br>&#125;);<br><br>resetBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>        myScheduledService.reset();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">myScheduledService.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>        <span class="hljs-keyword">if</span> (newValue != <span class="hljs-literal">null</span>)&#123;<br>            l2.setText(<span class="hljs-string">&quot;&quot;</span>+newValue);<br>        &#125;<br>    &#125;<br>&#125;);<br><br>myScheduledService.lastValueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;lastValue &quot;</span> + newValue);<br>    &#125;<br>&#125;);<br><br>myScheduledService.stateProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Worker.State&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Worker.State&gt; observable, Worker.State oldValue, Worker.State newValue)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;当前状态 &quot;</span> + newValue);<br><br>    &#125;<br>&#125;);<br><br>myScheduledService.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>        System.out.println(newValue);<br>        <span class="hljs-keyword">if</span> (newValue != <span class="hljs-literal">null</span> &amp;&amp; newValue.intValue()%<span class="hljs-number">5</span> == <span class="hljs-number">0</span>)&#123;<br>            myScheduledService.cancel();<br>            System.out.println(<span class="hljs-string">&quot;任务取消&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>最后代码，这里没写<code>重置</code>，可以设置任务类中通过<code>set</code>和<code>get</code>方法设置进度归零，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javafxTask;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.beans.value.ChangeListener;<br><span class="hljs-keyword">import</span> javafx.beans.value.ObservableValue;<br><span class="hljs-keyword">import</span> javafx.concurrent.ScheduledService;<br><span class="hljs-keyword">import</span> javafx.concurrent.Task;<br><span class="hljs-keyword">import</span> javafx.concurrent.Worker;<br><span class="hljs-keyword">import</span> javafx.event.ActionEvent;<br><span class="hljs-keyword">import</span> javafx.event.EventHandler;<br><span class="hljs-keyword">import</span> javafx.geometry.Pos;<br><span class="hljs-keyword">import</span> javafx.scene.Scene;<br><span class="hljs-keyword">import</span> javafx.scene.control.Button;<br><span class="hljs-keyword">import</span> javafx.scene.control.Label;<br><span class="hljs-keyword">import</span> javafx.scene.control.ProgressBar;<br><span class="hljs-keyword">import</span> javafx.scene.layout.AnchorPane;<br><span class="hljs-keyword">import</span> javafx.scene.layout.HBox;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><span class="hljs-keyword">import</span> javafx.util.Duration;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fxScheduledService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">startBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;开始&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">cancelBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;取消&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">restartBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;重启&quot;</span>);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">resetBt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;重置&quot;</span>);<br><br>        <span class="hljs-type">ProgressBar</span> <span class="hljs-variable">progressBar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProgressBar</span>(<span class="hljs-number">0</span>);<br>        progressBar.setPrefWidth(<span class="hljs-number">200</span>);<br><br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;state&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;value&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;title&quot;</span>);<br>        <span class="hljs-type">Label</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Label</span>(<span class="hljs-string">&quot;message&quot;</span>);<br><br>        <span class="hljs-type">HBox</span> <span class="hljs-variable">hBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HBox</span>();<br>        hBox.setAlignment(Pos.CENTER);<br>        hBox.setSpacing(<span class="hljs-number">10.0</span>);<br><br>        hBox.getChildren().addAll(startBt, cancelBt, restartBt, resetBt, progressBar, l1, l2, l3, l4);<br><br>        <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>        anchorPane.setStyle(<span class="hljs-string">&quot;-fx-background-color: #7bb9b0;&quot;</span>);<br>        anchorPane.getChildren().add(hBox);<br><br>        AnchorPane.setLeftAnchor(hBox, <span class="hljs-number">100.0</span>);<br>        AnchorPane.setTopAnchor(hBox, <span class="hljs-number">100.0</span>);<br><br>        <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>        primaryStage.setScene(scene);<br>        primaryStage.setTitle(<span class="hljs-string">&quot;javaFX&quot;</span>);<br>        primaryStage.setWidth(<span class="hljs-number">700</span>);<br>        primaryStage.setHeight(<span class="hljs-number">500</span>);<br>        primaryStage.show();<br><br>        <span class="hljs-type">MyScheduledService</span> <span class="hljs-variable">myScheduledService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyScheduledService</span>();<br>        <span class="hljs-comment">// 任务开始后延迟执行</span><br>        myScheduledService.setDelay(Duration.seconds(<span class="hljs-number">3</span>));<br>        <span class="hljs-comment">// 周期执行</span><br>        myScheduledService.setPeriod(Duration.seconds(<span class="hljs-number">1</span>));<br>        <span class="hljs-comment">// 任务失败是否重试</span><br>        myScheduledService.setRestartOnFailure(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 最大失败次数</span><br>        myScheduledService.setMaximumFailureCount(<span class="hljs-number">5</span>);<br><br>        startBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                myScheduledService.start();<br>            &#125;<br>        &#125;);<br><br>        cancelBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                myScheduledService.cancel();<br>            &#125;<br>        &#125;);<br><br>        restartBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                myScheduledService.restart();<br>            &#125;<br>        &#125;);<br><br>        resetBt.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                myScheduledService.reset();<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">///////////</span><br>        myScheduledService.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>                <span class="hljs-keyword">if</span> (newValue != <span class="hljs-literal">null</span>)&#123;<br>                    l2.setText(<span class="hljs-string">&quot;&quot;</span>+newValue);<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>        myScheduledService.lastValueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;lastValue &quot;</span> + newValue);<br>            &#125;<br>        &#125;);<br><br>        myScheduledService.stateProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Worker.State&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Worker.State&gt; observable, Worker.State oldValue, Worker.State newValue)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;当前状态 &quot;</span> + newValue);<br><br>            &#125;<br>        &#125;);<br><br>        myScheduledService.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue)</span> &#123;<br>                System.out.println(newValue);<br>                <span class="hljs-keyword">if</span> (newValue != <span class="hljs-literal">null</span> &amp;&amp; newValue.intValue()%<span class="hljs-number">5</span> == <span class="hljs-number">0</span>)&#123;<br>                    myScheduledService.cancel();<br>                    System.out.println(<span class="hljs-string">&quot;任务取消&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyScheduledService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ScheduledService</span>&lt;Number&gt;&#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Task&lt;Number&gt; <span class="hljs-title function_">createTask</span><span class="hljs-params">()</span> &#123;<br>        Task&lt;Number&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>&lt;Number&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> Number <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                sum = sum + <span class="hljs-number">1</span>;<br>                System.out.println(sum);<br><br>                <span class="hljs-keyword">return</span> sum;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">return</span> task;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="创建多任务同时开始并返回值"><a href="#创建多任务同时开始并返回值" class="headerlink" title="创建多任务同时开始并返回值"></a>创建多任务同时开始并返回值</h2><p>有这样的任务：点击按钮，同时开始多个任务，并在任务结束后得到返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javafxTask;<br><br><span class="hljs-keyword">import</span> javafx.application.Application;<br><span class="hljs-keyword">import</span> javafx.beans.value.ChangeListener;<br><span class="hljs-keyword">import</span> javafx.beans.value.ObservableValue;<br><span class="hljs-keyword">import</span> javafx.concurrent.Service;<br><span class="hljs-keyword">import</span> javafx.concurrent.Task;<br><span class="hljs-keyword">import</span> javafx.event.ActionEvent;<br><span class="hljs-keyword">import</span> javafx.event.EventHandler;<br><span class="hljs-keyword">import</span> javafx.geometry.Pos;<br><span class="hljs-keyword">import</span> javafx.scene.Scene;<br><span class="hljs-keyword">import</span> javafx.scene.control.Button;<br><span class="hljs-keyword">import</span> javafx.scene.control.TextArea;<br><span class="hljs-keyword">import</span> javafx.scene.layout.AnchorPane;<br><span class="hljs-keyword">import</span> javafx.scene.layout.VBox;<br><span class="hljs-keyword">import</span> javafx.stage.Stage;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fxService_1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        launch(args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Stage primaryStage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Button</span> <span class="hljs-variable">button</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;按钮&quot;</span>);<br>        <span class="hljs-type">TextArea</span> <span class="hljs-variable">textArea</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextArea</span>();<br>        textArea.setPrefWidth(<span class="hljs-number">200</span>);<br>        textArea.setPrefHeight(<span class="hljs-number">200</span>);<br><br>        <span class="hljs-type">VBox</span> <span class="hljs-variable">vBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VBox</span>();<br>        vBox.getChildren().addAll(button, textArea);<br>        vBox.setSpacing(<span class="hljs-number">10.0</span>);<br>        vBox.setAlignment(Pos.CENTER);<br><br>        <span class="hljs-type">AnchorPane</span> <span class="hljs-variable">anchorPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnchorPane</span>();<br>        anchorPane.getChildren().add(vBox);<br>        anchorPane.setStyle(<span class="hljs-string">&quot;-fx-background-color: #c1da87;&quot;</span>);<br><br>        <span class="hljs-type">Scene</span> <span class="hljs-variable">scene</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(anchorPane);<br>        primaryStage.setScene(scene);<br>        primaryStage.setWidth(<span class="hljs-number">300</span>);<br>        primaryStage.setHeight(<span class="hljs-number">300</span>);<br>        primaryStage.show();<br><br>        button.setOnAction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ActionEvent event)</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                    <span class="hljs-type">MultiTask1</span> <span class="hljs-variable">multiTask1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MultiTask1</span>(<span class="hljs-string">&quot;任务&quot;</span>+i);<br>                    multiTask1.start();<br>                    multiTask1.valueProperty().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeListener</span>&lt;String[]&gt;() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changed</span><span class="hljs-params">(ObservableValue&lt;? extends String[]&gt; observable, String[] oldValue, String[] newValue)</span> &#123;<br>                            <span class="hljs-keyword">for</span> (String s : newValue) &#123;<br>                                textArea.appendText(s + <span class="hljs-string">&quot;\t&quot;</span>);<br>                            &#125;<br>                            textArea.appendText(<span class="hljs-string">&quot;\n&quot;</span>);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br><br>            &#125;<br>        &#125;);<br><br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiTask1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span>&lt;String[]&gt;&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MultiTask1</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Task&lt;String[]&gt; createTask() &#123;<br><br>        Task&lt;String[]&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>&lt;String[]&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> String[] call() <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                System.out.println(name + <span class="hljs-string">&quot; 开始 &quot;</span> + Thread.currentThread().getName());<br><br>                Thread.sleep(<span class="hljs-number">5000</span>);<br><br>                System.out.println(name + <span class="hljs-string">&quot; 结束 &quot;</span> + Thread.currentThread().getName());<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;name, <span class="hljs-string">&quot;true&quot;</span>&#125;;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">return</span> task;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221004144213856.png" alt="image-20221004144213856"></p>]]></content>
    
    
    <categories>
      
      <category>javafx</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>javafx</tag>
      
      <tag>多线程</tag>
      
      <tag>gui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[杂项] 使用picGo和腾讯云COS搭建图床</title>
    <link href="/2022/10/03/%5B%E6%9D%82%E9%A1%B9%5D%20%E4%BD%BF%E7%94%A8picGo%E5%92%8C%E8%85%BE%E8%AE%AF%E4%BA%91COS%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <url>/2022/10/03/%5B%E6%9D%82%E9%A1%B9%5D%20%E4%BD%BF%E7%94%A8picGo%E5%92%8C%E8%85%BE%E8%AE%AF%E4%BA%91COS%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="使用picGo和腾讯云COS搭建图床"><a href="#使用picGo和腾讯云COS搭建图床" class="headerlink" title="使用picGo和腾讯云COS搭建图床"></a>使用picGo和腾讯云COS搭建图床</h1><p>以前都是本地写文章自己看，所以图片都是保存在本地的。自从搭建了网站，图片的保存成了问题，用网上的图床担心失联，所以就想搭建自己的图床。</p><p>开始使用的是<a href="https://gridea.dev/docs/">Gridea</a>，可以将图片同步到Github仓库，但是经过使用后发现不太好用，老是失败。然后选择了<code>picGo</code>，相较于<code>Gridea</code>，<code>picGo</code>提供了更多的选项，可以选择<code>Github</code>、<code>腾讯云COS</code>、<code>阿里云OSS</code>、<code>七牛图床</code>等，首先选择的是<code>Github图床</code>，实践后发现总是连接失败，挂的梯子也没有用，所以最后选择了<code>腾讯云COS</code>。</p><h2 id="腾讯云COS"><a href="#腾讯云COS" class="headerlink" title="腾讯云COS"></a>腾讯云COS</h2><p>腾讯云COS，即对象存储，首次使用有50G存储的六个月免费期限，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003165321277.png" alt="image-20221003165321277"></p><p>开通后<strong>创建存储桶</strong>，访问权限要设置<strong>公有读私有写</strong>，其他默认就行，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003165608660.png" alt="image-20221003165608660"></p><p>然后在<strong>存储桶列表</strong>选择新建的桶，进入后在<strong>文件列表</strong>中<strong>创建文件夹</strong>用于保存图片，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003170750753.png" alt="image-20221003170750753"></p><p>接着选择<strong>密钥管理</strong>，在<strong>API密钥管理</strong>生成密钥，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003165839573.png" alt="image-20221003165839573"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003170039435.png" alt="image-20221003170039435"></p><p>到这里腾讯云COS就配置好了，密钥要保密，不要泄露。</p><h2 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a>PicGo配置</h2><p>首先在<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo-Github</a>下载客户端。</p><p>下载安装后进行配置，主要配置的就是桶名称和API密钥，根据自己的配置就行了，存储路径设置为创建的文件夹，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003170852260.png" alt="image-20221003170852260"></p><p>配置好之 后，就可以上传图片了，上传后可以在相册看到，同时腾讯云COS文件夹中也可以看到，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003171110471.png" alt="image-20221003171110471"></p><h2 id="Typora配置"><a href="#Typora配置" class="headerlink" title="Typora配置"></a>Typora配置</h2><p>写文档用的最多的就是Typora，Typora提供了图床同步的功能，在设置中选择图像，上传服务选择<code>PicGo(app)</code>，路径是PicGo的安装路径，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003171716992.png" alt="image-20221003171716992"></p><p>设置好之后点击<strong>验证图片上传功能</strong>就可以测试上床是否正常，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003172137516.png" alt="image-20221003172137516"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里图床就搭建好了，国庆几天都在折腾这些，网上工具很多，教程也很多，找到一个合适的不容易。</p><p>国庆快乐:happy:</p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>typora</tag>
      
      <tag>picGo</tag>
      
      <tag>腾讯云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[算法] LeetCode-1608-特殊数组的特征值</title>
    <link href="/2022/10/03/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-1608-%E7%89%B9%E6%AE%8A%E6%95%B0%E7%BB%84%E7%9A%84%E7%89%B9%E5%BE%81%E5%80%BC/"/>
    <url>/2022/10/03/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-1608-%E7%89%B9%E6%AE%8A%E6%95%B0%E7%BB%84%E7%9A%84%E7%89%B9%E5%BE%81%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="1608-特殊数组的特征值"><a href="#1608-特殊数组的特征值" class="headerlink" title="1608-特殊数组的特征值"></a>1608-特殊数组的特征值</h1><p>给你一个非负整数数组 <code>nums</code> 。如果存在一个数 <code>x</code> ，使得 <code>nums</code> 中恰好有 <code>x </code>个元素 <strong>大于或者等于</strong> <code>x</code> ，那么就称 <code>nums</code> 是一个 <strong>特殊数组</strong> ，而 <code>x</code> 是该数组的 <strong>特征值</strong> 。</p><p><strong>注意</strong>： <code>x</code> <strong>不必</strong> 是 <code>nums</code> 的中的元素。</p><p>如果数组 <code>nums</code> 是一个 <strong>特殊数组</strong> ，请返回它的特征值 <code>x</code> 。否则，返回 <code>-1 </code>。可以证明的是，如果 <code>nums</code> 是特殊数组，那么其特征值 <code>x</code> 是 唯一的 。</p><p>示例 1：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [3,5]<br>输出：2<br>解释：有<span class="hljs-number"> 2 </span>个元素（3 和 5）大于或等于<span class="hljs-number"> 2 </span>。<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs llvm">输入：nums <span class="hljs-operator">=</span> [<span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span>]<br>输出：<span class="hljs-number">-1</span><br>解释：没有满足题目要求的特殊数组，故而也不存在特征值 <span class="hljs-keyword">x</span> 。<br>如果 <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>，应该有 <span class="hljs-number">0</span> 个元素 &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">x</span>，但实际有 <span class="hljs-number">2</span> 个。<br>如果 <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>，应该有 <span class="hljs-number">1</span> 个元素 &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">x</span>，但实际有 <span class="hljs-number">0</span> 个。<br>如果 <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>，应该有 <span class="hljs-number">2</span> 个元素 &gt;<span class="hljs-operator">=</span> <span class="hljs-keyword">x</span>，但实际有 <span class="hljs-number">0</span> 个。<br><span class="hljs-keyword">x</span> 不能取更大的值，因为 nums 中只有两个元素。<br></code></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [0,4,3,0,4]<br>输出：3<br>解释：有<span class="hljs-number"> 3 </span>个元素大于或等于<span class="hljs-number"> 3 </span>。<br></code></pre></td></tr></table></figure><p>示例 4：</p><p><code>输入：nums = [3,6,7,7,0] 输出：-1</code></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>按照题目的意思，如果是特殊数组，那么特殊值一定在<code>[1, m]</code>之间，其中m是数组长度。那么就可以遍历其中的数，并统计数组中大于或等于该值的数的个数。python的实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">specialArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)+<span class="hljs-number">1</span>):<br><br>            c = <span class="hljs-number">0</span><br><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> nums:<br><br>                <span class="hljs-keyword">if</span> j &gt;= i:<br><br>                    c += <span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">if</span> c == i:<br><br>                <span class="hljs-keyword">return</span> i<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">48</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">14.98</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">14.8</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">89.60</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">98</span> / <span class="hljs-number">98</span><br></code></pre></td></tr></table></figure><p>或者也可以有另一种方法，首先将数组从大到小排列，同样是在<code>[1, m]</code>之间遍历，由于已经逆序排列了，如果存在了特征值<code>i</code>，那么<code>nums[i-1]</code>一定会大于或等于<code>i</code>，而其之后的元素，或者不存在（即已经到达了边界），或者<code>nums[i]&lt;i</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">specialArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        nums.sort(reverse=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)+<span class="hljs-number">1</span>):<br><br>            <span class="hljs-keyword">if</span> (nums[i-<span class="hljs-number">1</span>] &gt;= i) <span class="hljs-keyword">and</span> (i == <span class="hljs-built_in">len</span>(nums) <span class="hljs-keyword">or</span> nums[i] &lt; i):<br><br>                <span class="hljs-keyword">return</span> i<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">44</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">28.09</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">15</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">27.10</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">98</span> / <span class="hljs-number">98</span><br></code></pre></td></tr></table></figure><hr><hr><p>给出java的写法，方法一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">specialArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= nums.length; i++)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : nums)&#123;<br><br>                <span class="hljs-keyword">if</span> (j &gt;= i)&#123;<br><br>                    c++;<br><br>                &#125;<br><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (c == i)&#123;<br><br>                <span class="hljs-keyword">return</span> i;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">1</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">81.80</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">39.3</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">47.37</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">98</span> / <span class="hljs-number">98</span><br></code></pre></td></tr></table></figure><p>方法二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">specialArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br><br>        Arrays.sort(nums);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>, j=n-<span class="hljs-number">1</span>; i&lt;j; i++, j--)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> nums[i];<br><br>            nums[i] = nums[j];<br><br>            nums[j] = tmp;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;n+<span class="hljs-number">1</span>; i++)&#123;<br><br>            <span class="hljs-keyword">if</span> (nums[i-<span class="hljs-number">1</span>]&gt;=i &amp;&amp; (i==n || nums[i]&lt;i))&#123;<br><br>                <span class="hljs-keyword">return</span> i;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">1</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">81.80</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">39.3</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">44.21</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">98</span> / <span class="hljs-number">98</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>python</tag>
      
      <tag>java</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[杂项] 使用hexo搭建Github Page</title>
    <link href="/2022/10/02/%5B%E6%9D%82%E9%A1%B9%5D%20%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BAGithub%20Page/"/>
    <url>/2022/10/02/%5B%E6%9D%82%E9%A1%B9%5D%20%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BAGithub%20Page/</url>
    
    <content type="html"><![CDATA[<h1 id="使用hexo搭建Github-Page个人主页"><a href="#使用hexo搭建Github-Page个人主页" class="headerlink" title="使用hexo搭建Github Page个人主页"></a>使用<code>hexo</code>搭建<code>Github Page</code>个人主页</h1><p>为什么要搭建个人主页？因为在平台上会有<strong>审核</strong>。</p><p>最开始想要搭建个人网站使用的是<code>wordpress</code>，当时的体验非常的不好，首先就是速度，当时并不会搭梯子，所以搭建或者更新会非常的慢；然后<code>wordpress</code>功能会非常的臃肿，如果只是要写作来说，很多都是没有的功能；最后就是安全问题，这是后话了。</p><p>某一天偶然学会了写<code>Markdown</code>文档，有种相见恨晚的感觉，之后写文档都是用的这种。所以想要再次搭建个人网站时，就想着能否将本地写的文档直接上传作为博客。于是就直到了<code>Github</code>的<code>Page</code>主页。</p><p><code>GitHub</code>的<code>Page</code>主页搭建方法有很多，经过测试，选择了一种最适合的，那就是<code>hexo</code>。这里会详细的介绍我是如何用<code>hexo</code>搭建<code>Github</code>个人主页的。</p><h2 id="Hexo本地搭建"><a href="#Hexo本地搭建" class="headerlink" title="Hexo本地搭建"></a><code>Hexo</code>本地搭建</h2><p><a href="https://hexo.io/zh-cn/">Hexo</a>是一个快速、简洁且高效的博客框架。<code>Hexo</code>使用<code>Markdown</code>解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>安装<code>Hexo</code>需要用到：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (<code>Node.js</code> 版本需不低于 <code>10.13</code>，建议使用 <code>Node.js 12.0</code> 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><p>安装好之后，就可以使用<code>npm</code>安装<code>Hexo</code>了。使用命令：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>安装成功之后可以使用命令检查：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">hexo <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>接着就可以搭建网站了。</p><p>首先初始化博客目录，在合适的文件夹下使用命令：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">hexo <span class="hljs-keyword">init</span> &lt;github name&gt;.github.io<br></code></pre></td></tr></table></figure><p>这里<code>&lt;github name&gt;</code>需要换成<code>GitHub用户名</code>。运行成功会创建名为<code>&lt;github name&gt;.github.io</code>的目录。进入该目录，使用命令进行自动配置博客，</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>执行完成之后，会出现类似下面的目录结构：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqf">.<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></td></tr></table></figure><p>其中各个文件或目录的作用为：</p><ul><li><code>_config.yaml</code>：网站主要配置信息。</li><li><code>package.json</code>：应用程序信息。安装后就没用了。</li><li><code>scaffolds</code>：模板文件夹。<code>Hexo</code>可根据模板创建文件。</li><li><code>source</code>：资源文件夹，用于存放用户资源。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。<code>Markdown</code> 和 <code>HTML</code> 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</li><li><code>themes</code>：主题文件夹。Hexo 会根据主题来生成静态页面。</li></ul><p>然后执行以下命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>其中每个命令的作用：</p><ul><li><code>hexo clean</code>：清除缓存文件和已生成的静态文件。</li><li><code>hexo g</code>：即<code>generate</code>，生成静态文件。</li><li><code>hexo s</code>：即<code>server</code>，启动服务器。默认情况下在<code>http://localhost:4000/</code>。</li></ul><p>打开浏览器，输入<code>http://localhost:4000/</code>，就可以看到个人网站了，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/caqbw2nc2g.png" alt="img"></p><h3 id="Hexo主题设置"><a href="#Hexo主题设置" class="headerlink" title="Hexo主题设置"></a><code>Hexo</code>主题设置</h3><p><code>Hexo</code>提供了很多的<a href="https://hexo.io/themes/">Themes</a>，可以很方便的进行配置。通用的方法是找到一款喜欢的主题，将主题<code>clone</code>到<code>theme</code>目录下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git clone https://github.com/iissnan/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><p>然后修改<code>_config.yml</code>文件中的<code>theme</code>为主题名字：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">theme:</span> <span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>然后重新生成和运行：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>这样就可以看到修改后的主题了，这样就好看多了。</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/7kon5wcfli.png" alt="img"></p><p>还有另外的一种修改主题的方法，使用的主题是<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>，其他主题不知道是否提供这种方法，在<code>Hexo 5.0.0</code>版本以上，推荐通过<code>npm</code>直接安装，进入博客目录执行命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>这样会将主题下载到<code>node_modules</code>目录下的<code>hexo-theme-fluid</code>文件夹中，然后将该文件夹中的<code>_config.yml</code>复制到博客根目录的<code>_config.fluid.yml</code>文件中。接着修改根目录的<code>_config.yml</code>文件指定主题。最后重新生成和运行，就可以看到效果了：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003091327142.png" alt="image-20221003091327142"></p><h2 id="部署到Github-Page"><a href="#部署到Github-Page" class="headerlink" title="部署到Github Page"></a>部署到<code>Github Page</code></h2><p>前面已经设置好了个人<code>blog</code>，但是只能自己看，接下啦就部署到网上让更多人看到了。如果有自己的服务器可以部署到服务器上，如果没有，就可以部署到<code>Github Page</code>上。</p><p>首先创建<code>Github</code>账号，创建一个仓库<code>&lt;Github name&gt;.github.io</code>，属性为<code>public</code>。</p><p>然后在本地安装<code>hexo-deployer-git</code>插件，用于<code>push</code>到<code>GitHub</code>上：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>在<code>_config.yml</code>中配置Git：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">deploy:<br>    type: git<br>    repo: https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/&lt;Github name&gt;/</span>&lt;Github name&gt;.github.io<br></code></pre></td></tr></table></figure><p>接着就可以部署到Github了：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>这里<code>d</code>就是<code>deploy</code>，即部署。默认会推送到<code>master</code>分支。推送可以使用<code>hexo g -d</code>或者<code>hexo d -g</code>来完成自动生成和部署。</p><p>现在访问<code>&lt;Github name&gt;.github.io</code>就可以访问了。</p><h2 id="如何写作"><a href="#如何写作" class="headerlink" title="如何写作"></a>如何写作</h2><p>网站创建就完成了，接下来就是如何能创建和管理内容了，毕竟内容才是最主要的。</p><p>创建新文章有两种方法，可以使用命令创建，在根目录下使用命令：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo new <span class="hljs-selector-tag">article</span> &lt;<span class="hljs-selector-tag">Article</span> name&gt;<br></code></pre></td></tr></table></figure><p>就会在<code>source/_posts</code>下生成相应的MD文件了。或者可以直接在该目录下创建文件，个人更喜欢后者。</p><p>这里不得不说一下图片的处理，Markdown文档的图片是以URL形式设置的，所以需要一个稳定的地址来保存图片，通常需要用到图床，但是网上的免费图床可能会失效，这就很难受了。所以就自建了图床，用到了<code>picGo</code>、<code>Typora</code>和<code>腾讯云COS</code>，将会在另一篇文章细说。</p><h3 id="文章管理"><a href="#文章管理" class="headerlink" title="文章管理"></a>文章管理</h3><p>可以给文章打标签、分类或者设置其他属性，用于管理。</p><p>这里也可以使用命令，但是用起来有点麻烦，这里使用更直观的方法。每次创建文件时，都在文章开头设置属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章名称</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">layout</span><br><span class="hljs-attr">tags:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">tag1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">tag2</span><br><span class="hljs-attr">categories:</span> <br>    <span class="hljs-bullet">-</span> [<span class="hljs-string">categories1</span>]<br>    <span class="hljs-bullet">-</span> [<span class="hljs-string">categories2</span>]<br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-10-02</span><br><span class="hljs-attr">updated:</span> <span class="hljs-number">2022-10-03</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>其中关键字的表示：</p><ul><li><code>title</code>：文章标题。</li><li><code>layout</code>：布局。指定文章的布局。</li><li><code>tags</code>：标签。</li><li><code>categories</code>：分类。为什么需要加方括号参考<a href="https://hexo.io/zh-cn/docs/front-matter">这里</a>。</li><li><code>date</code>：创建日期。</li><li><code>updated</code>：更新日期。</li><li><code>comments</code>：是否开启评论功能，默认true。</li></ul><p>还有一些其他的关键字看：<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter | Hexo</a>。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>使用网站搭建好了，但是网站名有点长，不好记，所以可以买个合适的域名绑定。</p><p>购买域名推荐<a href="https://www.dynadot.com/">Dynadot</a>，国外的域名商，可以使用支付宝购买，而且不用<strong>备案</strong>。</p><p>申请账号后，就可以选域名了，注意要在这里选择<strong>人民币</strong>，否则不能用支付宝支付：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003100506139.png" alt="image-20221003100506139"></p><p>在博客的<code>sources</code>目录下新建<code>CNAME</code>文件，在文件中写申请的域名，然后推到<code>Github</code>上。</p><p>接着需要为域名添加<code>DNS</code>解析，</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003101234645.png" alt="image-20221003101234645"></p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003101330991.png" alt="image-20221003101330991"></p><p>最后在<code>Github</code>仓库中点击<code>setting</code>，进行设置：</p><p><img src="https://picgo-1307028727.cos.ap-chengdu.myqcloud.com/picgo/image-20221003101504745.png" alt="image-20221003101504745"></p><p>等一会，就可以使用自己的域名访问了！</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p><code>Github</code>不让百度爬取索引，所以百度是搜索不到网站的。如果想要被更多的搜索，就可以购买自己的服务器了。</p><p>腾讯或者阿里的都可以，第一次购买有优惠，还有学生优惠，偶尔还会打折，价格也不贵，但是需要备案。服务器搭建服务这里就不多说了，教程很多。搭建好网站后记得<code>DNS</code>解析到服务器。</p><h2 id="Hexo的一些命令"><a href="#Hexo的一些命令" class="headerlink" title="Hexo的一些命令"></a><code>Hexo</code>的一些命令</h2><p>这里介绍一些常用的命令，可以跳过。</p><h3 id="init"><a href="#init" class="headerlink" title="init"></a><code>init</code></h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hexo</span> init<span class="hljs-meta"> [folder]</span><br></code></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，<code>Hexo</code> 默认在目前的文件夹建立网站。</p><p>本命令相当于执行了以下几步：</p><ol><li><code>Git clone hexo-starter</code> 和 <code>hexo-theme-landscape</code> 主题到当前目录或指定目录。</li><li>使用 <code>Yarn 1</code>、<code>pnpm</code> 或 <code>npm</code> 包管理器下载依赖（如有已安装多个，则列在前面的优先）。<code>npm</code> 默认随 <code>Node.js</code> 安装。</li></ol><h3 id="new"><a href="#new" class="headerlink" title="new"></a><code>new</code></h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;post title with whitespace&quot;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，<code>Hexo</code> 会使用文章的标题来决定文章文件的路径。对于独立页面来说，<code>Hexo</code> 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> --path about/me <span class="hljs-string">&quot;About me&quot;</span><br></code></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 <code>Front Matter</code> 中的 <code>title</code> 为 <code>&quot;About me&quot;</code></p><p>注意！<code>title</code> 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hexo <span class="hljs-keyword">new</span> page <span class="hljs-comment">--path about/me</span><br></code></pre></td></tr></table></figure><p>此时 <code>Hexo</code> 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 <code>Front Matter</code> 中的 <code>title</code> 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，<code>hexo-cli</code> 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">$ hexo publish [layout] <span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发表草稿。</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo d<br></code></pre></td></tr></table></figure><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">$ hexo render &lt;file1&gt; [file2] ...<br></code></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-o</code>, <code>--output</code></td><td align="left">设置输出路径</td></tr></tbody></table><h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo migrate &lt;<span class="hljs-keyword">type</span>&gt;<br></code></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean<br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo list &lt;<span class="hljs-keyword">type</span>&gt;<br></code></pre></td></tr></table></figure><p>列出网站资料。</p><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ hexo <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>显示 <code>Hexo</code> 版本。</p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
      <tag>域名</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[算法] LeetCode-670-最大交换</title>
    <link href="/2022/10/02/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-670-%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/"/>
    <url>/2022/10/02/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-670-%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="670-最大交换"><a href="#670-最大交换" class="headerlink" title="670-最大交换"></a>670-最大交换</h1><p>给定一个非负整数，你<strong>至多</strong>可以交换一次数字中的任意两位。返回你能得到的<strong>最大值</strong>。</p><p><strong>示例 1 :</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: 2736</span><br><span class="hljs-section">输出: 7236</span><br><span class="hljs-section">解释: 交换数字2和数字7。</span><br></code></pre></td></tr></table></figure><p><strong>示例 2 :</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: 9973</span><br><span class="hljs-section">输出: 9973</span><br><span class="hljs-section">解释: 不需要交换。</span><br></code></pre></td></tr></table></figure><p><strong>注意:</strong></p><ol><li>给定数字的范围是 <code>[0, 10^8]</code></li></ol><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>既然要得到最大值，那么就尽量把最大值放到前面。如何交换？需要将数字从大到小排列，然后依次将原来的数字与排列好的数字比较，如果相等就比较下一个；如果原来的数字小，那么就把这个数设置为相比较的那个大数，然后在原来的数字从后向前寻找替换的大数，找到后将其设置为小数。</p><p>为什么第二次要从后向前的查找？是为了尽量得到更大的数。如果前面或中间的大数被替换了，得到的不是最大的数。</p><p>python实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumSwap</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ts = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">str</span>(num))<br>        tmp = <span class="hljs-built_in">sorted</span>(ts, reverse=<span class="hljs-literal">True</span>)<br>        c = <span class="hljs-number">0</span><br>        k = -<span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ts)):<br>            <span class="hljs-keyword">if</span> ts[i] == tmp[c]:<br>                c += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">elif</span> ts[i] &lt; tmp[c]:<br>                k = ts[i]<br>                ts[i] = tmp[c]<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> k != -<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ts)-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> ts[i] == tmp[c]:<br>                    ts[i] = k<br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join(ts))<br><br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">36</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">68.71</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">14.9</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">42.18</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">111</span> / <span class="hljs-number">111</span><br></code></pre></td></tr></table></figure><hr><hr><p>Java的解法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maximumSwap</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">char</span>[] chars = String.valueOf(num).toCharArray();<br>        <span class="hljs-type">int</span>[] maxIndex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[chars.length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> chars.length-<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> chars.length-<span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-keyword">if</span> (chars[j] - <span class="hljs-string">&#x27;0&#x27;</span> &gt; chars[max] - <span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br>                max = j;<br>            &#125;<br>            maxIndex[j] = max;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chars.length; i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">iValue</span> <span class="hljs-operator">=</span> chars[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">maxValue</span> <span class="hljs-operator">=</span> chars[maxIndex[i]] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (maxValue != iValue)&#123;<br>                chars[i] = (<span class="hljs-type">char</span>) (maxValue + <span class="hljs-string">&#x27;0&#x27;</span>);<br>                chars[maxIndex[i]] = (<span class="hljs-type">char</span>) (iValue + <span class="hljs-string">&#x27;0&#x27;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Integer.parseInt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">0</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">100.00</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">38.1</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">86.13</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">111</span> / <span class="hljs-number">111</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>python</tag>
      
      <tag>java</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[算法] LeetCode-349-两个数组的交集</title>
    <link href="/2022/10/01/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-349-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/"/>
    <url>/2022/10/01/%5B%E7%AE%97%E6%B3%95%5D%20LeetCode-349-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349-两个数组的交集"></a>349-两个数组的交集</h1><p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p><p>示例 1：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[1,2,2,1]</span>, nums2 = <span class="hljs-comment">[2,2]</span><br>输出：<span class="hljs-comment">[2]</span><br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[4,9,5]</span>, nums2 = <span class="hljs-comment">[9,4,9,8,4]</span><br>输出：<span class="hljs-comment">[9,4]</span><br>解释：<span class="hljs-comment">[4,9]</span> 也是可通过的<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>求两个数组的交集，在python中可以使用set进行去重，然后求合集，但是这种方法算是“作弊”吧😅</p><p>另一种方法是对其中一个数组进行遍历，判断其中元素是否在另一个数组中，但是想一想这种方法的复杂度有点高；时间复杂度来说，对于每个元素，都需要在另一个数组中判断是否存在，所以复杂度为<code>O(m*n)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">intersection</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        res = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums1:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> nums2:<br>                <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res:<br>                    res.append(i)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>最后运行结果为</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">52</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">16.16</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">15</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">75.52</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">55</span> / <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><p>怎么优化？🤔首先对第一个数组遍历时，同时保存元素及其出现次数，然后遍历第二个数组时，判断其是否已经保存，如果已经存在那么就是重复的元素；如何去重？🤔如果对最后的结果再次去重，这样会提高复杂度，如果在保存的时候就能判断是否需要保存就好了。</p><p>这样就想到了使用字典，去重时是这么处理的：在第二次循环时如果元素已经存在了，就将其保存并从字典中去除。这种方法的时间复杂度是<code>O(m+n)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">intersection</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        m = &#123;&#125;<br>        res = []<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums1:<br>            m[n] = m.get(n, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums2:<br>            <span class="hljs-keyword">if</span> m.get(n, <span class="hljs-number">0</span>) &gt; <span class="hljs-number">0</span>:<br>                m.pop(n)<br>                res.append(n)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>最后运行结果为</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行用时：<span class="hljs-number">40</span> ms, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">59.53</span><span class="hljs-meta">%</span>的用户<br>内存消耗：<span class="hljs-number">15.1</span> MB, 在所有 Pytho<span class="hljs-symbol">n3</span> 提交中击败了<span class="hljs-number">26.27</span><span class="hljs-meta">%</span>的用户<br>通过测试用例：<span class="hljs-number">55</span> / <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><hr><hr><p>在学java，记录一个java的题解。方法还是暴力，依次判断一个数组的元素是否在另一个数组中，将结果保存在<code>HashSet</code>中可以去重，最后将<code>HashSet</code>转换为数组返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>        Set&lt;Integer&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (nums1 == <span class="hljs-literal">null</span> || nums2 == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len1</span> <span class="hljs-operator">=</span> nums1.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len2</span> <span class="hljs-operator">=</span> nums2.length;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len1; i++)&#123;<br>            <span class="hljs-keyword">if</span> (checkIsExist(nums2, nums1[i]))&#123;<br>                result.add(nums1[i]);<br>            &#125;<br>        &#125;<br>  <br>        <span class="hljs-type">int</span>[] finalResult = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[result.size()];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> item : result)&#123;<br>            finalResult[start] = item;<br>            start++;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> finalResult;<br>    &#125;<br><br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkIsExist</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums2, <span class="hljs-type">int</span> cur)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums2.length; i++)&#123;<br>            <span class="hljs-keyword">if</span> (nums2[i] == cur)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后运行结果为</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">2</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">95.30</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">41.6</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">44.51</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">55</span> / <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><p>复现一下python的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br><br>        HashMap&lt;Integer, Integer&gt; mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n : nums1)&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> mp.getOrDefault(n, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>;<br><br>            mp.put(n, c);<br><br>        &#125;<br><br>  <br><br>        Set&lt;Integer&gt; ks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n : nums2)&#123;<br><br>            <span class="hljs-keyword">if</span> (mp.getOrDefault(n, <span class="hljs-number">0</span>) &gt; <span class="hljs-number">0</span>)&#123;<br><br>                ks.add(n);<br><br>            &#125;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[ks.size()];<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>  <br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k : ks)&#123;<br><br>            res[start] = k;<br><br>            start++;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">执行用时：<span class="hljs-number">3</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">41.24</span><span class="hljs-comment">%的用户</span><br>内存消耗：<span class="hljs-number">41.4</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">67.01</span><span class="hljs-comment">%的用户</span><br>通过测试用例：<span class="hljs-number">55</span> / <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>python</tag>
      
      <tag>java</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
